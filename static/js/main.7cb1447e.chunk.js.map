{"version":3,"sources":["components/Modals/ModalCommon/ModalCommon.jsx","img/common/defaultPlace.jpg","store/constants/commonConstants.js","utils/convertors/dateUtils.js","store/mainMenuReducer.js","store/systemReducer.js","utils/api/server.js","utils/api/api.js","store/collectReducer.js","store/rentReducer.js","store/simplePlaceReducer.js","components/Panels/Common/WithNotify/ButtonWithNotify.jsx","components/Panels/Common/HOCs/withNotify.jsx","components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/tournamentsReducer.js","store/teamsReducer.js","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","store/bidTeamsReducer.js","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","store/matchReducer.js","components/Panels/AdminPanel/Match/MatchListItem.jsx","components/Panels/Common/Shedule/Shedule.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/Hot/Hot.jsx","components/Panels/Common/WithHistory/CardWithHistory.jsx","components/Panels/Common/WithHistory/CellButtonWithHistory.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Panels/ProfilePanel/ProfilePanel.jsx","img/common/player300-s.png","img/common/stadium300-s.png","img/common/tournament300.png","store/profileReducer.js","store/cityReducer.js","store/vkReducer.js","components/Panels/AdminPanel/Match/MatchItem.jsx","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["ModalCommon","props","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","day","Date","getDate","month","getMonth","year","getFullYear","selectedDate","setSelectedDate","bidCity","setBidCity","useEffect","activeModal","modalName","id","header","data","title","mode","top","placeholder","onClose","Close","actions","size","onClick","message","Accept","Name","Surname","Birth","Register","City","action","bdate","isNaN","onChange","e","currentTarget","value","options","start","count","current","result","push","map","label","renderOption","option","restProps","min","max","onDateChange","date","profile","CityUmbracoId","style","color","CityName","cities","city","CityUmbracoName","type","currentDate","BidTeam","Id","AdminTournamentComment","TeamName","When","getDay","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Year","WhenBegin","WhenEnd","Details","Reglament","MatchLength","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Photo","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","undefined","keys","length","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","Address","Stages","Parking","Worktime","BreakTimes","DressingRooms","Areas","Price","Enabled","Access","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","timeToString","hours","minutes","seconds","h","toString","m","s","dateTimeToTimeString","datetime","getHours","getMinutes","dateToString","newDate","args","dateOptions","weekday","toLocaleString","addToTime","getSeconds","datesWithoutTimeIsSame","date1","date2","dateSelectorValueToJSDateValue","dsValue","jSDateValueToDateSelectorValue","jsDate","ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","name","position","enabled","show","activeItem","setActiveMenuItem","menuName","mainMenuReducer","state","find","it","ANY_ACTION_TYPE","SYSTEM_SET_LOADING","SYSTEM_PUSH_TO_HISTORY","SYSTEM_SET_CURRENT_MODAL_WINDOW","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","currentMenu","history","GlobalPopout","CurrentModalWindow","ErrorObject","ShowAdminTourneyTab","ShowAdminTeamTab","Loading","setGlobalPopout","on","setCurrentModalWindow","modal","setErrorMessage","errorMessage","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","item","val","pushToHistory","systemReducer","loading","slice","showAdminTourneyTab","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","resultcode","okObj","dat","VKAPI","get","then","ErrorMessage","catch","error","CityAPI","post","SimplePlaceAPI","cityId","startindex","formData","FormData","append","RentAPI","CollectAPI","userProfileId","simpleCollect","userProfile","JSON","stringify","simpleMember","reason","TeamAPI","teamId","ProfileAPI","vkUserData","vkUser","split","UTC","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","team","newgroup","oldgroup","userprofile","teamToSend","newgroupToSend","TournamentId","oldgroupToSend","newGroup","oldGroup","tournamentToSend","publish","tg","admintext","tournamentGroupToSend","tournamentGroup","tournamentGroupId","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllByAdminProfileId","saveTeam","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","tournamentgroup","teamName","bidTeamToTournament","MatchAPI","matchInfo","match","TournamentAPI","tournamentId","COLLECTS_SET_ALL_SIMPLE_COLLECTS","COLLECTS_SELECT_SIMPLE_COLLECT","COLLECTS_SET_COLLECT_ITEM_MODE","COLLECTS_DEL_SIMPLE_COLLECT","COLLECTS_ADD_SIMPLE_COLLECT","COLLECTS_SET_SIMPLE_COLLECT","COLLECTS_SET_SELECTED_COLLECT_MEMBERS","COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS","COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT","prototype","addDays","days","this","setDate","collects","selected","setAllSimpleCollects","simplecollects","deleteMemberFromSimpleCollect","member","addMemberToSelectedSimpleCollect","setCollectItemMode","delSimpleCollect","collect","addSimpleCollect","setSimpleCollect","collectReducer","simplecollect","Members","members","col","res","filter","demoRents","RENTS_SET_RENTS","RENTS_SET_SELECTED_RENT","rents","selectedRent","selectedDayRents","setRents","rentReducer","r","From","rentDate","SimplePlaceId","simplePlaceId","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","PLACES_SET_SELECTED_PLACE","places","selectedPlace","setPlaces","simplePlaceReducer","x","placeId","withNotify","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","AcceptAndClose","Yes","evt","handleClick","Message","prevProps","prevState","React","Component","connect","collectEntity","simplePlace","simplePlaceEntity","rentEntity","rent","myProfile","profileEntity","DeleteMemberFromCollect","pl","setSelectedSimplePlace","setSelectedRent","AddSimpleCollect","registerMemberToSimpleCollect","DelSimpleCollect","EditSimpleCollect","setSelectedMembers","workoutSelector","ranges","minutesOneSlot","workoutColNumber","useAdaptivity","viewWidth","acceptBeMember","setAcceptBeMember","showPanelBeMember","setShowPanelBeMember","showCancelMemberForm","setShowCancelMemberForm","cancelReason","setCancelReason","details","setDetails","collectType","setCollectType","needMembers","setNeedMembers","costMembers","setCostMembers","costAll","setCostAll","plus","setPlus","Array","selectedSlots","setSelectedSlots","selectedTimeRanges","vkids","UserVkId","photo","bridge","send","access_token","us","response","p","PhotoPath","youAreMember","youAreOrganizer","CreatorId","simplePlaces","changeCollectType","selectSlot","tmpSelectedSlot","ss","Hours","Minutes","sort","a","b","gotoProfile","profileId","open","calculateNeedMembers","need","Math","round","calculateCostMembers","membercost","worktimeSlots","wt","selectedDT","from","FromTime","ToTime","valueOf","fromTmp","slotsNumber","numberOfCols","numberOfRows","trunc","slots","slotsInHour","startHour","oneSlotMinutes","SlotMinutes","PricePerSlot","Selected","Rented","timeSlotsForSimpleCollects","iButtons","slot","slotCurrentIndex","forEach","worktimeSlot","curentWorktimeSlotFromTime","curentWorktimeSlotToTime","currentSlotTime","Breaks","brek","to","brekTime","rnt","rentTime","isArray","slt","selectedTime","CostPerHour","reduce","acc","cur","costall","costMem","calculateCostAll","splitCols","sCol","j","width","tr","until","caption","disabled","NeedMembers","Cost","Creator","before","src","memberUserProfile","SimpleCollectId","deleteMember","defaultValue","FullPrice","Checkbox","checked","changePlace","place","changeDate","description","bottom","withHistorySave","toMenuName","isBack","TeamAdminList","List","multiline","Button2Handle","after","CellClick","data-story","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_MY_ADD_OR_EDIT","TOURNAMENT_SET_TOURNAMENTGROUPS","TOURNAMENT_SET_TOURNAMENTTEAMS","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_MATCH_LENGTH","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES","emptyTournament","tournaments","bidsNew","selectedForView","selectedTables","myTournaments","cityTournamentAdmins","setTournaments","setTournamentTables","tables","setMyTournament","mytournament","addOrEditTournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","setSelectedTournamentGroups","groups","setTournamentTeams","bidsWithTeamsAndGroups","delGroupFromTournamentByKeyId","groupId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","deleteTournament","getTournamentTeams","getMyTournaments","tournamentReducer","tour","KeyId","newTourn","t","newTGroups","Teams","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","mainMenu","tournamentsEntity","teamsEntity","Button1Handle","publishTeam","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","ListItem","removable","onRemove","Delete","BidList","trim","Tournament","Founder","BidTeamTournamentList","Bids","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","SelectedName","bidSelectMode","cityEntity","getTournamentGroups","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","SaveTeam","TournamentAdminList","BidListItem","adminText","setAdminText","Item","Decline","MATCH_SET_ALL_MATCHES","MATCH_DEL_MATCH","MATCH_SET_SELECTED","MATCH_ADD_MATCH","MATCH_SET_HOT_MATCHES","MATCH_SET_ACCESS","MATCH_SET_MODE","MATCH_SET_PLAYED","MATCH_SET_HOT_PANEL","matches","hot","yesterday","today","tomorrow","hotPanel","access","setAllMatches","setHotMatches","delMatch","addMatch","setAccess","setMode","getAllMatchesByTournament","addMatchToShedule","Number","delMatchFromShedule","matchReducer","tomorrow_begin","tomorrow_end","st","played","panelName","schet","fontWeight","backgroundColor","padding","borderRadius","win","lose","MatchListItem","Match","ClickHandler","Played","Team1Goals","Team2Goals","Team1","Team2","setSelectedMatch","optMaker","todayIs","makeZeroBefore","g","UmbracoId","teamGoals","selectedTournamentGroup","setSelectedTournamentGroup","selectedTournamentGroupTeamList","setSelectedTournamentGroupTeamList","selectedTeam1","setSelectedTeam1","selectedTeam2","setSelectedTeam2","selectedTeam1Goals","setTeam1Goals","selectedTeam2Goals","setTeam2Goals","setSelectedPlace","selectedId","setSelectedId","selectedPlayed","setSelectedPlayed","selectedHour","setSelectedHour","selectedMinute","setSelectedMinute","getGroup","changeGroup","league_id","allMatchesInAllGroups","editId","PlaceId","Team1Id","Team2Id","BidTeamToTournamentId1","BidTeamToTournamentId2","groupAndMatchesItem","goToEditMatch","otherProps","delCurrentMatch","align","goToViewMatch","toLocaleDateString","w7percent","textAlign","w8percent","w20percent","overflow","TournamentTables","replaceTeam","tOldGoup","tNewGroup","tGoup","getTeamInfo","changeTournamentTeamBidTournamentGroup","deleteTeamFromTournament","setTournamentMatchLength","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","getTournamentTablesByTournamentId","tempGroupName","setTempGroupName","Tab","currentTab","setCurrentTab","activePopout","setActivePopout","AcceptBid","DeclineBid","SetPopup","oldTg","iosCloseItem","autoclose","newTg","SelectTournamentGroup","popout","activePanel","table","tT","firstItem","secondItem","chet","row","Games","Wins","Loses","Draws","GoalsScored","GoalsMissed","GoalsDifference","Points","keyId","DeleteTeam","toLocaleTimeString","Team1Name","Team2Name","ProfilePanel","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_TRIED_TO_GET_PROFILE","vkProfile","triedToGetProfile","setUserProfile","setTriedToGetProfile","tried","profileReducer","CITY_GET_ALL_FROM_SERVER","cityReducer","VK_SET_SELECTED_USER","selectedUser","vkReducer","MatchItem","globalPopout","errorObject","tournamentAdmins","setLoading","getAllSimpleCollectsInCityByCityUmbracoId","getAllSimplePlacesInCityByCityId","getAllRentsInCityByCityId","getUser","setSelectedUser","getTournamentsByCityId","cityUmbId","setVkProfileInfo","getUserProfile","getAuthInfo","vkProfileInfo","setHotPanel","selectSimpleCollect","getAllCitiesFromServer","setUserProfileCity","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","getMatchesInCurrentCity","setUser","timerStarts","setTimerStarts","cardStyle","left","height","background","opacity","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","setTimeout","setInterval","menuItem","activeStory","tabbar","player","stadium","hidden","getTime","timeEnding","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","hotEntity","paymentReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7cb1447e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input, DatePicker } from '@vkontakte/vkui'\n\n\n\nlet ModalCommon = (props) => {\n    // при первом запуске подгрузить города\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\n    let [selectedDate, setSelectedDate] = useState({day: new Date().getDate(), month: new Date().getMonth(), year: new Date().getFullYear()})\n    let [bidCity, setBidCity] = useState(\"\")\n\n\tuseEffect(() => {\n\t\t// загрузка городов здесь\n\t\t\n    }, [])\n    \n    const setDate = (value) => {\n        setSelectedDate(new Date(year=value.year, month=value.month, date=value.day))\n    }\n\n    return (\n        <ModalRoot activeModal={props.modalName}>\n            <ModalPage id=\"CitySelect\"\n                header={\n                <ModalPageHeader>\n                \n              </ModalPageHeader>\n            }\n          >\n                <Group>\n                    <InfoRow>\n                        Ваш город определен как: {props.data.title}\n                    </InfoRow>\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\n                    <InfoRow top=\"Город\">            \n                        <SelectMimicry placeholder=\"Выбрать город\" />\n                    </InfoRow>\n                </Group>    \n            </ModalPage>\n\n            <ModalCard\n                id=\"Error\"\n                onClose={props.Close}\n                //header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\n                header={props.data ? props.data : \"Произошла неизвестная ошибка\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"AreYouSure\"\n                onClose={props.Close}\n                header={props.data.message ? props.data.message : \"Текст вопроса не передан\"}\n                actions={\n                    <>\n                    <Button size=\"l\" mode=\"destructive\" onClick={props.Accept}>Да</Button>\n                    <Button size=\"l\" mode=\"secondary\" onClick={props.Close}>Нет</Button>\n                </>\n            }\n                >\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"MyProfile\"\n                onClose={props.Close}\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n                    {\n                        (props.data.Name) ?\n                        `Имя: ${props.data.Name} \\r\\n\n                        Фамилия: ${props.data.Surname} \\r\\n\n                        Дата рождения: ${props.data.Birth} \\r\\n\n                        Зарегистрирован: ${props.data.Register} \\r\\n\n                        Город: ${props.data.City.Name}\n                        ` : \"\"\n                    }\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectBirthYear\"\n                // onClose={props.Close}\n                header=\"Укажите Ваш год рождения\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => props.action({...props.data, bdate: props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)})}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow header=\"Год рождения не определен\">\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Год рождения\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            <ModalCard\n                id=\"SelectBirth\"\n                // onClose={props.Close}\n                header=\"Укажите дату вашего рождения\"\n                actions={\n                <Button size=\"l\" mode=\"primary\" \n                onClick={() => props.action({...props.data, bdate: !isNaN(selectedDate)})}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow header=\"Год рождения не определен\">\n                            Дату рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальную дату вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Дата рождения\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 100 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear()}}\n                                    //defaultValue={props.tournaments.selected.WhenEnd}\n\n                                    onDateChange={(e) => setDate(e)}\n                                ></DatePicker>            \n                            {/* <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                /> */}\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectCity\"\n                // onClose={props.Close}\n                header=\"Выберите город\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => {\n                        debugger\n                        props.action({...props.data.profile, CityUmbracoId: selectedCity})\n                        }\n                    }>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Город не найден\">\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \n                                Выберите из списка ближайший к вам город, в котором вы готовы участвовать в сборах.\n                            </InfoRow>\n                            <FormItem top=\"Город\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    debugger\n                                    setSelectedCity(+e.currentTarget.value)\n                                    }}\n                                options={props.data.cities && props.data.cities.map(city => {\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\n                                }\n                                )}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                        <InfoRow>или</InfoRow>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Укажите название вашего города\">\n                                Оставьте заявку администратору на добавление Вашего города в систему\n                                (После отправки сказать спасибо и перевести профиль в режим просмотра... Не нужно предлагать другой город, пожалуй)\n                            </InfoRow>\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n      </ModalRoot>\n    )\n}\n\n\nexport default ModalCommon","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","const currentDate = new Date();\n\n\n// таймслотов в одном часе\nexport const timeSlotsInOneHour = () => {\n    return +2\n}\n\nexport const getMaxNumberOfMembersInCollect = () => {\n    return +30\n}\n\nexport const getMinNumberOfMembersInCollect = () => {\n    return +2\n}\n\nexport const accessTypes = [\n    {Id: 0, Name: \"public\"},\n    {Id: 1, Name: \"private\"},\n    {Id: 2, Name: \"moderate\"},\n]\n\n// тип участия в сборе\nexport const memberingCollectTypes = {\n    Invite: 0, // приглашен\n    Member: 1, // уже подтвержден (участник)\n    Organizator: 2, // организатор\n    Participate: 3, // попросился\n    All: 4, // без фильтрации, все сборы\n}\n\nexport const cityTournamentAdmins = \n[\n    {\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \n    },\n]\n\nexport const Collect = {\n    collects: [],\n    selected: {\n        selected: {\n            Id: 6,\n            Name: 'Тестовый сбор',\n            When: '2021-09-09T17:40:00',\n            DurationMinutes: 90,\n            Details: 'Сбор в 10:30',\n            Comment: 'Верхнее поле',\n            Cost: 2500,\n            NeedMembers: 15,\n            PlaceId: 1,\n            Place: {\n              Id: 1,\n              Name: 'Стадион Динамо верхнее поле',\n              Info: 'Половина поля',\n              SimpleCityId: 3,\n              City: null,\n              Address: 'бульвар Петрковский',\n              Geo: '57.754071, 40.963803',\n              MainPicture: null,\n              Parking: true,\n              BicycleParking: false,\n              Enabled: true,\n              UmbracoId: 0,\n              Worktime: [],\n              ErrorMessage: null,\n              Published: true,\n              Deleted: false\n            },\n            CreatorId: 63,\n            Creator: {\n              CityUmbracoName: 'Кострома',\n              Name: 'Даниил',\n              Surname: 'Каверзин',\n              CityVkId: 1809,\n              UserProfileId: 63,\n              UserVkId: 'id136649652',\n              LastOnline: '2021-05-25T10:35:25',\n              Birth: '2001-06-04T00:00:00',\n              PhotoPath: ''\n            },\n            Members: [\n              {\n                Id: 1,\n                SimpleCollect: {\n                  Id: 6,\n                  Name: 'Тестовый сбор',\n                  When: '2021-09-09T17:40:00',\n                  DurationMinutes: 90,\n                  Details: 'Сбор в 10:30',\n                  Comment: 'Верхнее поле',\n                  Cost: 2500,\n                  NeedMembers: 15,\n                  SimplePlaceId: 1,\n                  SimplePlace: {\n                    Id: 1,\n                    Name: 'Стадион Динамо верхнее поле',\n                    Info: 'Половина поля',\n                    SimpleCityId: 3,\n                    City: null,\n                    Address: 'бульвар Петрковский',\n                    Geo: '57.754071, 40.963803',\n                    MainPicture: null,\n                    Parking: true,\n                    BicycleParking: false,\n                    Enabled: true,\n                    UmbracoId: 0,\n                    Worktime: [],\n                    ErrorMessage: null,\n                    Published: true,\n                    Deleted: false\n                  },\n                  CreatorId: 63,\n                  Creator: {\n                    UserProfileId: 63,\n                    UserVkId: 'id136649652',\n                    Name: 'Даниил',\n                    Surname: 'Каверзин',\n                    Fathername: null,\n                    Birth: '2001-06-04T00:00:00',\n                    Register: '2021-05-25T10:02:38',\n                    LastOnline: '2021-05-25T10:35:25',\n                    Height: 0,\n                    Weight: 0,\n                    PhotoPath: '',\n                    CityVkId: 1809,\n                    CityName: 'Ленинск-Кузнецкий',\n                    CityUmbracoId: 1080,\n                    CityUmbracoName: 'Кострома',\n                    LegId: -1,\n                    AmpluaId: -1,\n                    LastIp: '81.177.24.37',\n                    SimpleCollects: [],\n                    SimpleUserMessages: [],\n                    SimpleMembers: [],\n                    Citys: null,\n                    Tournaments: [],\n                    Ampluas: null,\n                    Legs: null,\n                    Admins: [],\n                    CityTournamentAdmins: [],\n                    ErrorMessage: '',\n                    Published: false,\n                    Deleted: false\n                  },\n                  SimpleMembers: [],\n                  ErrorMessage: null,\n                  Published: false,\n                  Deleted: false\n                },\n                SimpleCollectId: 6,\n                UserProfile: {\n                  UserProfileId: 63,\n                  UserVkId: 'id136649652',\n                  Name: 'Даниил',\n                  Surname: 'Каверзин',\n                  Fathername: null,\n                  Birth: '2001-06-04T00:00:00',\n                  Register: '2021-05-25T10:02:38',\n                  LastOnline: '2021-05-25T10:35:25',\n                  Height: 0,\n                  Weight: 0,\n                  PhotoPath: '',\n                  CityVkId: 1809,\n                  CityName: 'Ленинск-Кузнецкий',\n                  CityUmbracoId: 1080,\n                  CityUmbracoName: 'Кострома',\n                  LegId: -1,\n                  AmpluaId: -1,\n                  LastIp: '81.177.24.37',\n                  SimpleCollects: [],\n                  SimpleUserMessages: [],\n                  SimpleMembers: [],\n                  Citys: null,\n                  Tournaments: [],\n                  Ampluas: null,\n                  Legs: null,\n                  Admins: [],\n                  CityTournamentAdmins: [],\n                  ErrorMessage: '',\n                  Published: false,\n                  Deleted: false\n                },\n                UserProfileId: 63\n              },\n            ]\n          }\n    }\n}\n\nexport const TeamAdmins = \n[\n    {\n        Id : 0,\n        Name: \"Тестовая команда\",\n        Year: 2021,\n        WhenBorn: {day: 1, month: 2, year: 2021},\n        Details: \"Системная\",\n        Logo: \"\",\n        CityId: -1,\n        TournamentGroups: [], \n        Admins: [],\n        Matches: [],\n        Players: [],\n        Published: true,\n        Deleted: false,\n    },\n]\n\nexport const BidTeam = {\n    Id: -1,\n    AdminTournamentComment: \"\",\n    TeamName: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TeamId: -1, \n    Team: [],\n    TournamentGroupId: -1,\n    TournamentGroup: [],\n    UserProfileId: -1,\n    UserProfile: {},\n    Approved: false,\n    Deleted: false,\n    Published: false,\n\n}\n\nexport const Match = {\n    Id: -1,\n    Name: \"Матч\",\n    Description: \"Описание матча\",\n    Picture: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TournamentGroup: {},\n    TournamentGroupId: -1,\n    Place: {},\n    PlaceId: -1,\n    Team1: {},\n    Team1Id: -1,\n    Team2: {},\n    Team2Id: -1,\n    Team1Bid: {},\n    Team1BidId: -1,\n    Team2Bid: {},\n    Team2BidId: -1,\n    Team1Goals: 0,\n    Team2Goals: 0,\n    MatchEvents: [],\n    Deleted: false,\n    Published: false,\n    ErrorMessage: \"\",\n\n}\n\nexport const EmptyTournament = {\n    Id : -1,\n    Name: \"\",\n    Year: 0,\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    Details: \"\",\n    Reglament: \"\", \n    MatchLength: 60,\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [], \n    Admins: [],\n    Published: false,\n    Deleted: false,\n}\n\n\nexport const geo = {\n    Cities: [\n        {\n            Id: 0,\n            Name: \"Кострома\",\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\n            Population: 250000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n        {\n            Id: 1,\n            Name: \"Иваново\",\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\n            Population: 800000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n    ],\n    Owners: [\n        {\n            Id: 0, \n            Name: \"Владелец 1\",\n        },\n        {\n            Id: 1, \n            Name: \"Владелец 2\",\n        }\n    ],\n}\n\nexport const simplePlaces =  []\n\nexport const rents =  []\n\n\nexport const places =  [\n        {\n            PlaceId: 0,\n            Name: \"Динамо\", /* placename*/\n            get Owner() { return geo.Owners[0]},\n            set Owner(val) { geo.Owners[0] = val},\n            get City() { return geo.Cities[0]},\n            set City(val) { geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\n            Geo: \"\",\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\n            DressingRooms: [\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\n            ],\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\n            Enabled: true,\n            Access: {},\n            \n        },\n        {\n            PlaceId: 1,\n            Name: \"МЧС\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        },\n        {   \n            PlaceId: 2,\n            Name: \"КГТУ\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        }\n    ]\n\n    export const ampluaCathegoryTypes = [\n        {Id: 0, Name: \"Вратарь\"},\n        {Id: 1, Name: \"Защитник\"},\n        {Id: 2, Name: \"Полузащитник\"},\n        {Id: 3, Name: \"Нападающий\"},\n        {Id: 4, Name: \"Тренер\"},\n        {Id: 5, Name: \"Административный персонал\"},\n        {Id: 6, Name: \"Игрок\"},\n    ]\n     \n    export const ampluaTypes = [\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\n    ]\n\n\nexport const users = [\n    {\n        Id: 0,\n        FirstName: \"Александр\",\n        SurName: \"Смирнов\",\n        FatherName: \"Евгеньевич\",\n        NickName: \"easports\",\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\n        Datebirth: new Date(\"05.29.1987\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n                Stamina: 100, // выносливость\n                Feints: 100, // финты\n                Reaction: 100, // реакция\n                ScoringFlair: 100, // голевое чутье\n                Intellect: 100, // ум\n                Rejection: 100, // отбор мяча\n                SlideEffect: 100, // игра в подкате\n                Header: 100, // игра головой\n                Creativity: 100, // креативность\n                Dribble: 100, // дрибблинг\n                Opening: 100, // открывание под пас\n                Charisma: 100, // харизма\n                BallTaking: 100, // прием мяча\n                FieldVision: 100, // видение поля\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n        },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 1,\n        FirstName: \"Евгений\",\n        SurName: \"Иванов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"eivanov\",\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\n        Datebirth: new Date(\"28.02.1983\"),\n        Leg: 1, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 2,\n        FirstName: \"Фёдор\",\n        SurName: \"Смолов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"fsmolov\",\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\n        Datebirth: new Date(\"01.01.1989\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n]\n\nexport const myProfile = {\n    myProfile: users[0],\n}\n\n\nexport class commonUtils  {\n\n    static deepClone = (obj) => {\n        const clObj = {};\n        for(const i in obj) {\n            if (obj[i] instanceof Object) {\n                clObj[i] = this.deepClone(obj[i]);\n                continue;\n            }\n            clObj[i] = obj[i];\n        }\n        return clObj;\n    }\n\n    static copyCity = (city_source) => {\n        return city_source;\n    }\n\n    static copyAmplua = (amplua_source) => {\n        return amplua_source\n    }\n\n    static copyKeyFunction = (keyFunction_source) => {\n        return keyFunction_source\n    }\n\n    static copyUser = (user_source) => {\n        if (user_source == undefined || Object.keys(user_source).length === 0)\n            return undefined\n\n        return {\n            Id: user_source.Id,\n            FirstName: user_source.FirstName,\n            SurName: user_source.SurName,\n            FatherName: user_source.FatherName,\n            NickName: user_source.NickName,\n            Datebirth: user_source.Datebirth,\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\n            CityNow: { ...this.copyCity(user_source.CityNow) },\n            Level: {...user_source.Level\n            },\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\n            Injury: {...user_source.Injury},\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n        }\n            \n    }\n\n    static copyOwner = (owner_source) => {\n        return {...owner_source}\n    }\n    \n    static copyAccess = (access_source) => {\n        return {...access_source}\n    }\n\n    static copyPlace = (place_source) => {\n        \n        if (place_source == undefined || Object.keys(place_source).length === 0)\n            return undefined\n\n        return {\n            Id: place_source.Id,\n            Name: place_source.Name,\n            Owner: {...this.copyOwner(place_source.Owner)},\n            City: {...this.copyCity(place_source.City)},\n            Address: {...place_source.Address},\n            Geo: {...place_source.Geo},\n            Photo: [...place_source.Photo],\n            Stages: place_source.Stages,\n            Parking: place_source.Parking,\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\n            DressingRooms: [...place_source.DressingRooms],\n            Areas: [...place_source.Areas],\n            Price: place_source.Price, // цена за час занятий\n            Enabled: place_source.Enabled,\n            Access: {...this.copyAccess(place_source.Access)},\n        }\n    }\n\n    static copyCollect = (collect_source) => {\n        \n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \n            return undefined\n\n        return {\n            Id: collect_source.Id,\n            Place: this.copyPlace(collect_source.Place),\n            Date: collect_source.Date,\n            Hour: collect_source.Hour,\n            Minute: collect_source.Minute,\n            DurationMinutes: collect_source.DurationMinutes,\n            Price: collect_source.Price, // цена за весь период\n            Options: [...collect_source.Options],\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\n            /*\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\n\n            */\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\n            return {\n                Id: uGroup.Id,\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\n                NumberOf: uGroup.NumberOf,  // количество участников \n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \n                    {\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\n                    }): \n                [{}])],\n                Price: uGroup.Price,\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\n            }\n        })],\n            UsersInvited: [\n                ...collect_source.UsersInvited.map(uInvited => {\n                    \n                    return {\n                        Id: uInvited.Id,\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \n                        User: {...this.copyUser(uInvited.User)},\n                    }\n                })\n            ],\n            UsersWantsToParticipate: [\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\n                    \n                    return {\n                        \n                        Id: uWP.Id,\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \n                        User: {...this.copyUser(uWP.User)},\n                    }\n                })\n            ],\n            Access: { ...this.copyAccess(collect_source.Access) },\n            Permanent: collect_source.Permanent,\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \n            Organizer: {...this.copyUser(collect_source.Organizer)}\n        }\n    }\n\n}","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\n\nexport function isDate(str) {\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\n  }\n \nexport const getAge = (date) => {\n    if (date != undefined) \n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\n    else\n        return 0;\n    \n}\n\nexport const timeToString = (hours, minutes, seconds) => {\n    \n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\n    let res = \"\";\n\n    if (h.length > 0 && m.length > 0 && s.length > 0)\n        res = h + \":\" + m + \":\" + s;\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\n        res = h + \":\" + m;\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\n        res = h;\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\n        res = m + \":\" + s;\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\n        res = s;\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\n        res = m;\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\n        res = h + \":\" + s;\n    else\n        res = \"\";\n    return res;\n}\n\nexport const dateTimeToTimeString = (datetime) => {\n    return timeToString(new Date(datetime).getHours(), new Date(datetime).getMinutes())\n}\n\n// возвращает дату в формате ДН, ДД ММММ ГГГГ г. , в args args[0] - прибавить дней, args[1] - прибавить месяцев, args[2] - прибавить лет,\n// args[3] = true - пишем день недели, false - не пишем\nexport const dateToString = (date, ...args) => {\n    \n    if (typeof date == \"string\")\n        date = new Date(date);\n\n    let newDate = date;\n    let dateOptions = (args == undefined || args[3] == undefined || (args[3] != undefined && args[3] == true)) ?\n    {\n        // era: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'short',\n        // timezone: 'UTC',\n        // hour: 'numeric',\n        // minute: 'numeric',\n        // second: 'numeric'\n    }\n    : {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    };\n\n    if (args[0])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2])\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate.toLocaleString(\"ru\", dateOptions)\n}\n\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\nexport const addToDate = (date, ...args) => {\n        \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить дни\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1]) // добавить месяцы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2]) // добавить годы\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate;\n}\n\n// прибавляет к дате переданное в параметрах количество часов, минут, секунд. первый параметр -часы, второй- минуты и т.д.\nexport const addToTime = (date, ...args) => {\n     \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить часы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours() + args[0])\n\n    if (args[1]) // добавить минуты\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes() + args[1])\n\n    if (args[2]) // добавить секунды\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes(), newDate.getSeconds() + args[2])\n\n    return newDate;\n}\n\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\nexport const datesWithoutTimeIsSame = (date1, date2) => {\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\n}\n\n// сравнение двух дат только по времени (часы и минуты) без даты. true - равны, false- не равны\nexport const timesWithoutDateHourMinuteIsSame = (date1, date2) => {\n    return (date1.getHours() == date2.getHours() && date1.getMinutes() == date2.getMinutes())\n}\n\n// преобразование значения dateSelector из пакета vk ui в нативную дату JS\nexport const dateSelectorValueToJSDateValue = (dsValue) => {\n    //{day: currentDate.getDate(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()}\n    return new Date(dsValue.year, dsValue.month-1, dsValue.day)\n}\n\n// преобразование нативной даты JS в значение dateSelector из пакета vk ui\nexport const jSDateValueToDateSelectorValue = (jsDate) => {\n    \n    return {day: jsDate.getDate(), month: jsDate.getMonth()+1, year: jsDate.getFullYear()}\n}\n\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    \n    for (let i = 0; i < slotsNumber; i++){\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\n    }\n    \n    return slots\n}\n\n// создание массива объектов для расписания работы площадки\nexport const timeSlotsForSimpleCollects = (slotsNumber, slotsInHour=timeSlotsInOneHour(), startHour) => {\n    \n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    for (let i = 0; i < slotsNumber; i++)\n    {\n        slots.push({\n            Hours: Math.trunc(i / slotsInHour) + startHour, \n            Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), \n            SlotMinutes: oneSlotMinutes,\n            PricePerSlot: 0,\n            Enabled: true,\n            Selected: false,\n            Rented: false,}\n            )\n    }\n    \n    return slots\n\n}","const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\n\n\n\nconst initState = {\n    menuItems: [{\n        id: 0,\n        name: \"hot\",\n        title: \"Горячее\",\n        position: 0,\n        enabled: true,\n        show: true,\n    },{\n        id: 1,\n        name: \"allTournaments\",\n        title: \"Турниры\",\n        position: 1,\n        enabled: true,\n        show: true,\n    },{\n        id: 2,\n        name: \"profile\",\n        title: \"Профиль\",\n        position: 3,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 3,\n        name: \"tournamentadmin\",\n        title: \"Управление турнирами\",\n        position: 4,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"tournamentitem\",\n        title: \"Турнир\",\n        position: 5,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 3,\n        name: \"teamadmin\",\n        title: \"Управление командами\",\n        position: 6,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"teamitem\",\n        title: \"Команда\",\n        position: 7,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 5,\n        name: \"addcollect\",\n        title: \"Новый сбор\",\n        position: 8,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 6,\n        name: \"viewcollect\",\n        title: \"Сбор\",\n        position: 9,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 7,\n        name: \"viewuser\",\n        title: \"Игрок\",\n        position: 10,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 8,\n        name: \"bidlist\",\n        title: \"Доступно для заявки\",\n        position: 11,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 9,\n        name: \"collectslist\",\n        title: \"Все сборы\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 10,\n        name: \"collectadmin\",\n        title: \"Сбор\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"notauthorized\",\n        title: \"Не авторизован\",\n        position: 13,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"matchitem\",\n        title: \"Матч\",\n        position: 14,\n        enabled: true,\n        show: true,\n    },\n    \n],\n    //activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\n    activeItem: {id: 11, name: \"notauthorized\", title: \"Не авторизован\", position: 13, enabled: true, show: true,},\n}\n\n\nlet mainMenuReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\n            \n            return {...state,\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setActiveMenuItem = (menuName) => {\n    \n    return {\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\n        menuName\n    }\n}\n\n\nexport default mainMenuReducer;","import {ampluaTypes, users} from './constants/commonConstants'\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst SYSTEM_SET_LOADING = \"SYSTEM_SET_LOADING\";\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\nconst SYSTEM_SET_CURRENT_MODAL_WINDOW = \"SYSTEM_SET_CURRENT_MODAL_WINDOW\";\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\n\n\nconst initState = {\n    currentMenu: {},\n    history: [\"hot\"],\n    GlobalPopout: false,\n    CurrentModalWindow: null,\n    //ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\n    ErrorObject: \"\",\n    ShowAdminTourneyTab: false,\n    ShowAdminTeamTab: true,\n    Loading: true,\n     // level \n\n}\n\n\nexport let systemReducer = (state = initState, action) => \n{\n    \n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        case SYSTEM_PUSH_TO_HISTORY: {\n            return {...state,\n                history: [...state.history, action.item]\n            };\n        }\n        case SYSTEM_SET_GLOBAL_POPOUT: {\n            return {...state,\n                GlobalPopout: action.on,\n            };\n        }\n        case SYSTEM_SET_CURRENT_MODAL_WINDOW: {\n            return {...state,\n                CurrentModalWindow: action.modal,\n            };\n        }\n        case SYSTEM_SET_LOADING: {\n            return {...state,\n                Loading: action.loading,\n                GlobalPopout: action.loading,\n            };\n        }\n        case SYSTEM_SET_ERROR_MESSAGE: {\n            \n            return {...state,\n                ErrorObject: {...action.errorMessage},\n                // че-то ошибочки начинают какие-то левые вылезать, если делать все как тут нужно\n                // ErrorObject: {...state.ErrorObject,\n                //     message: action.errorMessage,\n                //     resultcode: -1, \n                //     result: \"\",\n                // }\n            };\n        }\n        case SYSTEM_RESET_ERROR: {\n            \n            return {...state,\n                ErrorObject: {...initState.ErrorObject},\n            };\n        }\n        case SYSTEM_POP_FROM_HISTORY: {\n            \n            return {...state,\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\n            };\n        }\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\n            \n            return {...state,\n                ShowAdminTourneyTab: action.showAdminTourneyTab\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\nexport const setLoading = (loading) => {\n    return {\n        type: SYSTEM_SET_LOADING,\n        loading\n    }\n}\n\nexport const pushToHistory = (val) => {\n    return {\n        type: SYSTEM_PUSH_TO_HISTORY,\n        item: val\n    }\n}\n\nexport const setShowAdminTourneyTab = (val) => {\n    return {\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\n        showAdminTourneyTab: val\n    }\n}\n\nexport const popFromHistory = (val) => {\n    return {\n        type: SYSTEM_POP_FROM_HISTORY,\n        item: val\n    }\n}\n\nexport const setGlobalPopout = (on) => {\n    return {\n        type: SYSTEM_SET_GLOBAL_POPOUT,\n        on\n    }\n}\n\nexport const setCurrentModalWindow = (modal) => {\n    return {\n        type: SYSTEM_SET_CURRENT_MODAL_WINDOW,\n        modal\n    }\n}\n\nexport const setErrorMessage = (errorMessage) => {\n    return {\n        type: SYSTEM_SET_ERROR_MESSAGE,\n        errorMessage\n    }\n}\n\nexport const resetError = () => {\n    return {\n        type: SYSTEM_RESET_ERROR\n    }\n}\n\n// export const setLastFromHistoryMenuItem = (val) => {\n//     return {\n//         type: POP_FROM_HISTORY,\n//         item: val\n//     }\n// }\n\nexport const goToPanel = (nextPanel, back) => {\n    return (dispatch, getState) => {\n        \n        if (back){\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\n            dispatch(setActiveMenuItem(preLast));\n            dispatch(popFromHistory(nextPanel));\n        }\n        else{\n            dispatch(pushToHistory(nextPanel));\n            dispatch(setActiveMenuItem(nextPanel));\n        }\n        \n    }\n}\n\nexport default systemReducer;","import Axios from 'axios'\n\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\";\nexport const backserver = \"https://oblakosporta.ru\";\n//export const backserver = \"https://localhost:44325\";\n//export const backserver = \"https://192.168.56.101:44325\";\nexport const URL = backserver + \"/umbraco/api/\";\nexport const authQueryString = window.location.search;\n\n\n\nexport\tconst PostJsonInstance = Axios.create(\n\t\t{\n\t\t\tbaseURL: URL,\n\t\t\ttimeout: 15000,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"}\n\t\t}\n\t)","import { PostJsonInstance, authQueryString } from './server';\n\nexport let errorObj = (text) => {\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\n}\n\nexport let okObj = (dat) => {\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\n}\n\n\n// export let ApiSendInfo =\n// {\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \n//     system: {},\n//     addRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return false;\n//         }\n//         let currentDT = new Date();\n//         this.requests.push({name, time: currentDT});\n//         return {name, time: currentDT};\n//     },\n//     checkRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return true;\n//         }\n//         return false;\n//     },\n//     check: function(){\n//         ////debugger\n//         this_.requests = this_.requests ? this_.requests.map(req => {\n//             let now = new Date();\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\n//                 return req;\n//             }\n//         }) : []\n//     },\n// }\n\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\n\nexport const VKAPI = {\n    getUser(id) {\n        debugger\n        return PostJsonInstance.get(\"https://api.vk.com/method/users.get?user_id=\" + id + \"&v=5.52\").then(data => {\ndebugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n        \n    }\n}\n\nexport const CityAPI = {\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const PlaceAPI = {\n\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n\n\n    // запрос места по его Id\n    // placeId - Id места\n    getById(placeId) {\n        let formData = new FormData();\n        formData.append(\"placeid\", placeId);\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n\n}\n\nexport const SimplePlaceAPI = {\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"SimplePlace/GetSimplePlacesInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    \n\n}\n\nexport const RentAPI = {\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    getAllRentsInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"Rents/GetRentsInCityByCityId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n}\n\nexport const CollectAPI = {\n\n    getAll() {\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"placeid\", placeId);\n\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityId(cityId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityid\", cityId);\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n    \n    \n    addSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/AddCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    editSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/EditCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    delSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DelCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    registerSimpleMemberToSimpleCollect(userProfileId, simpleCollect) {\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/RegisterMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    deleteMemberFromSimpleCollect(userProfileId, simpleCollect, simpleMember, reason=\"\") {\n        debugger\n        //simpleCollectUserProfile\n        simpleMember.Comment=reason;\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DeleteMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile }, simpleMember: {...simpleMember} })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllSimpleByCityUmbracoId(cityId, startindex = 0) {\n        //debugger\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityId\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"SimpleCollect/GetSimpleCollectsInCityByCityId\" + authQueryString, formData).then(data => {\n            //return okObj(data.data);\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n}\n\n\nexport const TeamAPI = {\n\n    // getAll() {\n    //     return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n    //         return okObj(data.data);\n    //     })\n    //         .catch(error => {\n    //             return errorObj(error)\n    //         })\n    // },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getTeamInfoByTeamId(teamId) {\n        let formData = new FormData();\n        formData.append(\"teamid\", teamId);\n\n        return PostJsonInstance.post(\"SimpleTeam/GetById\" + authQueryString, formData).then(data => {\n            //debugger\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const ProfileAPI = {\n    // запрос информации о пользователе\n    getUserProfile(vkUserData) {\n\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\n    getAuthInfo_old(formData) {\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // регистрация/обновление даты рождения + получение данных о профиле\n    getAuthInfo(vkUser) {\n\n        let [day, month, year] = vkUser.bdate.split('.');\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\n\n        let vkUserData = {\n            'bdate': bDate,\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\n            'first_name': vkUser.first_name,\n            'id': vkUser.id,\n            'last_name': vkUser.last_name,\n            'photo_100': vkUser.photo_100,\n            'photo_200': vkUser.photo_200,\n            'photo_max_orig': vkUser.photo_max_orig,\n            'sex': vkUser.sex,\n            'timezone': vkUser.timezone,\n        }\n\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // изменение города привязки пользователя\n    setUserProfileCity(userData) {\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    }\n}\n\nexport const CityTournamentAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    // возвращает всех админов города\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    /// запрос групп турнира\n    getTournamentGroups(tournament, startindex) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"tournamentId\", tournament.Id);\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    changeTeamTournamentGroup(team, newgroup, oldgroup,  userprofile){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let newgroupToSend = {\n            Id: newgroup.Id,\n            TournamentId: newgroup.TournamentId,\n        }\n        let oldgroupToSend = {\n            Id: oldgroup.Id,\n            TournamentId: oldgroup.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/SetTeamTournamentGroup\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            newGroup: { ...newgroupToSend }, oldGroup: { ...oldgroupToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    \n    // возвращает заявки по турниру (для админа турнира)\n    getTournamentTeamsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpleTournament/GetTeamsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTournament(tournament, userprofile) {\n        ////debugger\n        \n\n        if (tournament.Id < 0){\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\n                    return {\n                        Name: item.Name,\n                        Id: item.Id != undefined ? item.Id : -1,\n                    }\n                })],\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTournament(tournament, userprofile) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    // удаление команды (отклонение заявки от команды) из турнира\n    deleteTeamFromTournamentByTeam(team, tg, userprofile, admintext){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let tournamentGroupToSend = {\n            Id: tg.Id,\n            TournamentId: tg.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeleteTeamFromTournament\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            tournamentGroup: { ...tournamentGroupToSend }, userProfile: { ...userprofile }, admintext: admintext })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    /// удаление группы турнира\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tournamentGroupId,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n   \n    /// добавление группы турнира\n    addTournamentGroup(tournament, userprofile, tGroup) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tGroup.Id,\n            Name: tGroup.Name,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n\n    // AddContact(contact){\n    //     ////debugger\n    //     //return instace.get('/contacts/getcontacts');\n    //     let Contact= contact;\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\n    //         ////debugger\n    //         return x.data;\n    //     }).catch(y => {\n    //         ////debugger\n    //         console.log(y)\n    //     });\n    // },\n}\n\nexport const TeamAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTeam(team, userprofile) {\n        \n        if (team.Id < 0){\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTeam(team, userprofile) {\n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n}\n\nexport const BidTeamAPI = {\n    \n    getActualTournaments(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // возвращает заявки по турниру (для админа турнира)\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    // согласовывает заявку (для админа турнира)\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    \n    // отклоняет заявку (для админа турнира)\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        let bid = {\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \n                    When: new Date(),\n                    TournamentGroupId: tournamentgroup.Id,\n                    UserProfileId: userprofile.UserProfileId,\n                    TeamId: team.Id,\n                    Team: null,\n                    Approved: false,\n                    UserProfile: null,\n                    ErrorMessage: \"\",\n                    AdminTournamentComment : \"\",\n                    TournamentGroup: null,\n                }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delBidTeamToTournament(bid, userprofile, team) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n    \n    /// допуск комады к турниру\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\n        ////debugger \n        let bidToSend = {...bid,\n            AdminTournamentComment: admincomment,\n            Approve: approve,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const MatchAPI = {\n    addMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Add2\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Del\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    getAllMatchesByTournament(tournament, userprofile) {\n        \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n        //new Date()\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        //return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tourn }, userProfile: { ...userprofile } })).then(data => {\n        return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n    getCurrentMatchesByCity(userProfile) {\n        let formData = new FormData();\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\n        return PostJsonInstance.post(\"Match/GetByCity\" + authQueryString, formData).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n\n}\n\nexport const TournamentAPI = {\n    getAllTournamentsInCityByCityUmbracoId(cityUmbracoId) {\n        \n        let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllCurrentInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n    \n    \n    getTournamentTablesByTournamentId(tournamentId) {\n        \n        let formData = new FormData();\n        formData.append(\"tournamentId\", tournamentId);\n        return PostJsonInstance.post(\"Tables/GetByTournamentId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    }\n}","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CollectAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\n\nconst COLLECTS_SET_ALL_SIMPLE_COLLECTS = \"COLLECTS_SET_ALL_SIMPLE_COLLECTS\";\nconst COLLECTS_SELECT_SIMPLE_COLLECT = \"COLLECTS_SELECT_SIMPLE_COLLECT\";\nconst COLLECTS_SET_COLLECT_ITEM_MODE = \"COLLECTS_SET_COLLECT_ITEM_MODE\";\nconst COLLECTS_DEL_SIMPLE_COLLECT = \"COLLECTS_DEL_SIMPLE_COLLECT\";\nconst COLLECTS_ADD_SIMPLE_COLLECT = \"COLLECTS_ADD_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SIMPLE_COLLECT = \"COLLECTS_SET_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SELECTED_COLLECT_MEMBERS = \"COLLECTS_SET_SELECTED_COLLECT_MEMBERS\";\nconst COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS = \"COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS\";\nconst COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT = \"COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\n\nconst initState = {\n    collects: [],\n    selected: {},\n    mode: \"view\",\n}\n\n\nlet collectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case COLLECTS_SET_ALL_SIMPLE_COLLECTS: {\n            return {\n                ...state,\n                collects: [...action.simplecollects],\n            };\n        }\n        case COLLECTS_SELECT_SIMPLE_COLLECT: {\n            return{\n                ...state,\n                selected: action.simplecollect,\n            }\n        }\n        case COLLECTS_SET_COLLECT_ITEM_MODE: {\n            return{\n                ...state,\n                mode: action.mode,\n            }\n        }\n        case COLLECTS_SET_SELECTED_COLLECT_MEMBERS: {\n            return{\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Members: [...action.members],\n                },\n            }\n        }\n        case COLLECTS_ADD_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects, action.collect],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_SET_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.map(col => {\n                    \n                    if (col.Id == action.collect.Id)\n                    {\n                        col = {...action.collect}\n                    }\n                    return col\n                })],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_DEL_SIMPLE_COLLECT: {\n            let res = {\n                ...state,\n                collects: [...state.collects.filter(col => col.Id != action.collect.Id) ],\n                selected: {...state.selected,\n                    Published: false,\n                    Deleted: true,\n            }\n            }\n            return res;\n        }\n        case COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                },\n            }\n        }\n        case COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT: {\n            debugger\n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members, action.member],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members, action.member],\n                },\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllSimpleCollects = (simplecollects) => {\n    return {\n        type: COLLECTS_SET_ALL_SIMPLE_COLLECTS,\n        simplecollects\n    }\n}\n\nexport const deleteMemberFromSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS,\n        member\n    }\n}\n\nexport const addMemberToSelectedSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT,\n        member\n    }\n}\n\nexport const selectSimpleCollect = (simplecollect) => {\n    return {\n        type: COLLECTS_SELECT_SIMPLE_COLLECT,\n        simplecollect\n    }\n}\n\nexport const setCollectItemMode = (mode) => {\n    return {\n        type: COLLECTS_SET_COLLECT_ITEM_MODE,\n        mode\n    }\n}\n\nexport const delSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_DEL_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const addSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_ADD_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_SET_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSelectedMembers = (members) => {\n    return {\n        type: COLLECTS_SET_SELECTED_COLLECT_MEMBERS,\n        members\n    }\n}\n\n\n\n\n// возвращает актуальные простые сборы города\nexport const getAllSimpleCollectsInCityByCityUmbracoId = (cityId = -1, userProfile = null) => {\n    return dispatch => {\n        if (cityId != -1) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    CollectAPI.getAllSimpleByCityUmbracoId(cityId)\n                        .then(pl => {\n                            //debugger\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setAllSimpleCollects(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные CollectAPI.getAllSimpleByCityUmbracoId\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отказ участника сбора\nexport const DeleteMemberFromCollect = (userProfileId = -1, collect = null, simpleMember=null, reason = \"\") => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null) &&  (simpleMember != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.deleteMemberFromSimpleCollect(userProfileId, collect, simpleMember, reason)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(deleteMemberFromSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.deleteMemberFromSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавление сбора\nexport const AddSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.addSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(addSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// изменение сбора\nexport const EditSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.editSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                \n                                if (pl && pl.data) {\n                                    \n                                    dispatch(setSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отмена сбора\nexport const DelSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.delSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(delSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.delSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// регистрация участника на сбор\nexport const registerMemberToSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.registerSimpleMemberToSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n\n                                    dispatch(addMemberToSelectedSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default collectReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { rents } from './constants/commonConstants'\nimport { RentAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { datesWithoutTimeIsSame } from './../utils/convertors/dateUtils'\n\nconst demoRents = rents;\n\nconst RENTS_SET_RENTS = \"RENTS_SET_RENTS\";\nconst RENTS_SET_SELECTED_RENT = \"RENTS_SET_SELECTED_RENT\";\n\n\n\nconst initState = {\n    rents: [],\n    selectedRent: {},\n    selectedDayRents: [],\n}\n\n\nlet rentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case RENTS_SET_RENTS: {\n            return {\n                ...state,\n                rents: [...action.rents],\n            };\n        }\n        case RENTS_SET_SELECTED_RENT: {\n            return {\n                ...state,\n                selectedDayRents: [...state.rents.filter(r => datesWithoutTimeIsSame(new Date(r.From),action.rentDate) && (r.SimplePlaceId == action.simplePlaceId))],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setRents = (rents) => {\n    return {\n        type: RENTS_SET_RENTS,\n        rents\n    }\n}\n\nexport const setSelectedRent = (simplePlaceId, rentDate) => {\n    return {\n        type: RENTS_SET_SELECTED_RENT,\n        simplePlaceId,\n        rentDate\n    }\n}\n\n\n// все аренды с сервера по UmbracoId города\nexport const getAllRentsInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            RentAPI.getAllRentsInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setRents(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setRents(demoRents))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setRents(demoRents))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default rentReducer;","import { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { simplePlaces } from './constants/commonConstants'\nimport { SimplePlaceAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\n\nconst demoPlaces = simplePlaces;\n\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\nconst PLACES_SET_SELECTED_PLACE = \"PLACES_SET_SELECTED_PLACE\";\n\n\n\nconst initState = {\n    places: [],\n    selectedPlace: {},\n}\n\n\nlet simplePlaceReducer = (state = initState, action) => {\n    switch (action.type) {\n        case PLACES_SET_ALL_PLACES: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        case PLACES_SET_SELECTED_PLACE: {\n            return {\n                ...state,\n                selectedPlace: state.places.find(x => x.Id == action.placeId),\n            };\n        }\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setPlaces = (places) => {\n    return {\n        type: PLACES_SET_ALL_PLACES,\n        places\n    }\n}\n\nexport const setSelectedSimplePlace = (placeId) => {\n    return {\n        type: PLACES_SET_SELECTED_PLACE,\n        placeId\n    }\n}\n\n\nexport const setPlace = (placeId, placeData) => {\n    return {\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\n        placeId,\n        placeData\n    }\n}\n\n\n// все места с сервера по UmbracoId города\nexport const getAllSimplePlacesInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            SimplePlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setPlaces(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setPlaces(demoPlaces))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setPlaces(demoPlaces))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default simplePlaceReducer;","import React, { Component } from 'react'\nimport { Button } from '@vkontakte/vkui'\nimport { withNotify } from '../HOCs/withNotify'\n\nconst ButtonWithNotify = (props) => {\n  //debugger\n \n    return (\n        <Button Accept={null} Close={props.Close} Message={props.Message} {...props}></Button>\n        \n    )\n}\n\nexport default withNotify(ButtonWithNotify)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel, setCurrentModalWindow} from '../../../../store/systemReducer'\nimport ModalCommon from '../../../Modals/ModalCommon/ModalCommon'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withNotify = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel, setCurrentModalWindow\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n            this.AcceptAndClose = this.AcceptAndClose.bind(this);\n\n        }\n\n        AcceptAndClose(){\n            this.props.Yes();\n            this.props.setCurrentModalWindow(null);\n        }\n\n        clickEvent(evt){\n            // тут выводим окошко с вопросом (уверен?), если да, то делаем действие, переданное в хэндлере\n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n                \n            this.props.setCurrentModalWindow(<ModalCommon \n                modalName=\"AreYouSure\" \n                //Message={this.props.Message} \n                data={{ message: this.props.Message }}\n                Close={() => this.props.setCurrentModalWindow(null)}\n                Accept={this.AcceptAndClose}\n                ></ModalCommon>);\n            //this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea,\n    File, CellButton, Button, Header, List, Cell, Select, CustomSelectOption, IconButton,\n    CardGrid, Card, SplitLayout, SplitCol, Div, Radio, RangeSlider, useAdaptivity, VKCOM\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from './../../../../../store/dataTypes/common'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n    dateToString, dateTimeToTimeString, datesWithoutTimeIsSame, timeSlotsForSimpleCollects, timeToString,\n    dateSelectorValueToJSDateValue, jSDateValueToDateSelectorValue, timeSlotsForCollects, addToTime\n} from './../../../../../utils/convertors/dateUtils';\nimport {\n    DeleteMemberFromCollect, AddSimpleCollect, setCollectItemMode, EditSimpleCollect,\n    registerMemberToSimpleCollect, DelSimpleCollect, setSelectedMembers\n} from './../../../../../store/collectReducer';\nimport { setSelectedRent } from './../../../../../store/rentReducer';\nimport { setSelectedSimplePlace } from './../../../../../store/simplePlaceReducer';\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport { myProfile } from '../../../../../store/constants/commonConstants';\nimport ButtonWithNotify from '../../../Common/WithNotify/ButtonWithNotify';\n\n\n// включить защиту от создания сбора на прошедшее время! \n\n\nconst SimpleCollectItem = (props) => {\n    let currentDate = new Date();\n    let maxCollectDate = new Date();\n    let workoutSelector = \"\";\n    let totalCost = 0;\n    let ranges = \"\";\n\n    let minutesOneSlot = 30; // количество минут в таймслоте\n    let minTimeSlotToRent = 2; // минимальный таймслот для аренды (в таймслотах, а не в минутах меряем)\n\n    let adapt = useAdaptivity();\n    let workoutColNumber = adapt.viewWidth+1; // количество столбцов. должно отличаться на разных разрешениях экрана\n    //adapt.viewWidth\n\n    let [acceptBeMember, setAcceptBeMember] = useState(false)\n    let [showPanelBeMember, setShowPanelBeMember] = useState(false)\n    let [showCancelMemberForm, setShowCancelMemberForm] = useState(false)\n    let [cancelReason, setCancelReason] = useState(\"\")\n    let [details, setDetails] = useState(\"\")\n    let [collectType, setCollectType] = useState(3)\n    let [needMembers, setNeedMembers] = useState(10)\n    let [selectedDate, setSelectedDate] = useState(jSDateValueToDateSelectorValue(currentDate))\n    let [costMembers, setCostMembers] = useState(200)\n    let [costAll, setCostAll] = useState(2000)\n    let [plus, setPlus] = useState(costAll - (costMembers * needMembers))\n    let [selectedSlots, setSelectedSlots] = useState(new Array()) //  тут отдельные выбранные ячейки\n    let selectedTimeRanges = new Array() // тут сгруппированные выбранные ячейки отдельными диапазонами\n\n\n    useEffect(() => {\n        if (props.collect.selected && props.collect.selected.Members && props.collect.selected.Members != undefined && props.collect.selected.Members.length > 0) {\n\n            let vkids = \"\";\n            let memberPhotos = props.collect.selected.Members.map(m => {\n                vkids += m.UserProfile.UserVkId.slice(2) + \",\"\n                return { id: m.UserProfile.UserVkId.slice(2), photo: \"\" }\n            });\n\n            //\n            const params = bridge.send(\"VKWebAppGetAuthToken\", { \"app_id\": 7161115, \"scope\": \"\" }).then(res => {\n                bridge.send(\"VKWebAppCallAPIMethod\",\n                    {\n                        \"method\": \"users.get\",\n                        \"request_id\": \"userphotorequest\",\n                        \"params\": {\n                            \"user_ids\": vkids,\n                            \"fields\": \"photo_100\",\n                            \"v\": \"5.131\",\n                            \"access_token\": res.access_token\n                        }\n                    })\n                    .then(us => {\n\n\n\n                        let members = props.collect.selected.Members.map(m => {\n                            let photo = us.response.filter(p => ((\"id\" + p.id) == m.UserProfile.UserVkId));\n                            if (photo && photo[0] != undefined) {\n                                m.UserProfile.PhotoPath = photo[0].photo_100;\n                            }\n                            return m;\n\n                        })\n\n                        props.setSelectedMembers(members);\n                        //m.UserProfile.PhotoPath = us.photo_100;\n                        //props.setSelectedUser(us);\n                    })\n\n                    // bridge.send(\"VKWebAppOpenPayForm\", {\n                    //     \"app_id\": 7161115, \n                    //     \"action\": \"pay-to-service\", \n                    //     \"params\": {\n                    //         \"amount\": 1.5,\n                    //         \"data\": {\n                    //                 \"currency\": \"RUB\",\n                    //                 \"merchant_data\": \"eyJvcmRlcl9pZCI6IjI1NTMxIiwidHMiOiIxNTM5MzI5NzcwIiwiYW1vdW50IjoxLjUsImN1cnJlbmN5IjoiUlVCIn0=\",\n                    //                 \"merchant_sign\": \"63d5dce9d2c9d29198ba12ba3f8e270e6606a221\",\n                    //                 \"order_id\": \"25531\",\n                    //                 \"ts\": \"1539329770\"\n                    //                 },\n                    //         \"description\": \"Test Payment\",\n                    //         \"action\": \"pay-to-service\",\n                    //         \"merchant_id\": 617001,\n                    //                 \"version\": 2,\n                    //         \"sign\": res.access_token\n                    //     }\n                    // });\n            })\n\n            \n        }\n\n    }, props.collect.selected.Id)\n\n    //debugger\n    let youAreMember = (props.collect.selected.Members && props.collect.selected.Members.length > 0)\n        ?\n        (props.collect.selected.Members.filter(m => m.UserProfileId == props.myProfile.UserProfileId).length > 0 ? true : false)\n        :\n        false;\n    let youAreOrganizer = (props.collect.selected && props.collect.selected != undefined && props.myProfile && props.myProfile != undefined) ?\n        props.collect.selected.CreatorId == props.myProfile.UserProfileId :\n        false;\n\n    //let [youAreMember, setYouAreMember] = useState(yam);\n\n    let simplePlaces = props.simplePlace.places;\n\n    let changePlace = (e) => {\n        props.setSelectedSimplePlace(+e.currentTarget.value);\n        props.setSelectedRent(+e.currentTarget.value, dateSelectorValueToJSDateValue(selectedDate));\n        setSelectedSlots([])\n    }\n\n    let changeDate = (value) => {\n        setSelectedDate(value);\n        setSelectedSlots([])\n\n    }\n\n    let changeCollectType = (type) => {\n        setCollectType(type)\n    }\n\n    let selectSlot = (value) => {\n        // взять минимальное количество слотов и сделать проверку на послеющие ячейки\n        // и это же самое нужно сделать на сервере! чтобы исключить двойную аренду\n        // проверить следующий слот (не конец смены, следующий не арендован, не перерыв)\n        let tmpSelectedSlot = [];\n\n        // выявили выбранное время\n        let res = selectedSlots.filter(ss => (ss.Hours == value.Hours && ss.Minutes == value.Minutes));\n        if (res.length != 0)\n            tmpSelectedSlot = selectedSlots.filter(ss => (ss.Hours != value.Hours || ss.Minutes != value.Minutes));\n        else\n            tmpSelectedSlot = [...selectedSlots, value];\n\n        // сортировка\n        tmpSelectedSlot.sort((a, b) => {\n            let i1 = a.Hours * (60 / minutesOneSlot * minutesOneSlot) + a.Minutes;\n            let i2 = b.Hours * (60 / minutesOneSlot * minutesOneSlot) + b.Minutes;\n\n            return (i1 - i2)\n        })\n\n\n\n        setSelectedSlots(tmpSelectedSlot);\n    }\n\n    let gotoCollect = (value) => {\n\n\n    }\n\n    let gotoProfile = (profileId) => {\n        window.open(\"https://vk.com/\" + profileId, '_blank');\n    }\n\n\n    const CancelMember = () => {\n        let member = {\n            UserProfileId: props.myProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const deleteMember = (memberUserProfile) => {\n        \n        let member = {\n            UserProfileId: memberUserProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"Удален организатором\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const AcceptRights = () => {\n        setAcceptBeMember(!acceptBeMember);\n    }\n\n    const calculateCostAll = (costall) => {\n        setCostAll(costall);\n        let costMem = Math.round(costall / needMembers);\n        setCostMembers(costMem);\n\n        setPlus((costMem * needMembers) - costall);\n    }\n\n    const calculateNeedMembers = (need) => {\n\n        \n            setNeedMembers(need);\n            setCostMembers(Math.round(costAll / need));\n            setPlus((Math.round(costAll / need) * need) - costAll);\n        \n    }\n\n    const calculateCostMembers = (membercost) => {\n        setCostMembers(membercost);\n        setPlus((membercost * needMembers) - costAll);\n    }\n\n    const registerToCollect = () => {\n\n        props.registerMemberToSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const createCollect = () => {\n\n        let collect = {\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: new Date(\n                selectedDate.year,\n                selectedDate.month - 1,\n                selectedDate.day,\n                selectedTimeRanges[0].Hours + 3, // прибавил 3 часа (разница от UTC)\n                selectedTimeRanges[0].Minutes),\n            DurationMinutes: selectedTimeRanges[0].SlotMinutes,\n            Details: details,\n            FullPrice: costAll,\n            Comment: \"\",\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.selectedPlace.Id,\n            CreatorId: props.myProfile.UserProfileId,\n        }\n        props.AddSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const saveChanges = () => {\n\n        let collect = {\n            Id: props.collect.selected.Id,\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: props.collect.selected.When,\n            DurationMinutes: props.collect.selected.DurationMinutes,\n            Details: details,\n            FullPrice: props.collect.selected.FullPrice,\n            Comment: props.collect.selected.Comment,\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.collect.selected.SimplePlaceId,\n            CreatorId: props.collect.selected.CreatorId,\n        }\n        props.EditSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const cancelCollect = () => {\n        props.DelSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const changeCollect = () => {\n\n        setDetails(props.collect.selected.Details);\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"edit\");\n    }\n\n    const cancelSave = () => {\n\n        setDetails(props.collect.selected.Details ? props.collect.selected.Details : \"\");\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"view\");\n    }\n\n    // строим контрол выбора времени\n    // если место и время выборано\n    if ((props.selectedPlace) && (props.selectedPlace.Worktime != null) && (props.selectedPlace.Worktime != undefined)) {\n        //debugger\n        // собираем все слоты из расписания, которые совпадают с выбранной датой\n        let worktimeSlots = props.selectedPlace.Worktime.filter(wt => {\n            //selectedDate, wt, rents\n            let selectedDT = new Date(dateSelectorValueToJSDateValue(selectedDate)) // selected in box\n            let from = new Date(wt.FromTime) // current item date and start time\n            let to = new Date(wt.ToTime) // current item date and end time\n            if (datesWithoutTimeIsSame(from, selectedDT))\n                return true;\n            else\n                return false;\n        }).sort((a, b) => new Date(a.FromTime).valueOf() - new Date(b.FromTime).valueOf())\n\n        // если выборка дала данные (слоты)\n        if (worktimeSlots && worktimeSlots != undefined && worktimeSlots.length > 0 && worktimeSlots[0] != undefined) {\n            // если верменной слот найден, производим с ним модификации по формированию и покраске кнопок, а также назначения им действий\n\n            let fromTmp = new Date(worktimeSlots[0].FromTime); // берем время ОТ первого слота\n            let toTmp = new Date(worktimeSlots[worktimeSlots.length - 1].ToTime);  // берем время ДО последнего слота\n            let slotsNumber = (toTmp.valueOf() - fromTmp.valueOf()) / (minutesOneSlot * 60 * 1000); // общее количество слотов\n            let numberOfCols = slotsNumber < workoutColNumber ? slotsNumber : workoutColNumber; // количество колонок\n            let numberOfRows = Math.trunc(slotsNumber / numberOfCols) == slotsNumber / numberOfCols ? slotsNumber / numberOfCols : Math.trunc(slotsNumber / numberOfCols) + 1; // количество строк\n\n            let slots = timeSlotsForSimpleCollects(slotsNumber, 60 / minutesOneSlot, fromTmp.getHours()); // получили общее время работы с разбивкой по диапазонам (обычно по 30 минут на каждую ячейку)\n\n            // бежим по массиву слотов расписаний\n            slots = slots.map((slot, slotCurrentIndex) => {\n\n                \n                worktimeSlots.forEach(worktimeSlot => {\n                    \n                    let curentWorktimeSlotFromTime = new Date(worktimeSlot.FromTime);\n                    let curentWorktimeSlotToTime = new Date(worktimeSlot.ToTime);\n                    let currentSlotTime = new Date(\n                        curentWorktimeSlotFromTime.getFullYear(), \n                        curentWorktimeSlotFromTime.getMonth(), \n                        curentWorktimeSlotFromTime.getDate(), \n                        slot.Hours, slot.Minutes);\n\n\n                    if ((worktimeSlot != null) \n                        && (worktimeSlot != undefined) \n                        && (curentWorktimeSlotFromTime <= currentSlotTime && curentWorktimeSlotToTime > currentSlotTime)\n                        ) {\n                        // расставляем перерывы. \n                        // пробегаем по массиву перерывов, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как недоступный\n                        if (worktimeSlot.Breaks && worktimeSlot.Breaks.length > 0) {\n                            worktimeSlot.Breaks.forEach(brek => {\n\n                                let from = new Date(brek.FromTime);\n                                let to = new Date(brek.ToTime);\n\n                                let brekTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= brekTime && (to > brekTime)) {\n                                    slot.Enabled = false;\n                                }\n                            });\n                        }\n\n                        // расставляем аренды\n                        // пробегаем по массиву арендованного времени, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как занятый\n                        props.rent.selectedDayRents.forEach(rnt => {\n\n                            let from = new Date(rnt.From);\n                            let to = addToTime(from, 0, rnt.DurationMinutes);\n\n                            let rentTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n                            \n\n                            if (from <= rentTime && (to > rentTime)) {\n\n                                if (rnt.Published)\n                                    slot.Rented = true;\n                            }\n                        });\n\n                        // расставляем выбранные слоты\n                        if (selectedSlots && Array.isArray(selectedSlots) && selectedSlots.length > 0) {\n\n                            selectedSlots.forEach(slt => {\n\n                                let from = new Date(`01/01/2000 ${slt.Hours}:${slt.Minutes}`);\n                                let to = addToTime(from, 0, minutesOneSlot);\n\n                                let selectedTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= selectedTime && (to > selectedTime)) {\n\n                                    slt.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.Selected = true;\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n                    }\n                });\n\n                return slot;\n            }\n            )\n\n\n            // маркируем доступное и недоступное время и создаем результирующий массив кнопок\n            let iButtons = slots.map(x => {\n                if (x.Enabled) {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button onClick={() => gotoCollect(x)} mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        if (x.Selected) {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"primary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                        else {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"commerce\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                    }\n\n                }\n                else {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        return <Div>\n                            <Button mode=\"secondary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                }\n            })\n\n            //selectedTimeRanges = new Array()\n            // вычисляем выбранные временные промежутки и выводим их в список\n            for (let i = 0; i < selectedSlots.length; i++) {\n                if (selectedSlots[i - 1] != null && selectedSlots[i - 1] != undefined) {\n\n                    let i1 = selectedSlots[i].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i].Minutes;\n                    let i2 = selectedSlots[i - 1].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i - 1].Minutes;\n\n                    if ((i1 - i2) <= minutesOneSlot) {\n                        selectedTimeRanges[selectedTimeRanges.length - 1].SlotMinutes += selectedSlots[i].SlotMinutes;\n                        selectedTimeRanges[selectedTimeRanges.length - 1].PricePerSlot += selectedSlots[i].PricePerSlot;\n                    }\n                    else {\n                        selectedTimeRanges.push(\n                            {\n                                Hours: selectedSlots[i].Hours,\n                                Minutes: selectedSlots[i].Minutes,\n                                SlotMinutes: selectedSlots[i].SlotMinutes,\n                                Enabled: selectedSlots[i].Enabled,\n                                Selected: selectedSlots[i].Selected,\n                                Rented: selectedSlots[i].Rented,\n                                PricePerSlot: selectedSlots[i].PricePerSlot,\n                            }\n                        )\n                    }\n                }\n                else {\n\n                    selectedTimeRanges.push(\n                        {\n                            Hours: selectedSlots[i].Hours,\n                            Minutes: selectedSlots[i].Minutes,\n                            SlotMinutes: selectedSlots[i].SlotMinutes,\n                            Enabled: selectedSlots[i].Enabled,\n                            Selected: selectedSlots[i].Selected,\n                            Rented: selectedSlots[i].Rented,\n                            PricePerSlot: selectedSlots[i].PricePerSlot,\n                        }\n                    )\n                }\n\n            }\n\n\n            // если изменилась цена, перезапишем ее в состоянии\n            totalCost = selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0);\n            if (totalCost != costAll)\n                calculateCostAll(selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0))\n\n            let splitCols = []\n\n            // разбиваем кнопки по колонкам для наиболее удобного отображения \n            for (let i = 0; i < numberOfCols; i++)//4\n            {\n                let sCol = []\n                for (let j = 0; j < numberOfRows; j++)//5\n                {\n                    sCol.push(iButtons[i * numberOfRows + j])\n                }\n                splitCols.push(<SplitCol width=\"25%\">{sCol}</SplitCol>)\n            }\n\n            ranges = (selectedTimeRanges && selectedTimeRanges.length > 0) ? selectedTimeRanges.map(tr => {\n                let until = addToTime(new Date(`01/01/2000 ${tr.Hours}:${tr.Minutes}`), 0, tr.SlotMinutes);\n                return <InfoRow>с {timeToString(tr.Hours, tr.Minutes)} до {timeToString(until.getHours(), until.getMinutes())}  ({tr.PricePerSlot} руб.) </InfoRow>\n\n\n            }) :\n                \"Время не выбрано\"\n\n\n            // записываем полученную иерархию контролов в единый селектор\n            workoutSelector =\n                <SplitLayout>\n                    {splitCols}\n                </SplitLayout>\n\n        }\n\n\n    }\n    else\n        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n\n\n\n\n\n\n    switch (props.collect.mode) {\n        case \"view\": {\n            if (props.collect.selected.Deleted != undefined && props.collect.selected.Deleted == true) {\n                return (\n                    <>\n                        <FormItem>\n                            <InfoRow><strong>Этот сбор был отменен</strong></InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Дата и время\">\n                            <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Место\">\n                            <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                        </FormItem>\n                        <FormItem top=\"Информация\" disabled>\n                            <InfoRow>{props.collect.selected.Details}</InfoRow>\n                        </FormItem>\n                    </>\n                )\n            }\n            else {\n                return (\n                    <>\n                        {props.collect.selected && props.collect.selected != undefined ?\n                            <>\n\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Дата и время\">\n                                    <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                        {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Место\">\n                                    <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                        {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                                </FormItem>\n                                <FormItem top=\"Информация\">\n                                    <InfoRow>{props.collect.selected.Details}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Сколько человек нужно\">\n                                    <InfoRow>{props.collect.selected.NeedMembers}\n                                        {(props.collect.selected.Members && props.collect.selected.Members.length > 0) &&\n                                            ` (нужно еще ${props.collect.selected.NeedMembers - props.collect.selected.Members.length} чел.)`\n                                        }\n                                    </InfoRow>\n\n                                </FormItem>\n                                <FormItem top=\"Стоимость на 1 человека\">\n                                    <InfoRow>{props.collect.selected.Cost}</InfoRow>\n                                </FormItem>\n                                <Group header={<Header mode=\"secondary\">Участники</Header>}>\n                                    {(props.collect.selected.Members && props.collect.selected.Members.length > 0) ?\n                                        <FormItem>\n                                            <List>\n                                                {props.collect.selected.Members.map((item) => {\n\n                                                    return <RichCell\n                                                    text={`${item.UserProfile.Name} ${item.UserProfile.Surname} ${item.UserProfileId == props.collect.selected.Creator.UserProfileId ? \" (Организатор)\" : \"\"}`}\n                                                        before={item.UserProfile.PhotoPath && item.UserProfile.PhotoPath != undefined ?\n                                                            <Avatar size={72} src={item.UserProfile.PhotoPath} />\n                                                            :\n                                                            null\n                                                        }\n                                                        actions={\n                                                        props.myProfile.UserProfileId == props.collect.selected.Creator.UserProfileId ? \n                                                            <Group>\n                                                                {item.UserProfile.UserProfileId != props.collect.selected.Creator.UserProfileId && \n                                                                    <ButtonWithNotify mode=\"destructive\" Message={`Уверены, что хотите исключить ${item.UserProfile.Name} ${item.UserProfile.Surname}?`} Yes={() => deleteMember(item.UserProfile)}>Исключить</ButtonWithNotify>}\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </Group>\n                                                            :\n                                                            <>\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </>\n\n                                                    }\n                                                    >\n                                                    </RichCell>\n                                                }\n\n                                                )\n\n                                                }\n                                            </List>\n                                        </FormItem>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Пока нет участников. Стань первым.</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                {\n                                    (!youAreMember) ?\n                                        (\n                                            (new Date(props.collect.selected.When) > new Date()) ?\n                                                (\n                                                    (props.collect.selected.Members.length < props.collect.selected.NeedMembers) ?\n                                                    ((!showPanelBeMember) ?\n                                                        <FormItem top=\"Участие\">\n                                                            <CellButton onClick={() => setShowPanelBeMember(!showPanelBeMember)}>Стать участником</CellButton>\n                                                        </FormItem>\n                                                        :\n                                                        <FormItem top=\"Стать участником\">\n                                                            {(acceptBeMember) &&\n                                                                <CellButton onClick={registerToCollect}>Зарегистрироваться на сбор</CellButton>\n                                                            }\n                                                            <Checkbox checked={acceptBeMember} onChange={AcceptRights}>\n                                                                {`Подтверждаю, что готов прибыть на сбор в ${props.collect.selected.Place.Name} в \n                                    ${dateToString(props.collect.selected.When)} к ${dateTimeToTimeString(props.collect.selected.When)}\n                                    и оплатить взнос в размере ${props.collect.selected.Cost} рублей`}\n                                                            </Checkbox>\n                                                        </FormItem>)\n                                                        :\n                                                        <FormItem top=\"Участие\">\n                                                            <InfoRow>Регистрация закончена. Народ набран.</InfoRow>\n                                                        </FormItem>\n                                                )\n                                                :\n                                                <FormItem top=\"Участие\">\n                                                    <InfoRow>Регистрация закончена</InfoRow>\n                                                </FormItem>\n                                        )\n                                        :\n                                        <FormItem top=\"Участие\">\n                                            {(new Date(props.collect.selected.When) > new Date()) ?\n                                                <>\n                                                    <InfoRow>{(!youAreOrganizer) ? `Вы подтвердили участие в сборе` : `Вы организатор сбора`}</InfoRow>\n                                                    {(!showCancelMemberForm) ?\n                                                        ((!youAreOrganizer) ?\n                                                            <RichCell actions={<ButtonWithNotify mode=\"destructive\" Message=\"Отказаться от участия?\" Yes={() => setShowCancelMemberForm(true)}>Отказаться от участия</ButtonWithNotify>}></RichCell> :\n                                                            <RichCell actions={\n                                                                <>\n                                                                    <Button mode=\"primary\"\n                                                                        onClick={changeCollect}\n                                                                    >Изменить сбор</Button>\n                                                                    <ButtonWithNotify mode=\"destructive\"\n                                                                        Message=\"Желаете отменить сбор?\"\n                                                                        Yes={cancelCollect}\n                                                                    >Отменить сбор</ButtonWithNotify>\n                                                                </>\n                                                            }></RichCell>\n\n                                                        )\n                                                        :\n                                                        <Group>\n                                                            <FormItem>\n                                                                <b>Вы хотите отказаться от участия? Укажите причину отказа</b>\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Input type=\"text\" value={cancelReason} onChange={(e) => setCancelReason(e.currentTarget.value)} defaultValue=\"\" />\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Button onClick={() => setShowCancelMemberForm(false)}>Не отказываться</Button>\n                                                                {cancelReason.length > 4 && <Button onClick={CancelMember} mode=\"destructive\">Отказаться</Button>}\n                                                            </FormItem>\n                                                        </Group>\n                                                    }\n                                                </>\n                                                :\n                                                <InfoRow>Вы участвовали в сборе</InfoRow>\n                                            }\n                                        </FormItem>\n                                }\n\n                            </>\n                            :\n                            <></>\n                        }\n                    </>\n                )\n            }\n        }; break;\n        case \"add\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <Select\n                            placeholder=\"Не выбрано\"\n                            value={(props.selectedPlace && props.selectedPlace.Id) ? props.selectedPlace.Id : null}\n                            onChange={e => changePlace(e)}\n                            options={simplePlaces.map(place => ({\n                                label: place.Name, value: place.Id\n                                // , avatar: user.photo_100 \n                            }))}\n                            renderOption={({ option, ...restProps }) => (\n                                <CustomSelectOption {...restProps}\n                                //   before={<Avatar size={24} src={option.avatar} />} \n                                />\n                            )}\n                        />\n                        {/* <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell> */}\n                    </FormItem>\n                    <FormItem top=\"Дата\">\n                        <DatePicker\n                            min={jSDateValueToDateSelectorValue(currentDate)}\n                            max={{ day: currentDate.getDate(), month: currentDate.getMonth() + 2, year: currentDate.getFullYear() }}\n                            defaultValue={selectedDate}\n                            onDateChange={(value) => { changeDate(value) }}\n                        />\n                        {/* <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow> */}\n                    </FormItem>\n                    <FormItem>\n                        {workoutSelector}\n\n                    </FormItem>\n                    <FormItem top=\"Выранное время\">\n                        {ranges}\n                    </FormItem>\n                    {selectedTimeRanges && selectedTimeRanges.length > 0 ?\n                        <Group>\n\n\n                            <FormItem>\n                                <InfoRow>\n                                    <br />\n                                    Вы можете сначала собрать людей и после оплатить. <br />\n                                    Либо вы можете сначала оплатить, а потом собирать людей. <br />\n                                    Аренда площадки гарантируется только после её оплаты.\n                                </InfoRow>\n                            </FormItem>\n\n                            <FormItem>\n                                <Group>\n                                    {\n                                        (selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                            <InfoRow style={{ \"color\": \"red\" }}>Вы отметили {selectedTimeRanges.length} диапазона(ов) времени: <br />\n                                                {ranges}\n                                                В таком режиме вы можете только арендовать всё выбранное время.\n                                                Чтобы создать сбор, необходимо выбрать только один диапазон подряд идущего времени, например,\n                                                18:00, 18:30 и 19:00 (с 18:00 до 19:30 - 1.5 часа)</InfoRow>\n                                            : <></>\n                                    }\n                                    {(selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Оплатить потом создать</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Создать потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n                                        :\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description=\"После оплаты аренда закреплена за вами\">Оплатить потом создать сбор</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description=\"Закрепление аренды будет только после оплаты\">Создать сбор потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n\n                                    }\n\n                                </Group>\n                            </FormItem>\n                            {collectType != 3 &&\n                                <>\n                                    <FormItem top=\"Информация по сбору\">\n                                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)}\n                                            placeholder=\"Укажите здесь важную информацию для участников сбора\" />\n                                    </FormItem>\n                                    <FormItem top=\"Сколько человек нужно\">\n                                        <Input type=\"Number\"\n                                            defaultValue={needMembers}\n                                            value={needMembers}\n                                            placeholder=\"10\"\n                                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                                        ></Input>\n\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                                        <InfoRow>{costAll}</InfoRow>\n                                        {/* <Input type=\"Number\"\n                                    defaultValue={costAll}\n                                    value={costAll}\n                                    placeholder=\"2000\"\n                                    onChange={e => calculateCostAll(e.currentTarget.value)}\n                                ></Input> */}\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                                        <Input type=\"Number\"\n                                            defaultValue={costMembers}\n                                            value={costMembers}\n                                            placeholder=\"200\"\n                                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                                        ></Input>\n                                    </FormItem>\n                                    <FormItem top=\"Остаток после оплаты\">\n                                        <InfoRow>{plus} руб</InfoRow>\n                                    </FormItem>\n                                </>\n                            }\n                            <FormItem top=\"Публикация\">\n                                {selectedTimeRanges && selectedTimeRanges.length > 0 ? (\n                                    collectType == 1 ? <RichCell\n                                        caption=\"Оплатить и создать сбор\"\n                                        actions={<Button>Оплатить и создать сбор</Button>}\n                                    >\n                                    </RichCell> :\n                                        (collectType == 2 ?\n                                            <RichCell\n                                                caption=\"Создать сбор и оплатить\"\n                                                actions={<Button onClick={createCollect}>Создать сбор</Button>}\n                                            >\n                                            </RichCell> :\n                                            <RichCell\n                                                caption=\"Оплатить выбранное время без создания сбора\"\n                                                actions={<Button>Оплатить</Button>}\n                                            >\n                                            </RichCell>)\n                                ) :\n                                    <RichCell\n                                        caption=\"Выберите место, дату и время занятий\">\n                                    </RichCell>}\n                            </FormItem>\n                        </Group>\n                        :\n                        <></>\n                    }\n                </>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата и время\">\n                        <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell>\n                    </FormItem>\n\n\n                    <FormItem top=\"Информация по сбору\">\n                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)} placeholder=\"Сделать чтобы можно было покупать аренду без сбора. сбор опционально делается\" />\n                    </FormItem>\n                    <FormItem top=\"Сколько человек нужно\"\n                    bottom={\n                        props.collect.mode == \"edit\" \n                    && props.collect.selected.Members \n                    && props.collect.selected.Members != undefined \n                    && props.collect.selected.Members.length > 0 \n                    && (needMembers < props.collect.selected.Members.length) ?\n                    <CellButton mode=\"danger\">Нельзя указывать меньше, чем зарегистрированных участников</CellButton>\n                    : \"\"\n                    }\n                    >\n                        <Input type=\"Number\"\n                            defaultValue={needMembers}\n                            value={needMembers}\n                            placeholder=\"10\"\n                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                        ></Input>\n\n                    </FormItem>\n                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                        <InfoRow>{costAll}</InfoRow>\n                        {/* <Input type=\"Number\"\n                                defaultValue={costAll}\n                                value={costAll}\n                                placeholder=\"2000\"\n                                onChange={e => calculateCostAll(e.currentTarget.value)}\n                            ></Input> */}\n                    </FormItem>\n                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                        <Input type=\"Number\"\n                            defaultValue={costMembers}\n                            value={costMembers}\n                            placeholder=\"200\"\n                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                        ></Input>\n                    </FormItem>\n                    <FormItem top=\"Остаток после оплаты\">\n                        <InfoRow>{plus} руб</InfoRow>\n                    </FormItem>\n\n                    <FormItem top=\"Сохранение\">\n                        <RichCell\n                            actions={\n                                <Group>\n                                    <Button\n                                        onClick={cancelSave}\n                                    >Отменить изменения</Button>\n                                    {\n                                        props.collect.mode == \"edit\" \n                                        && props.collect.selected.Members \n                                        && props.collect.selected.Members != undefined \n                                        && props.collect.selected.Members.length > 0 \n                                        && (needMembers >= props.collect.selected.Members.length) ?\n                                        <Button\n                                        Message = \"Сохранить внесенные изменения?\"\n                                        Yes={saveChanges}\n                                    >Сохранить изменения</Button>\n                                        :\n                                        <Button disabled>Исправьте ошибки...</Button>\n                                }\n                                </Group>\n                            }\n                        >\n                        </RichCell>\n                    </FormItem>\n\n\n                </>\n            )\n        }; break;\n        default: {\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        }; break;\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        collect: state.collectEntity,\n        simplePlace: state.simplePlaceEntity,\n        selectedPlace: state.simplePlaceEntity.selectedPlace,\n        selectedRent: state.rentEntity.selectedRent,\n        rent: state.rentEntity,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    DeleteMemberFromCollect, setSelectedSimplePlace, setSelectedRent, AddSimpleCollect, registerMemberToSimpleCollect,\n    DelSimpleCollect, setCollectItemMode, EditSimpleCollect, setSelectedMembers,\n})(SimpleCollectItem)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withHistorySave = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n\n        }\n\n        clickEvent(evt){\n            \n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { Component } from 'react'\nimport { RichCell } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst RichCellWithHistory = (props) => {\n  \n \n    return (\n        <RichCell isBack={false} {...props}></RichCell>\n        \n    )\n}\n\nexport default withHistorySave(RichCellWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\nimport { Icon24ChevronRight } from '@vkontakte/icons';\n\nconst Icon24ChevronRightWithHistory = (props) => {\n  \n \n    return (\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\n        \n    )\n}\n\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\nconst TeamAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBorn);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {/* {!item.Published ? \n                                        <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\n                                        : \n                                        <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\n                                        <ButtonWithNotify Yes={() => props.Button2Handle(item)} Message=\"Удалить команду?\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    // caption={date && `Основана: ${dateToString(date)}`}\n                                    after={\n                                        <Icon24ChevronRightWithHistory\n                                            handleClick={() => props.CellClick(item)} \n                                            toMenuName=\"teamitem\" \n                                            data-story=\"teamitem\"\n                                        >\n\n                                        </Icon24ChevronRightWithHistory>\n                                    }\n                                    // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : \n                    <FormItem><InfoRow>Нет команд</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, BidTeamAPI, TournamentAPI } from './../utils/api/api.js'\nimport { cityTournamentAdmins } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTournamentAdmins = cityTournamentAdmins;\n\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\nconst TOURNAMENT_MY_ADD_OR_EDIT = \"TOURNAMENT_MY_ADD_OR_EDIT\";\nconst TOURNAMENT_SET_TOURNAMENTGROUPS = \"TOURNAMENT_SET_TOURNAMENTGROUPS\";\nconst TOURNAMENT_SET_TOURNAMENTTEAMS = \"TOURNAMENT_SET_TOURNAMENTTEAMS\";\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\nconst TOURNAMENT_MATCH_LENGTH = \"TOURNAMENT_MATCH_LENGTH\";\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES = \"TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES\";\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    tournaments: [], // все турниры\n    bidsNew: [], // новые заявки на турниры\n    selectedForView: {}, // выбранный турнир для просмотра в пользовательском режиме (а надо ли?)\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\n    selectedTables: [],  // турнирные таблицы выбранного турнира для просмотра пользователями\n    myTournaments: [], // те, что я создал\n    cityTournamentAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet tournamentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\n            return {\n                ...state,\n                myTournaments: [...action.myTournaments],\n            };\n        }\n        case TOURNAMENT_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TOURNAMENT_SET_MYTOURNAMENT: {\n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.map(tour => {\n                    \n                    if (tour.Id == action.mytournament.Id) {{\n                        tour = {...action.mytournament};\n                    }}\n                    return tour;\n                })],\n            };\n        }\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\n            \n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES: {\n            \n            return {\n                ...state,\n                selectedTables: [...action.tables],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\n            let index = -1;\n            let max = -1;\n            \n            \n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {...action.tournament,\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\n                        return {...item, KeyId: ++max}\n                    })]\n                },\n            };\n        }\n        case TOURNAMENT_RESET_TOURNAMENT: {\n            return {\n                ...state,\n                selected: {...emptyTournament},\n            };\n        }\n        case TOURNAMENT_MY_ADD_OR_EDIT: {\n            let newTourn = state.myTournaments.filter(t => t.Id == action.tournament.Id)\n            if (newTourn){\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments.map(t => {\n                            if (t.Id == action.tournament.Id){\n                                t = {...t.tournament}\n                            }\n                            return t;\n                        })\n                    ],\n                };\n            }\n            else{\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments, action.tournament\n                    ],\n                };\n            }\n        }\n        case TOURNAMENT_MATCH_LENGTH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                MatchLength: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\n            return {\n                ...state,\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\n            };\n        }\n        case TOURNAMENT_SET_NEW_BIDS: {\n            return {\n                ...state,\n                bidsNew: [...action.bids],\n            };\n        }\n        case TOURNAMENT_DEL_BID: {\n            return {\n                ...state,\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case TOURNAMENT_SET_WHEN_BEGIN: {\n\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenBegin: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_WHEN_END: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenEnd: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Reglament: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Details: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_PUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: true,\n                },\n            };\n        }\n        case TOURNAMENT_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: false,\n                },\n            };\n        }\n        case TOURNAMENT_ADD_GROUP: {\n            let max = -1;\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n            // if (action.group.Id < 0)\n            //     return {\n            //         ...state,\n            //         selected: {...state.selected, \n            //             TournamentGroups: [...state.selected.TournamentGroups, \n            //                 {\n            //                     KeyId: max + 1,    \n            //                     Name: action.group.Name\n            //                 }],\n            //         },\n            //     };\n            // else\n                return {\n                    ...state,\n                    selected: {...state.selected, \n                        TournamentGroups: [...state.selected.TournamentGroups, \n                            {\n                                ...action.group,\n                                KeyId: max + 1,    \n                                Id: action.group.Id,\n                                Name: action.group.Name\n                            }],\n                    },\n                };\n\n        }\n        case TOURNAMENT_SET_GROUP: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\n                        if (item.Id == action.groupId)\n                        {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTGROUPS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTTEAMS: {\n\n            let newTGroups = [];\n            \n\n            // clear tournament groups\n            state.selected.TournamentGroups.forEach(tg => {\n                tg.Teams = [];\n            })\n\n            // заполнение групп\n            action.bidsWithTeamsAndGroups.forEach(bid => {\n                \n                newTGroups = state.selected.TournamentGroups.map(tg => {\n                    \n                    if (tg.Id == bid.TournamentGroupId)\n                    {\n                        bid.Team.Name = bid.TeamName;\n                        tg.Teams = [...tg.Teams, bid.Team];\n                    }\n                    return tg;\n                })\n            });\n            \n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...newTGroups],\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\n            debugger\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setTournamentTables = (tables) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES,\n        tables\n    }\n}\n\nexport const setMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_SET_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const addOrEditTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_MY_ADD_OR_EDIT,\n        tournament\n    }\n}\n\nexport const setSelectedTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\n        tournament\n    }\n}\n\nexport const deleteMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const setMyTournaments = (myTournaments) => {\n    return {\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\n        myTournaments\n    }\n}\n\nexport const tournamentPublish = () => {\n    return {\n        type: TOURNAMENT_PUBLISH,\n    }\n}\n\nexport const tournamentUnpublish = () => {\n    return {\n        type: TOURNAMENT_UNPUBLISH,\n    }\n}\n\nexport const resetTournament = () => {\n    return {\n        type: TOURNAMENT_RESET_TOURNAMENT\n    }\n}\n\nexport const setTournamentWhenBegin = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_BEGIN,\n        when\n    }\n}\n\nexport const setTournamentWhenEnd = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_END,\n        when\n    }\n}\n\nexport const setTournamentMode = (mode) => {\n    return {\n        type: TOURNAMENT_SET_MODE,\n        mode\n    }\n}\n\nexport const setTournamentName = (value) => {\n    return {\n        type: TOURNAMENT_SET_NAME,\n        value\n    }\n}\n\nexport const setTournamentMatchLength = (value) => {\n    return {\n        type: TOURNAMENT_MATCH_LENGTH,\n        value\n    }\n}\n\nexport const setTournamentDetails = (value) => {\n    return {\n        type: TOURNAMENT_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTournamentReglament = (value) => {\n    return {\n        type: TOURNAMENT_SET_REGLAMENT,\n        value\n    }\n}\n\nexport const setTournamentNewBids = (bids) => {\n    return {\n        type: TOURNAMENT_SET_NEW_BIDS,\n        bids\n    }\n}\n\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\n    return {\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\n        cityTournamentAdmins\n    }\n}\n\nexport const setSelectedTournamentGroups = (groups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTGROUPS,\n        groups\n    }\n}\n\nexport const setTournamentTeams = (bidsWithTeamsAndGroups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTTEAMS,\n        bidsWithTeamsAndGroups\n    }\n}\n\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\n    debugger\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const addGroupToTournament = (group) => {\n    return {\n        type: TOURNAMENT_ADD_GROUP,\n        group\n    }\n}\n\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\n    return {\n        type: TOURNAMENT_SET_GROUP,\n        tournamentId,\n        groupId,\n        groupName\n    }\n}\n\nexport const deleteTournamentBid = (bid) => {\n    return {\n        type: TOURNAMENT_DEL_BID,\n        bid\n    }\n}\n\n// перемещение заявки от команды в другую группу по команде\nexport const replaceTeam = (team, tOldGoup, tNewGroup) => {\n    \n} \n\n// отмена заявки от команды (удаление из турнира) по команде\nexport const deleteTeam = (team, tGoup) => {\n\n}\n\n// все админы турниров города\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        \n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новый турнир\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\n                    .then(pl => {\n                        debugger\n                        if (pl && pl.data) {\n                            dispatch(addOrEditTournament(pl.data))\n                            //dispatch(resetTournament());\n                            //dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                            //dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        //dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\n                        //dispatch(setGlobalPopout(false))\n                    })\n            else {\n                //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                //dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            //dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\n            //dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет турнир\nexport const deleteTournament = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает новые заявки в турнир\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setTournamentNewBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает группы и заявленные команды турнира\nexport const getTournamentTeams = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.getTournamentTeamsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// изменяет группу команды в турнире\nexport const changeTournamentTeamBidTournamentGroup = (team = null, newgroup = null, oldgroup = null, userprofile = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (newgroup != null) && (oldgroup != null)) {\n            \n            if (authQueryString && authQueryString.length > 0)\n            \n                CityTournamentAdminAPI.changeTeamTournamentGroup(team, newgroup, oldgroup, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось сменить группу: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сменить группу, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Подтверждает заявку в турнир\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Отклоняет заявку в турнир\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Удаляет команду из турнира\nexport const deleteTeamFromTournament = (team = null, tournamentGroup = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournamentGroup != null) && (userprofile != null)  && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTeamFromTournamentByTeam(team, tournamentGroup, userprofile, admintext)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду из турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет группу турнира\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournamentGroupId < 0)\n                {\n                    debugger\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавляет группу турнира\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournament.Id < 0)\n                {\n                    debugger\n                    dispatch(addGroupToTournament(tournamentGroup));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(addGroupToTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTournaments = (userProfileId = -1) => {\n    return dispatch => {\n        if (userProfileId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setMyTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры города для пользователя\nexport const getTournamentsByCityId = (cityUmbId = -1) => {\n    return dispatch => {\n        if (cityUmbId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getAllTournamentsInCityByCityUmbracoId(cityUmbId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        debugger\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера турнирные таблицы групп/лиг выбранного турнира\nexport const getTournamentTablesByTournamentId = (tournamentId = -1) => {\n    return dispatch => {\n        if (tournamentId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getTournamentTablesByTournamentId(tournamentId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournamentTables(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { TeamAdminAPI, TeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { TeamAdmins } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTeamAdmins = TeamAdmins;\n\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\n\nconst currentDate = new Date();\n\nconst emptyTeam = {\n    Id: -1,\n    Name: \"\",\n    Year: 0,\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    Details: \"\",\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [],\n    Admins: [],\n    Matches: [],\n    Players: [],\n    Published: false,\n    Deleted: false,\n}\n\nconst initState = {\n    teams: [], // все турниры\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\n    myTeams: [], // те, что я создал\n    cityTeamAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения команды (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet teamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TEAM_SET_ALL_TEAMS: {\n            return {\n                ...state,\n                teams: [...action.teams],\n            };\n        }\n        case TEAM_SET_MY_TEAMS: {\n           // debugger\n            return {\n                ...state,\n                myTeams: [...action.myTeams],\n            };\n        }\n        case TEAM_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TEAM_ADD_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams, { ...action.myteam }]\n            };\n        }\n        case TEAM_SET_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.map(tour => {\n\n                    if (tour.Id == action.myteam.Id) {\n                        {\n                            tour = { ...action.myteam, };\n                        }\n                    }\n                    return tour;\n                })],\n            };\n        }\n        case TEAM_DELETE_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\n            };\n        }\n        case TEAM_SET_SELECTED_TEAM: {\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\n            debugger\n\n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxT)\n                        maxT = item.KeyId;\n                }\n            });\n            state.selected.Admins.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxA)\n                        maxA = item.KeyId;\n                }\n            });\n            state.selected.Matches.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxM)\n                        maxM = item.KeyId;\n                }\n            });\n            state.selected.Players.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxP)\n                        maxP = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {\n                    ...action.team,\n                    WhenBorn: {\n                        day: new Date(action.team.WhenBorn).getDate(),\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\n                        year: new Date(action.team.WhenBorn).getFullYear()\n                    },\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\n                        return { ...item, KeyId: ++maxT }\n                    })],\n                    Admins: [...action.team.Admins.map(item => {\n                        return { ...item, KeyId: ++maxA }\n                    })],\n                    Matches: [...action.team.Matches.map(item => {\n                        return { ...item, KeyId: ++maxM }\n                    })],\n                    Players: [...action.team.Players.map(item => {\n                        return { ...item, KeyId: ++maxP }\n                    })],\n                },\n            };\n        }\n        case TEAM_RESET_TEAM: {\n            return {\n                ...state,\n                selected: { ...emptyTeam },\n            };\n        }\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\n            return {\n                ...state,\n                cityTeamAdmins: [...action.cityTeamAdmins],\n            };\n        }\n        case TEAM_SET_WHEN_BORN: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    WhenBorn: action.when,\n                },\n            };\n        }\n        case TEAM_SET_NAME: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Name: action.value,\n                },\n            };\n        }\n        case TEAM_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Reglament: action.value,\n                },\n            };\n        }\n        case TEAM_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Details: action.value,\n                },\n            };\n        }\n        case TEAM_PUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: true,\n                },\n            };\n        }\n        case TEAM_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: false,\n                },\n            };\n        }\n        case TEAM_ADD_GROUP: {\n            let max = -1;\n            state.selected.TeamGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: [...state.selected.TeamGroups,\n                    {\n                        KeyId: max + 1,\n                        Name: action.groupName\n                    }],\n                },\n            };\n        }\n        case TEAM_SET_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.map(item => {\n                        if (item.Id == action.groupId) {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TEAM_DEL_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTeams = (teams) => {\n    return {\n        type: TEAM_SET_ALL_TEAMS,\n        teams\n    }\n}\n\nexport const setMyTeam = (myteam) => {\n    return {\n        type: TEAM_SET_MYTEAM,\n        myteam\n    }\n}\n\nexport const addMyTeam = (myteam) => {\n    return {\n        type: TEAM_ADD_MYTEAM,\n        myteam\n    }\n}\n\nexport const setSelectedTeam = (team) => {\n    debugger\n    return {\n        type: TEAM_SET_SELECTED_TEAM,\n        team\n    }\n}\n\nexport const deleteMyTeam = (myteam) => {\n    return {\n        type: TEAM_DELETE_MYTEAM,\n        myteam\n    }\n}\n\nexport const setMyTeams = (myTeams) => {\n    return {\n        type: TEAM_SET_MY_TEAMS,\n        myTeams\n    }\n}\n\nexport const teamPublish = () => {\n    return {\n        type: TEAM_PUBLISH,\n    }\n}\n\nexport const teamUnpublish = () => {\n    return {\n        type: TEAM_UNPUBLISH,\n    }\n}\n\nexport const resetTeam = () => {\n    return {\n        type: TEAM_RESET_TEAM\n    }\n}\n\nexport const setTeamWhenBorn = (when) => {\n    return {\n        type: TEAM_SET_WHEN_BORN,\n        when\n    }\n}\n\n\nexport const setTeamMode = (mode) => {\n    return {\n        type: TEAM_SET_MODE,\n        mode\n    }\n}\n\nexport const setTeamName = (value) => {\n    return {\n        type: TEAM_SET_NAME,\n        value\n    }\n}\n\nexport const setTeamDetails = (value) => {\n    return {\n        type: TEAM_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTeamReglament = (value) => {\n    return {\n        type: TEAM_SET_REGLAMENT,\n        value\n    }\n}\n\n\n\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\n    return {\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\n        cityTeamAdmins\n    }\n}\n\nexport const delGroupFromTeam = (teamId, groupId) => {\n    return {\n        type: TEAM_DEL_GROUP,\n        teamId,\n        groupId\n    }\n}\n\nexport const addGroupToTeam = (teamId, groupName) => {\n    return {\n        type: TEAM_ADD_GROUP,\n        teamId,\n        groupName\n    }\n}\n\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\n    return {\n        type: TEAM_SET_GROUP,\n        teamId,\n        groupId,\n        groupName\n    }\n}\n\n\n// все админы турниров города\nexport const getAllCityTeamAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новую команду\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null && userprofile != null) {\n            if (authQueryString && authQueryString.length > 0)\n            {\n                if (team.Id < 0) // добавление\n                {\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n                else{ // изменение\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет команду\nexport const deleteTeam = (team = null, userprofile = null) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.deleteTeam(team, userprofile)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTeams = (userProfileId = -1) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (userProfileId != -1) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n\n                            dispatch(setMyTeams(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан userprofile = -1\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getTeamInfo = (team = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n            TeamAPI.getTeamInfoByTeamId(team.Id)\n                    .then(pl => {\n                        \n                        if (pl && pl.data) {\n                            \n                            dispatch(setSelectedTeam(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default teamReducer;","import React, { Component } from 'react'\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst ButtonWithHistory = (props) => {\n  \n \n    return (\n        <Button isBack={false} {...props}></Button>\n        \n    )\n}\n\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem, Group } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from './TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setSelectedTeam(item);\n        props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTeam();\n        props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n        \n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                </FormItem>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\n                </FormItem>\n                <Group>\n                    <TeamAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTeam}\n                    Button2Handle = {DeleteTeam}\n                    List={props.team.myTeams}\n                    >\n                        \n                    </TeamAdminList>\n                </Group>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TeamAdminPanel);","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { BidTeam } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoBidTeam = BidTeam;\n\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\n\n\nconst currentDate = new Date();\n\nconst emptyBidTeam = BidTeam\n\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\nexport const BID_TEAM_MODE_VIEW = \"view\"\n\nconst initState = {\n    tournaments: [], // все турниры\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\n    selectedTournament: {...EmptyTournament},\n    myBids: [], // те, что я создал\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\n}\n\n\nlet bidBidTeamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case BID_TEAM_SET_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\n            return {\n                ...state,\n                selectedTournament: {...state.selectedTournament, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case BID_TEAM_SET_SELECTED_MODE: {\n            return {\n                ...state,\n                selectMode: action.mode,\n            };\n        }\n        case BID_TEAM_SET_MY_BIDS: {\n            return {\n                ...state,\n                myBids: [...action.bids],\n            };\n        }\n        case BID_TEAM_ADD_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids, action.bid],\n            };\n        }\n        case BID_TEAM_DEL_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case BID_TEAM_APPROVE_BID: {\n            debugger\n            return {\n                ...state,\n                \n            };\n        }\n        \n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: BID_TEAM_SET_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setMyBids = (bids) => {\n    return {\n        type: BID_TEAM_SET_MY_BIDS,\n        bids\n    }\n}\n\nexport const approveBid = (bid) => {\n    return {\n        type: BID_TEAM_APPROVE_BID,\n        bid\n    }\n}\n\nexport const addMyBid = (bid) => {\n    return {\n        type: BID_TEAM_ADD_MY_BID,\n        bid\n    }\n}\n\nexport const delMyBid = (bid) => {\n    return {\n        type: BID_TEAM_DEL_MY_BID,\n        bid\n    }\n}\n\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\n        groups\n    }\n}\n\nexport const setBidTeamSelectedMode = (mode) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_MODE,\n        mode\n    }\n}\n\n// все админы турниров города\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        \n        if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getActualTournaments(userprofile, team)\n                .then(pl => {\n                    \n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setTournaments(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        //dispatch(setCityBidTeamAdmins(demoBidTeam))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос заявок команды\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (team.Id >= 0)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(setMyBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавление заявки от команды\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(addMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаление заявки от команды\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\n    \n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\n            .then(pl => {\n                        \n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\n                            dispatch(delMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                    else {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                        dispatch(setGlobalPopout(false))\n                        \n                    }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n            \n        }\n    }\n}\n\n\n// согласование/отмена заявки от команды\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(approveBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default bidBidTeamReducer;","import React from 'react'\nimport { Cell } from '@vkontakte/vkui'\n\n\n\n\nconst ListItem = (props) => {\n    return (\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \n            removable \n            onRemove={() => props.Delete(props.KeyId)}\n            >\n                {props.Name}\n            </Cell>\n    )\n\n}\n\n\nexport default ListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        debugger\n                        if (item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else if (!item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    //onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else\n                            return (\n                                <RichCell\n                                    onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    actions={<ButtonWithNotify mode=\"destructive\" Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button1Handle(item)}>Отменить заявку</ButtonWithNotify>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                    })\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List } from '@vkontakte/vkui'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\n\n\nconst BidTeamTournamentList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        \n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\n                            //debugger\n                            return <>{props.Bids.map(bid => {\n                                debugger\n                                // просмотреть и вывести заявки\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\n                                    debugger\n                                    return (\n                                        <RichCell\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                            onClick={() => props.CellClick(item)}\n                                            \n                                        >\n                                            {item.Name}\n                                        </RichCell>\n                                    )}\n                                }\n                            )}</>\n                            \n\n\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                    onClick={() => props.CellClick(item)}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                    })\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Button, FormItem, Input } from '@vkontakte/vkui'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidTeamTournamentGroupsList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    //debugger\n\n    return (\n        <Group header=\"Выберите группу/лигу\">\n            <Group mode=\"plain\">\n                <FormItem>\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\n                </FormItem>\n                <FormItem top=\"Название команды на этот турнир\">\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\n                </FormItem>\n                <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        //debugger\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\n                        {\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\n                            // props.Bids.map\n\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Заявляем команду в эту группу?\" Yes={() => props.Button1Handle(item)}>Заявиться сюда</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        \n                    })\n                    : <InfoRow>Нет групп в турнире</InfoRow>\n                }\n\n            </List>\n            </Group>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from '../Team/TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\n\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\nimport BidList from './BidList';\n\n\n\nconst BidTeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        // props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        // props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        // props.setSelectedTeam(item);\n        // props.setTeamMode(\"edit\");\n    }\n\n    const CancelBid = (item) => {\n        \n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\n        // props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        // props.resetTeam();\n        // props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\n                <BidList\n                    CellClick={CellClick}\n                    Button1Handle = {CancelBid}\n                    //Button2Handle = {DeleteTeam}\n                    List={props.tournamentsForBids.myBids}\n                >\n                    \n                </BidList>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    cancelBidTeamToTournamentGroup, \n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\n} from '../../../../store/tournamentsReducer'\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\nimport {\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { goToPanel } from '../../../../store/systemReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidTeamList from '../BidTeam/BidList';\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\n\nconst TeamItem = (props) => {\n    let currentDate = new Date();\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\n\n    const teamDate = new Date(\n        props.teams.selected.WhenBorn.year,\n        props.teams.selected.WhenBorn.month-1,\n        props.teams.selected.WhenBorn.day\n        );\n\n    useEffect(() =>{\n        debugger\n        if ((props.teams.selected != null) && (props.teams.selected.Id >= 0)){\n            props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\n            props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\n        }\n    }, props.teams.selected)\n        \n    \n    const MakeBid = (tournamentgroup) => {\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n\n    const CancelBid = (tournamentgroup) => {\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n    \n    const SelectTournament = (tournament) => {\n        props.getTournamentGroups(tournament)\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"groups\")\n    }\n    \n    const BackToTournaments = () => {\n        props.setBidTeamSelectedMode(\"tournaments\")\n    }\n    \n    const CancelTeamCreate = () => {\n        props.goToPanel(\"teamadmin\", false);\n    }\n\n\n    const SaveTeam = () => {\n        props.saveSelectedTeam(props.teams.selected, props.myProfile);\n        props.goToPanel(\"teamadmin\", false);\n        //props.setTeamMode(\"view\");\n    }\n\n    \n\n    switch (props.mode) {\n        case \"view\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Название команды\">\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата основания\">\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Описание команды\">\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Логотип\">\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\n                    </FormItem>\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                            <List>\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                            </List>\n                            :\n                            <FormItem>\n                                <InfoRow>Нет групп</InfoRow>\n                            </FormItem>\n                        }\n                    </Group> */}\n                </>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новая команда</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новую команду?\" Yes={SaveTeam}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Отменить создание команды?\" Yes={CancelTeamCreate} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <Group>\n                    <Header>Управление командой</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Заявки на турнир\">\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\n                        </FormItem>\n                        <FormItem top=\"Куда можно заявиться\">\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\n                                <BidTeamTournamentList\n                                    CellClick={SelectTournament}\n                                    // Button1Handle = {MakeBid}\n                                    // Button2Handle = {CancelBid}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    List={props.tournamentsForBids.tournaments}\n                                ></BidTeamTournamentList>\n                        :\n                                <BidTeamTournamentGroupsList\n                                    CellClick={BackToTournaments}\n                                    Button1Handle = {MakeBid}\n                                    Button2Handle = {CancelBid}\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    TeamName={teamNameOnTournament}\n                                    SetTeamName={SetTeamNameOnTournament}\n                                ></BidTeamTournamentGroupsList>\n                        }\n                        </FormItem>\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Сохранить изменения?\" Yes={SaveTeam}>Внести изменения</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        };break;\n        default:{\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        };break;\n        \n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        teams: state.teamsEntity,\n        bidTeams: state.bidTeamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n        SelectedName: state.teamsEntity.selected.Name,\n        bidSelectMode: state.bidTeamsEntity.selectMode, \n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, { setTeamMode, goToPanel,\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \n})(TeamItem)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport TournamentListItem from './TournamentListItem'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\nconst TournamentAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBegin);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {!item.Published ? \n                                        <ButtonWithNotify Message=\"Опубликовать турнир?\" Yes={() => props.Button1Handle(item, true)}>Опубликовать</ButtonWithNotify>\n                                        : \n                                        <ButtonWithNotify Message=\"Снять с публикации турнир?\" Yes={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</ButtonWithNotify>}\n                                        <ButtonWithNotify Message=\"Удалить турнир?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    caption={date && `Начало: ${dateToString(date)}`}\n                                    after={<Icon24ChevronRightWithHistory\n                                    handleClick={() => props.CellClick(item)} \n                                        toMenuName=\"tournamentitem\" \n                                        data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\n                                    }\n                                    text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : <FormItem><InfoRow>Нет турниров</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TournamentAdminList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TournamentAdminList from './TournamentAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, \n    setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TournamentAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTournament = (tour, publish) => {\n\n        props.publishTournament(tour, props.myProfile, publish);\n    }\n   \n    const DeleteTournament = (tour) => {\n        props.deleteTournament(tour, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setTournamentMode(\"edit\");\n        props.setSelectedTournament(item);\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTournament();\n        props.setTournamentMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTournaments(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\n                </FormItem>\n                <TournamentAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTournament}\n                    Button2Handle = {DeleteTournament}\n                    List={props.tournament.myTournaments}\n                >\n                    \n                </TournamentAdminList>\n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TournamentAdminPanel);","import React, {useState} from 'react'\nimport  ButtonWithNotify  from './../../Common/WithNotify/ButtonWithNotify'\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\n\n\n\n\nconst BidListItem = (props) => {\n\n    let [adminText, setAdminText] = useState(\"\");\n\n\n    return (\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \n            actions={\n                <>\n                    <ButtonWithNotify mode=\"primary\" Message=\"Принять заявку команды?\" Yes={() => props.Accept(props.Item)}>Принять</ButtonWithNotify>\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\n                    <ButtonWithNotify mode=\"destructive\" Message=\"Отклонить заявку команды?\" Yes={() => props.Decline(props.Item, adminText)}>Отклонить</ButtonWithNotify>\n                </>\n            }\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\n            >\n                Команда {props.Item.Team.Name}\n            </RichCell>\n    )\n\n}\n\n\nexport default BidListItem","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, MatchAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoMatch = Match;\n\nconst MATCH_SET_ALL_MATCHES = \"MATCH_SET_ALL_MATCHES\";\nconst MATCH_DEL_MATCH = \"MATCH_DEL_MATCH\";\nconst MATCH_SET_SELECTED = \"MATCH_SET_SELECTED\";\nconst MATCH_ADD_MATCH = \"MATCH_ADD_MATCH\";\nconst MATCH_SET_HOT_MATCHES = \"MATCH_SET_HOT_MATCHES\";\nconst MATCH_SET_ACCESS = \"MATCH_SET_ACCESS\";\nconst MATCH_SET_MODE = \"MATCH_SET_MODE\";\nconst MATCH_SET_PLAYED = \"MATCH_SET_PLAYED\";\nconst MATCH_SET_HOT_PANEL = \"MATCH_SET_HOT_PANEL\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    matches: [],\n    hot: {\n        yesterday: [],\n        today: [],\n        tomorrow: [],\n    },\n    hotPanel: \"today\", // \"yesterday\", \"tomorrow\"\n    selected: {},\n    access: \"user\",\n    mode: \"list\", // режим отображения турнира (\"list\" - список, \"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet matchReducer = (state = initState, action) => {\n    switch (action.type) {\n        case MATCH_SET_ALL_MATCHES: {\n            return {\n                ...state,\n                matches: [...action.matches],\n            };\n        }\n        case MATCH_SET_SELECTED: {\n            return {\n                ...state,\n                selected: action.match,\n            };\n        }\n        case MATCH_DEL_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches.filter(m => m.Id != action.match.Id)],\n            };\n        }\n        case MATCH_ADD_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches, action.match],\n            };\n        }\n        case MATCH_SET_HOT_MATCHES: {\n            \n            let date = new Date();\n            let today = date.addDays(1).addDays(-1);\n            let yesterday = date.addDays(-1);\n            let tomorrow_begin = date.addDays(1);\n            let tomorrow_end = date.addDays(2);\n\n            let st = {\n                ...state,\n                hot: {\n                    yesterday: [...action.matches.filter(match => {\n                        \n                        return ((new Date(match.When) >= yesterday) && (new Date(match.When) < today))\n                    })],\n                    today: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= today) && (new Date(match.When) < tomorrow_begin))\n                    })],\n                    tomorrow: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= tomorrow_begin) && (new Date(match.When) < tomorrow_end))\n                    })],\n                },\n            };\n            \n            return st;\n        }\n        case MATCH_SET_ACCESS: {\n            return {\n                ...state,\n                access: action.access,\n            };\n        }\n        case MATCH_SET_PLAYED: {\n            return {\n                ...state,\n                access: action.played,\n            };\n        }\n        case MATCH_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case MATCH_SET_HOT_PANEL: {\n            return {\n                ...state,\n                hotPanel: action.panelName,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllMatches = (matches) => {\n    return {\n        type: MATCH_SET_ALL_MATCHES,\n        matches\n    }\n}\n\nexport const setHotMatches = (matches) => {\n    return {\n        type: MATCH_SET_HOT_MATCHES,\n        matches\n    }\n}\n\nexport const delMatch = (match) => {\n    return {\n        type: MATCH_DEL_MATCH,\n        match\n    }\n}\n\nexport const addMatch = (match) => {\n    return {\n        type: MATCH_ADD_MATCH,\n        match\n    }\n}\n\nexport const setAccess = (access) => {\n    return {\n        type: MATCH_SET_ACCESS,\n        access\n    }\n}\n\nexport const setPlayed = (played) => {\n    return {\n        type: MATCH_SET_PLAYED,\n        played\n    }\n}\n\nexport const setMode = (mode) => {\n    return {\n        type: MATCH_SET_MODE,\n        mode\n    }\n}\n\nexport const setHotPanel = (panelName) => {\n    return {\n        type: MATCH_SET_HOT_PANEL,\n        panelName\n    }\n}\n\nexport const setSelectedMatch = (match) => {\n    return {\n        type: MATCH_SET_SELECTED,\n        match\n    }\n}\n\n\n\n// все матчи турнира\nexport const getAllMatchesByTournament = (tournament = null, userProfile = null, startindex = 0) => {\n    return dispatch => {\n        if ((tournament != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0)\n                MatchAPI.getAllMatchesByTournament(tournament, userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data && pl.data.length > 0) {\n                                \n                                dispatch(setAllMatches(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавить матч в турнир\nexport const addMatchToShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.addMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                                dispatch(setErrorMessage(\"Успешно добавлено\"))\n\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n// удалить матч из турнира\nexport const delMatchFromShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.delMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(delMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// возвращает актуальные матчи города\nexport const getMatchesInCurrentCity = (userProfile = null) => {\n    return dispatch => {\n        if (userProfile != null) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.getCurrentMatchesByCity(userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data.length > 0) {\n                                dispatch(setHotMatches(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные MatchAPI.getCurrentMatchesByCity\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default matchReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport { dateToString, timeToString } from '../../../../utils/convertors/dateUtils';\nimport { green } from 'chalk';\n\nconst schet = {\n    fontWeight: 'bold', \n    color: 'yellow',\n    backgroundColor: 'gray',\n    padding: '1px 7px',\n    borderRadius: '10px',\n}\n\nconst win = {\n    fontWeight: 'bold',\n    //color: 'orange',\n    //textDecoration: 'underline',\n    //borderLeft: '10px solid orange',\n}\n\nconst lose = {\n    color: '#666',\n    //color: 'orange',\n}\n\nconst MatchListItem = (props) => {\n    \n    \n    let match=props.Match;\n    let place=props.Place;\n    let date = new Date(match.When);\n\n\n        return (\n            <RichCell\n                onClick={props.ClickHandler}\n                caption={place ? place.Name : \"Ошибка загрузки данных о месте\"}\n                text={\n                    match.Played ?\n                        <span style={{ \"color\": \"green\" }}>Сыгран <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span></span> :\n                        <span style={{ \"color\": \"blue\" }}>Состоится <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span> в {timeToString(date.getHours(), date.getMinutes())}</span>\n                }\n            >\n                {match.Played ? <span>\n                        <span \n                            style={(+match.Team1Goals > +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n                            >{match.Team1.Name} </span>\n                        <span style={schet}>{match.Team1Goals} - {match.Team2Goals}</span>\n                        <span \n                            style={(+match.Team1Goals < +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n                        > {match.Team2.Name}</span>\n                    </span> :\n                    <span>{match.Team1.Name} - {match.Team2.Name}</span>\n                }\n            </RichCell>\n        )\n}\n\nexport default MatchListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div, Headline } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setSelectedMatch,\n} from '../../../../store/matchReducer'\nimport {\n    goToPanel,\n} from '../../../../store/systemReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport ButtonWithNotify from '../WithNotify/ButtonWithNotify';\nimport MatchListItem from '../../AdminPanel/Match/MatchListItem';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Shedule = (props) => {\n\n    useEffect(() => {\n\n        props.getAllMatchesByTournament(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected)\n\n    let isAdminMode = props.mode == \"admin\" ? true : false;\n    let tournament = props.tournament;\n    let today = props.todayIs;\n\n    // создание объектов для заполнения выпадающих списков (count - сколько элементов, makeZeroBefore - дописывать ли нули впереди к цифрам от 0 до 9)\n    let optMaker = (count, makeZeroBefore = true) => {\n        let m = [];\n        for (let i = 0; i < count; i++)\n            m = [...m, { value: i, label: ((i <= 9) && (makeZeroBefore)) ? \"0\" + i : i }]\n        return m\n    }\n\n    let groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n    //debugger\n    let places = props.places\n        .map(p => p.Name.length ? p : null)\n        .filter(p => p)\n        .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n    let teams = [{ value: 0, label: \"Не выбрано\" }]\n    let hours = [...optMaker(24)];\n    let minutes = [...optMaker(60)];\n    let teamGoals = [...optMaker(99, false)];\n\n    const [selectedTournamentGroup, setSelectedTournamentGroup] = React.useState((groups && Array.isArray(groups) && groups.length > 0) ? groups[0] : null);\n\n    const [selectedTournamentGroupTeamList, setSelectedTournamentGroupTeamList] = React.useState(teams);\n\n    const [selectedTeam1, setSelectedTeam1] = React.useState(0);\n    const [selectedTeam2, setSelectedTeam2] = React.useState(0);\n    const [selectedTeam1Goals, setTeam1Goals] = React.useState(0);\n    const [selectedTeam2Goals, setTeam2Goals] = React.useState(0);\n    const [selectedPlace, setSelectedPlace] = React.useState(0);\n    const [selectedId, setSelectedId] = React.useState(0);\n    const [selectedPlayed, setSelectedPlayed] = React.useState(false);\n    const [selectedDate, setSelectedDate] = React.useState({ day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() });\n    const [selectedHour, setSelectedHour] = React.useState([hours[0].value]);\n    const [selectedMinute, setSelectedMinute] = React.useState(minutes[0].value);\n    \n\n    let getGroup = (groupId) => {\n        return tournament.TournamentGroups.find(x => x.Id == groupId);\n    }\n\n    let changeGroup = (league_id) => {\n        setSelectedTournamentGroup(league_id);\n        setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n    }\n\n    let allMatchesInAllGroups = []\n    props.tournaments.selected.TournamentGroups.forEach(tg => {\n\n        allMatchesInAllGroups.push({\n            TournamentGroup: { ...tg },\n            Matches: [...props.matches.filter(m => m.TournamentGroup.Id == tg.Id)]\n        })\n    })\n\n    let addMatch = (editId) => {\n\n        let match = (editId >= 0) ?\n            {\n                Id: editId,\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            } :\n            {\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            };\n\n        props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n        props.setMode(\"list\")\n    }\n\n\n    let delCurrentMatch = () => {\n\n        let match = {\n            When: selectedDate,\n            Id: selectedId,\n            TournamentGroupId: selectedTournamentGroup,\n            // TournamentGroup: {\n            //     Id: selectedTournamentGroup,\n            //     Tournament: {...props.tournaments.selected}\n            // },\n            PlaceId: selectedPlace,\n            Team1Id: selectedTeam1,\n            Team2Id: selectedTeam2,\n            Played: selectedPlayed,\n        }\n\n        props.delMatchFromShedule(match, props.myProfile, selectedHour, selectedMinute)\n        props.setMode(\"list\")\n        //props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n    }\n\n    let goToEditMatch = (match) => {\n        debugger\n\n        groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n        //debugger\n        places = props.places\n            .map(p => p.Name.length ? p : null)\n            .filter(p => p)\n            .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n        teams = [{ value: 0, label: \"Не выбрано\" }]\n        hours = [...optMaker(24)];\n        minutes = [...optMaker(60)];\n        teamGoals = [...optMaker(99, false)];\n\n        let date = new Date(match.When);\n\n\n        setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n        setSelectedTournamentGroup(match.TournamentGroupId);\n        setSelectedId(match.Id);\n        setTeam1Goals(match.Team1Goals);\n        setTeam2Goals(match.Team2Goals);\n        setSelectedTeam1(match.Team1.Id)\n        setSelectedTeam2(match.Team2.Id)\n        setSelectedPlace(match.PlaceId)\n        setSelectedPlayed(match.Played)\n        setSelectedDate({ day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() })\n        setSelectedHour(date.getHours())\n        setSelectedMinute(date.getMinutes())\n\n        props.setMode(\"edit\")\n    }\n\n    let goToViewMatch = (match) => {\n        debugger\n\n        props.setSelectedMatch(match)\n\n        props.goToPanel(\"matchitem\", false)\n    }\n\n//debugger\n    // выводим список существующего расписания с кнопками редактирования, удаления, переноса\n    // группируем список по датам, сортируем от последних к первым (последние выше)\n    // сделать кнопку сортировки\\\n\n    switch (props.access) {\n        case \"admin\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\n                                        {groupAndMatchesItem.Matches.length > 0 ?\n                                            <List>\n                                                {groupAndMatchesItem.Matches.map(match => {\n                                                    \n                                                    let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                    let date = new Date(match.When);\n                                                    return <MatchListItem \n                                                        ClickHandler={() => goToEditMatch(match)}\n                                                        Match={match} Place={place}\n                                                        ></MatchListItem>\n                                                    // <RichCell\n                                                    //     caption={place.Name}\n                                                    //     text={\n                                                    //         match.Played ?\n                                                    //             <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                                    //             <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                                    //     }\n                                                        \n                                                    // >\n                                                    //     {match.Played ?\n                                                    //         `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\n                                                    //         `${match.Team1.Name} - ${match.Team2.Name}`\n                                                    //     }\n                                                    // </RichCell>\n                                                })}\n                                            </List>\n                                            :\n                                            <SimpleCell>Нет расписания в группе</SimpleCell>\n                                        }\n                                    </Group>\n                                }\n                                )}\n                            </List>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <Button>Назад</Button>\n                        </Group>\n                    )\n                }; break;\n                case \"add\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Добавить матч?\" Yes={() => addMatch(-1)}>Добавить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n                case \"edit\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Сохранить матч?\" Yes={() => addMatch(selectedId)}>Сохранить</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Удалить матч?\" Yes={() => delCurrentMatch()} align=\"right\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n            }\n        }; break;\n        case \"user\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return (\n                                        <Group header={<FormItem><Headline mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Headline></FormItem>}>\n                                            {\n                                                groupAndMatchesItem.Matches.length > 0\n                                                    ?\n                                                    <List>\n                                                        {groupAndMatchesItem.Matches.map(match => {\n                                                            let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                            return <MatchListItem \n                                                            ClickHandler={() => goToViewMatch(match)}\n                                                            Match={match} Place={place}></MatchListItem>\n                                                        })}\n                                                    </List>\n                                                    :\n                                                    <SimpleCell>Нет расписания в группе</SimpleCell>\n                                            }\n                                        </Group>\n                                    )\n                                }\n                                )}\n                            </List>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\ndebugger \n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                {matches.selected.TournamentGroup.Name}\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                {matches.selected.Team1.Name} {matches.selected.Team1Goals} : {matches.selected.Team2Goals} {matches.selected.Team2.Name}\n                            </FormItem>\n                            \n                            <FormItem top=\"Дата\">\n                                {new Date(matches.selected.When).toLocaleDateString()}\n                            </FormItem>\n                            \n                            <FormItem top=\"Место\">\n                                {matches.selected.Place.Name}\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                {matches.selected.Played}\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Назад</Button>\n                        </Group>\n                    )    \n                }; break;\n                case \"add\": {  return <>add</>}; break;\n                case \"edit\": {  return <>edit</>}; break;\n            }\n        }; break;\n\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, { goToPanel,\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule, setSelectedMatch,\n})(Shedule)","import React, { useEffect, useState } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker,\n    Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel,\n    ActionSheet, ActionSheetItem, Gallery, Headline\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentMode, setTournamentWhenEnd, setTournamentName, setTournamentReglament, \n    setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, \n    acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, changeTournamentTeamBidTournamentGroup, \n    deleteTeamFromTournament, setTournamentMatchLength, getTournamentTablesByTournamentId,\n} from '../../../../store/tournamentsReducer'\nimport {goToPanel} from '../../../../store/systemReducer'\nimport {\n    getTeamInfo, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidListItem from '../ListItem/BidListItem';\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory';\nimport Shedule from '../../Common/Shedule/Shedule';\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\nconst w7percent = { width: '7%', textAlign: 'center', padding: '5px 0 5px 0' }\nconst w8percent = { width: '8%', textAlign: 'center', padding: '5px 0 5px 0'  }\nconst w20percent = { width: '20%', textAlign: 'left', padding: '5px 0 5px 0', overflow: 'hidden'  }\n\n\nconst TournamentItem = (props) => {\n    let currentDate = new Date();\n    let [tempGroupName, setTempGroupName] = useState(\"\");\n    let [currentTab, setCurrentTab] = useState(props.Tab ? props.Tab : \"info\");\n    let [activePopout, setActivePopout] = useState(null);\n    // let [slideIndex, setSlideIndex] = useState(0);\n    // let [isDraggable, setIsDraggable] = useState(true);\n    // let [showArrows, setShowArrows] = useState(true);\n\n    // это надо потом удалить. я вручную задал отображение вкладки расписания при открытии в режиме просмотра (для пользователей)\n\n    useEffect(() => {\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\n        props.getTournamentGroups(props.tournaments.selected)\n        props.getTournamentTablesByTournamentId(props.tournaments.selected.Id)\n\n    }, props.tournaments.selected)\n\n    \n    useEffect(() => {\n        props.mode == \"view\" ? setCurrentTab(\"shedule\") : setCurrentTab(\"info\")\n    }, props.mode)\n\n    useEffect(() => {\n        props.getTournamentTeams(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected.TournamentGroups)\n\n\n    const addToTournament = () => {\n\n        if (tempGroupName.trim() != \"\") {\n            //addGroupToTournament\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\n            setTempGroupName(\"\");\n        }\n    }\n\n    const DelGroupFromTournament = (keyId, groupId) => {\n        //props.tournaments.selected.Id, item.KeyId, item.Id\n\n        if (groupId < 0)\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\n        else\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\n    }\n\n    const AcceptBid = (item) => {\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\n\n    }\n\n    const DeclineBid = (item, text) => {\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\n\n    }\n\n    const CellClick = (item) => {\n\n        props.getTeamInfo(item);\n        props.setTeamMode(\"view\");\n    }\n\n    // удаление команды из турнира\n    const DeleteTeam = (team, tg) => {\n\n        props.deleteTeamFromTournament(team, tg, props.myProfile, \"Ваша команда удалена из турнира\")\n    }\n\n    const SelectTournamentGroup = (newGroup, oldGroup, team) => {\n        props.changeTournamentTeamBidTournamentGroup(team, newGroup, oldGroup, props.myProfile)\n    }\n\n\n    const SaveTournament = () => {\n        //props.resetTournament();\n//debugger\n        props.saveSelectedTournament(props.tournaments.selected, props.myProfile)\n        //props.goToPanel(\"tournamentadmin\", false); // закрываем текущий турнир и выводим все турниры\n        props.setTournamentMode(\"view\");\n    }\n\n\n    const SetPopup = (team, oldTg) => {\n\n        setActivePopout(\n            <ActionSheet\n                onClose={() => setActivePopout(null)}\n                iosCloseItem={<ActionSheetItem autoclose mode=\"cancel\">Отменить</ActionSheetItem>}\n            //toggleRef={this.baseTargetRef.current}\n            >\n                {\n                    props.tournaments.selected.TournamentGroups.map(newTg => {\n                        return (\n                            <ActionSheetItem\n                                onClick={() => {\n\n                                    SelectTournamentGroup(newTg, oldTg, team)\n                                }}\n                                autoclose\n                            >\n                                {newTg.Name}\n                            </ActionSheetItem>\n                        )\n                    })\n                }\n                <ActionSheetItem autoclose>Отмена</ActionSheetItem>\n            </ActionSheet>)\n\n    }\n\n\n    switch (props.mode) {\n        case \"view\": {\n\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"shedule\">\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            {/* <FormItem top=\"Ваш город\">\n                                <InfoRow>\n                                    <Headline> {props.myProfile.CityUmbracoName}</Headline>\n                                </InfoRow>\n                            </FormItem> */}\n                            <Group \n                            //header={<Header mode=\"secondary\">Матчи</Header>}\n                            >\n                                <Shedule access=\"user\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Название турнира\" bottom=\"Имя турнира должно быть уникальным\">\n                                <InfoRow>{props.tournaments.selected.Name}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Дата начала\">\n                                <InfoRow>{new Date(\n                                    props.tournaments.selected.WhenBegin.year,\n                                    props.tournaments.selected.WhenBegin.month - 1,\n                                    props.tournaments.selected.WhenBegin.day).toLocaleDateString()}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Дата окончания\">\n                                <InfoRow>{new Date(\n                                    props.tournaments.selected.WhenEnd.year,\n                                    props.tournaments.selected.WhenEnd.month - 1,\n                                    props.tournaments.selected.WhenEnd.day).toLocaleDateString()}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Описание турнира\">\n                                <InfoRow>{props.tournaments.selected.Details}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Регламент турнира\">\n                                <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                    <List>\n                                        {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет групп</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"tables\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                    <List>\n                                        {props.tournaments.selected.TournamentGroups.map((item) => {\n                                            if (item.Name != \"\") {\n                                                let table = props.tournaments.selectedTables.filter(tT => tT.TournamentGroupId == item.Id);\n                                                table.sort((firstItem, secondItem) => firstItem.Place - secondItem.Place);\n                                                let chet = false;\n                                                return (\n                                                    <>\n                                                        <InfoRow>\n                                                            <Headline> Группа/лига: {item.Name}</Headline>\n                                                        <table style={{width: '100%'}}>\n                                                            <tr>\n                                                                <th style={w7percent}>М</th>\n                                                                <th style={w20percent}>Команда</th>\n                                                                <th style={w8percent}>И</th>\n                                                                <th style={w8percent}>В</th>\n                                                                <th style={w8percent}>П</th>\n                                                                <th style={w8percent}>Н</th>\n                                                                <th style={w8percent}>МЗ</th>\n                                                                <th style={w8percent}>МП</th>\n                                                                <th style={w8percent}>МР</th>\n                                                                <th style={w8percent}>О</th>\n                                                            </tr>\n                                                            {\n                                                                table.map((row) => {\n                                                                    chet = !chet;\n                                                                    return (\n                                                                        <tr style={chet ? {backgroundColor: 'lightgray'} : {backgroundColor: 'white'}}>\n                                                                            <td style={w7percent}>{row.Place}</td>\n                                                                            <td style={w20percent}>{row.TeamName}</td>\n                                                                            <td style={w8percent}>{row.Games}</td>\n                                                                            <td style={w8percent}>{row.Wins}</td>\n                                                                            <td style={w8percent}>{row.Loses}</td>\n                                                                            <td style={w8percent}>{row.Draws}</td>\n                                                                            <td style={w8percent}>{row.GoalsScored}</td>\n                                                                            <td style={w8percent}>{row.GoalsMissed}</td>\n                                                                            <td style={w8percent}>{row.GoalsDifference}</td>\n                                                                            <td style={w8percent}>{row.Points}</td>\n                                                                        </tr>\n                                                                    )\n\n                                                                }\n\n                                                                )}\n                                                        </table>\n                                                        <br />\n                                                        <br />\n                                                        </InfoRow>\n                                                    </>\n\n                                                )\n                                            }\n                                            else\n                                                return null;\n                                        })\n                                        }\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет групп</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </Group>\n                    </Panel>\n\n                </View>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новый турнир</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название турнира\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                        </FormItem>\n                        <FormItem top=\"Дата начала\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenBegin}\n                                //value={props.tournaments.selected.WhenBegin}\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Дата окончания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenEnd}\n                                //value={props.tournaments.selected.WhenEnd}\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                        </FormItem>\n                        <FormItem top=\"Регламент турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                        </FormItem>\n                        <FormItem top=\"Длительность матча, минут\">\n                            <Input type=\"Number\"\n                                defaultValue={props.tournaments.selected.MatchLength}\n                                value={props.tournaments.selected.MatchLength}\n                                placeholder=\"60\"\n                                onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                            ></Input>\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        \n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новый турнир?\" Yes={SaveTournament}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Не создавать турнир?\" Yes={props.resetTournament} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Header>Управление турниром</Header>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                            </Tabs>\n                            <FormLayout>\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Название турнира\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                                </FormItem>\n                                <FormItem top=\"Дата начала\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenBegin}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={(value) => props.setTournamentWhenBegin(value)}\n                                        //dayPlaceholder=\"ДД\"\n                                        //monthPlaceholder=\"ММММ\"\n                                        //yearPlaceholder=\"ГГГГ\"\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Дата окончания\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenEnd}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Описание турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                                </FormItem>\n                                <FormItem top=\"Регламент турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                                </FormItem>\n                                <FormItem top=\"Длительность матча, минут\">\n                                    <Input type=\"Number\"\n                                        defaultValue={props.tournaments.selected.MatchLength}\n                                        value={props.tournaments.selected.MatchLength}\n                                        placeholder=\"60\"\n                                        onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                                    ></Input>\n                                </FormItem>\n                                {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                        <List>\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\n                                        </List>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Нет групп</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                <FormItem top=\"Новая группа/лига\">\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\n                                </FormItem>\n                                <FormItem top=\"Подверждение\">\n                                    <ButtonWithNotify Message=\"Внести изменения в турнир?\" Yes={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</ButtonWithNotify>\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\n                                </FormItem>\n                            </FormLayout>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"bids\">\n                        <Header>Заявки от команд</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) =>\n                                            <BidListItem\n                                                KeyId={item.KeyId}\n                                                Accept={AcceptBid}\n                                                Decline={DeclineBid}\n                                                Item={item}\n                                            >\n\n                                            </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"teams\">\n                        <Header>Команды по группам</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {props.tournaments.selected.TournamentGroups.map(tg => {\n\n                                    return (\n                                        <Group header={<Header>{tg.Name}</Header>}>\n                                            <List>\n                                                {\n                                                    tg.Teams.map(team => {\n\n                                                        return (\n                                                            <RichCell\n                                                                caption={team.Details}\n                                                                after={<Icon24ChevronRightWithHistory\n                                                                    handleClick={() => CellClick(team)}\n                                                                    toMenuName=\"teamitem\"\n                                                                    data-story=\"teamitem\"\n                                                                ></Icon24ChevronRightWithHistory>\n                                                                }\n                                                                actions={\n                                                                    <>\n                                                                        <Button onClick={() => SetPopup(team, tg)} mode=\"primary\">Переместить</Button>\n                                                                        <ButtonWithNotify  Message=\"Удалить команду из турнира?\" Yes={() => DeleteTeam(team, tg)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                                                    </>\n                                                                }\n                                                            >{team.Name}</RichCell>\n                                                        )\n                                                    })\n                                                }\n                                            </List>\n                                        </Group>)\n\n                                })}\n\n                                {/* {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) => \n                                        <BidListItem\n                                            KeyId={item.KeyId} \n                                            Accept={AcceptBid}\n                                            Decline={DeclineBid}\n                                            Item={item}\n                                            >\n\n                                        </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                } */}\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"shedule\">\n                        <Header>Расписание</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\n                                <Shedule access=\"admin\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n\n                </View>\n                // <Tabs>\n                //     <TabsItem>\n\n                //     </TabsItem>\n                // </Tabs>\n\n            )\n        }; break;\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        SelectedName: state.tournamentsEntity.selected.Name,\n        TournamentTables: state.tournamentsEntity.selectedTables,\n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {setTournamentMode, goToPanel,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, getTeamInfo, setTeamMode, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength,\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, getTournamentTablesByTournamentId,\n})(TournamentItem)","import React, { Component } from 'react'\nimport {PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst BackButton = (props) => {\n  \n \n    return (\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\n        \n    )\n}\n\nexport default withHistorySave(BackButton)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Hot = (props) => {\n    \n    return (\n        <FormItem>\n            <Group header={props.Name}>\n                <List>\n                    {props.Matches && props.Matches.map(match => {\n                        let date = new Date(match.When);\n                        return (\n                                <RichCell\n                                    text={\n                                        match.Played ?\n                                            <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                            <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                    }\n                                    caption={match && match.Place ? match.Place.Name : \"место не указано\"}\n                                >\n                                    {match.Played ?\n                                        `${match.Team1Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2Name}` :\n                                        `${match.Team1Name} - ${match.Team2Name}`\n                                    }\n                                </RichCell>\n                        )\n                    }\n                    )}\n                </List>\n            </Group>\n        </FormItem>\n    )\n                \n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n})(Hot)","import React, { Component } from 'react'\nimport {Card, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CardWithHistory = (props) => {\n  \n \n    return (\n        <Card isBack={false} {...props}></Card>\n        \n    )\n}\n\nexport default withHistorySave(CardWithHistory)","import React, { Component } from 'react'\nimport { CellButton } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CellButtonWithHistory = (props) => {\n  //debugger\n \n    return (\n        <CellButton isBack={false} {...props}></CellButton>\n        \n    )\n}\n\nexport default withHistorySave(CellButtonWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst TabbarItemWithHistory = (props) => {\n  \n \n    return (\n        <TabbarItem isBack={false} {...props}></TabbarItem>\n        \n    )\n}\n\nexport default withHistorySave(TabbarItemWithHistory)","import React from 'react'\n\nconst ProfilePanel = (props) => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default ProfilePanel","export default __webpack_public_path__ + \"static/media/player300-s.5ad7daca.png\";","export default __webpack_public_path__ + \"static/media/stadium300-s.e5a62e23.png\";","export default __webpack_public_path__ + \"static/media/tournament300.00b15e45.png\";","import {ampluaTypes, users} from './constants/commonConstants'\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\n\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\n\nlet demoUser = users[0];\n\nconst initState = {\n    myProfile: null,\n    vkProfile: null,\n    triedToGetProfile: false,\n\n     // level \n\n}\n\n\nexport let profileReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case PROFILE_SET_VK_PROFILE_INFO: {\n            return {...state,\n                vkProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_USER_PROFILE: {\n            return {...state,\n                myProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_TRIED_TO_GET_PROFILE: {\n            return {...state,\n                triedToGetProfile: action.tried,\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setVkProfileInfo = (user) => {\n    return {\n        type: PROFILE_SET_VK_PROFILE_INFO,\n        user\n    }\n}\n\nexport const setUserProfile = (user) => {\n    return {\n        type: PROFILE_SET_USER_PROFILE,\n        user\n    }\n}\n\nexport const setTriedToGetProfile = (tried) => {\n    return {\n        type: PROFILE_SET_TRIED_TO_GET_PROFILE,\n        tried\n    }\n}\n\n\n\n// получение данных профиля (без авторегистрации)\nexport const getUserProfile = (vkUserData) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getUserProfile(vkUserData)\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(false));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setTriedToGetProfile(true))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n            //dispatch(setUserProfile(demoUser))\n            //dispatch(setTriedToGetProfile(true))\n\n        }\n    }\n}\n\n// установка нового города пользователю\nexport const setUserProfileCity = (userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n        debugger\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.setUserProfileCity(userProfile).then()\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        //dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n// авторизация (со встроенной регистрацией)\nexport const getAuthInfo = (vkProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getAuthInfo(vkProfileInfo)\n                .then(pl => {\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(false));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\nexport default profileReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\n\n\nconst initState = {\n    cities: [],\n}\n\n\nlet cityReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getAllCitiesFromServer = () => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            CityAPI.getAll().then()\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default cityReducer;","import { ProfileAPI, CityAPI, errorObj, VKAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\nconst VK_SET_SELECTED_USER = \"VK_SET_SELECTED_USER\";\n\n\nconst initState = {\n    selectedUser: {},\n    cities: [],\n}\n\n\nlet vkReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        case VK_SET_SELECTED_USER:{\n            return {...state,\n                selectedUser: {...action.user},\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n\nexport const setSelectedUser = (user) => {\n    return {\n        type: VK_SET_SELECTED_USER,\n        user\n    }\n}\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getUser = (id) => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            VKAPI.getUser(id)\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default vkReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Group, FormItem } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport { dateToString, timeToString } from '../../../../utils/convertors/dateUtils';\n\nconst schet = {\n    fontWeight: 'bold', \n    color: 'yellow',\n    backgroundColor: 'gray',\n    padding: '1px 7px',\n    borderRadius: '10px',\n}\n\nconst win = {\n    fontWeight: 'bold',\n    //color: 'orange',\n}\n\nconst lose = {\n    color: 'darkgray',\n    //color: 'orange',\n}\n\nconst MatchItem = (props) => {\n    \n    \n    let match=props.match;\n    let place=props.Place;\n    let date = new Date(match.When);\n\n    return (\n        <Group>\n            <FormItem top=\"Группа/лига\">\n                {match.TournamentGroup.Name}\n            </FormItem>\n            <FormItem top=\"Команда 1\">\n                {match.Team1.Name} {match.Team1Goals} : {match.Team2Goals} {match.Team2.Name}\n            </FormItem>\n            \n            <FormItem top=\"Дата\">\n                {new Date(match.When).toLocaleDateString()}\n            </FormItem>\n            \n            <FormItem top=\"Место\">\n                {match.Place.Name}\n            </FormItem>\n            <FormItem top=\"Матч сыгран\">\n                {match.Played}\n            </FormItem>\n            \n        </Group>\n    ) \n        // return (\n        //     <RichCell\n        //         onClick={props.ClickHandler}\n        //         caption={place ? place.Name : \"Ошибка загрузки данных о месте\"}\n        //         text={\n        //             match.Played ?\n        //                 <span style={{ \"color\": \"green\" }}>Сыгран <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span></span> :\n        //                 <span style={{ \"color\": \"blue\" }}>Состоится <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span> в {timeToString(date.getHours(), date.getMinutes())}</span>\n        //         }\n        //     >\n        //         {match.Played ? <span>\n        //                 <span \n        //                     style={(+match.Team1Goals > +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n        //                     >{match.Team1.Name} </span>\n        //                 <span style={schet}>{match.Team1Goals} - {match.Team2Goals}</span>\n        //                 <span \n        //                     style={(+match.Team1Goals < +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n        //                 > {match.Team2.Name}</span>\n        //             </span> :\n        //             <span>{match.Team1.Name} - {match.Team2.Name}</span>\n        //         }\n        //     </RichCell>\n//         )\n }\n\nexport default MatchItem","import bridge from '@vkontakte/vk-bridge';\nimport { Card, CardGrid, Epic, FormItem, Group, Header, InfoRow, List, Panel, PanelHeader, ScreenSpinner, Tabbar, Title, View } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport React, { useEffect, useState } from 'react';\nimport request from 'request'\nimport { connect } from 'react-redux';\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\nimport SimpleCollectItem from './components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem';\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\nimport Hot from './components/Panels/Common/Hot/Hot';\nimport CardWithHistory from './components/Panels/Common/WithHistory/CardWithHistory';\nimport CellButtonWithHistory from './components/Panels/Common/WithHistory/CellButtonWithHistory';\nimport RichCellWithHistory from './components/Panels/Common/WithHistory/RichCellWithHistory';\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\nimport ButtonWithNotify from './components/Panels/Common/WithNotify/ButtonWithNotify';\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\nimport player from './img/common/player300-s.png';\nimport stadium from './img/common/stadium300-s.png';\nimport tournament from './img/common/tournament300.png';\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity } from './store/bidTeamsReducer';\nimport { getAllCitiesFromServer } from './store/cityReducer';\nimport { getAllSimpleCollectsInCityByCityUmbracoId, selectSimpleCollect, setCollectItemMode } from './store/collectReducer';\nimport { setActiveMenuItem } from './store/mainMenuReducer';\nimport { getMatchesInCurrentCity, setHotPanel } from './store/matchReducer';\nimport { getAuthInfo, getUserProfile, setTriedToGetProfile, setUserProfileCity, setVkProfileInfo } from './store/profileReducer';\nimport { getAllRentsInCityByCityId } from './store/rentReducer';\nimport { getAllSimplePlacesInCityByCityId } from './store/simplePlaceReducer';\nimport { goToPanel, resetError, setCurrentModalWindow, setGlobalPopout, setLoading, setShowAdminTourneyTab } from './store/systemReducer';\nimport { getAllCityTournamentAdminsByCityId, getTournamentsByCityId, setSelectedTournament, setTournamentMode } from './store/tournamentsReducer';\nimport { getUser, setSelectedUser } from './store/vkReducer';\nimport { addToTime } from './utils/convertors/dateUtils';\nimport MatchItem from './components/Panels/AdminPanel/Match/MatchItem';\n\n\n\n\n\n\n\nconst App = (props) => {\n\tconst [fetchedUser, setUser] = useState(null);\n\t//const [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t//const [modalWindow, setModalWindow] = useState(null);\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\n\tconst [timerStarts, setTimerStarts] = useState(false);\n\tconst cardStyle = {\n\t\tposition: 'absolute', \n\t\tbottom: '0px', \n\t\tleft:'0px',  \n\t\twidth: '100%', \n\t\theight: '20%',\n\t\tbackground: 'white', \n\t\tpadding: '15px 0',\n\t\ttextAlign: 'center',\n\t\topacity: '0.9',\n\t\tborderRadius: '10px'\n\t}\n\n\t\n\n\tconst checkMovings = () => {\n\t\t//alert('Привет');\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\t\t\t{\n\t\t\t\t// получаем список простых мест по umbId города\n\t\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых сборов\n\t\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\t\n\t\t\t\t// получаем список аренд\n\t\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tconst CloseModal = () => {\n\t\tprops.resetError()\n\t\tprops.setCurrentModalWindow(null)\n\t}\n\n\t// загрузка информации о пользователе ВК\n\tasync function fetchData() {\n\n\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\tsetUser(user);\n\t\tprops.setVkProfileInfo(user);\n\t\tprops.getAllCitiesFromServer();\n\t}\n\n\t// это системное, загрузка приложения вк\n\tuseEffect(() => {\n\t\tif (props.myProfile && props.myProfile.CityUmbracoId != undefined){\n\t\t\tprops.setLoading(true);\n\t\t}\n\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\n\t\tfetchData();\n\n\t}, []);\n\n\n\t// загрузка мест, админов города, текущих турниров\n\tuseEffect(() => {\n\n\t\t// а это уже когда прогрузился и выбран город профиля\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\t\t\tprops.goToPanel(\"hot\", false)\n\n\t\t\t// получаем список админов турниров города по umbId города\n\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список активных турниров города по umbId города и текущей дате\n\t\t\tprops.getTournamentsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых мест по umbId города\n\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых сборов\n\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список аренд\n\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\tif (!timerStarts)\n\t\t\t{\n\t\t\t\tsetTimerStarts(true);\n\t\t\t\tsetTimeout(() => setInterval(() => checkMovings(), 30000), 5000)\n\t\t\t}\n\t\t}\n\n\t\t// это пока не прогрузился город профиля (не выбран)\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\n\t\t{\n\n\t\t\t// предлагаем выбрать город\n\t\t\tprops.setGlobalPopout(false);\n\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t}\n\n\n\t}, [props.myProfile, props.vkProfile, props.cities])\n\n\n\tuseEffect(() => {\n\t\tif (props.places && props.places.length > 0) {\n\n\t\t\tprops.getMatchesInCurrentCity(props.myProfile);\n\t\t\t\n\t\t\t// завершили загрузку\n\t\t\tif (props.Loading)\n\t\t\t\tprops.setLoading(false);\n\t\t}\n\t}, [props.places])\n\n\n\t// при смене глобального Popout и возникновении ошибки\n\tuseEffect(() => {\n\t\t//if (props.errorObject && props.errorObject.resultcode != 0)\n\t\tif (props.errorObject && props.errorObject != \"\") {\n\t\t\t//props.setCurrentModalWindow(<ModalCommon modalName=\"Error\" data={props.errorObject} Close={CloseModal}></ModalCommon>)\n\t\t}\n\t\telse {\n\t\t\t//setPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t\t}\n\t\t//}, [props.globalPopout, props.errorObject])\n\t}, [props.errorObject])\n\n\n\t// при загрузке профиля (по факту приложения)\n\tuseEffect(() => {\n\t\t// нужно узнать город, далее если этого города нет в списке поддерживаемых, предлжить выбрать другой город и отправить заявку на добавление города. Всё это в модалке\n\t\t// другой вопрос. если кто-то создает фейковый сбор, как гарантировать другим, что это не фейк?\n\t\t// ввести в рейтинг поле \"гарант сбора. если поступает жалоба на сбор (не было сбора), модератор засчитывает штрафной балл организатору\"\n\t\t// у людей, которые первый раз собирают, писать город из профиля, количество друзей и то, что человек еще не собирал ни разу, а значит может быть фейком\n\t\t// еще нужно запрашивать права на доступ к инфе: город, дата рождения, друзья, \n\t\t// а еще в бэке надо сделать так, чтобы записи в Leg и City не плодились, а искали соответствующие из умбрако и ставили их Id\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\n\t\t\tprops.getUserProfile(props.vkProfile);\n\t\t}\n\n\t}, [props.vkProfile])\n\n\n\t// регистрация пользователя\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\t\t\tif ((!props.myProfile) && (props.triedToGetProfile)) { // не зарегистрирован\n\t\t\t\tprops.getAuthInfo(props.vkProfile); // регаем\n\t\t\t}\n\t\t}\n\t}, [props.triedToGetProfile])\n\n\n\t// загрузка профиля\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\t\t\tif (props.myProfile) // зарегистрирован и получил данные\n\t\t\t{\n\t\t\t\t// если не год рождения скрыт настройками приватности и из-за этого при регистрации на бэкэнде дата рождения не определилась, \n\t\t\t\t// выводим окно выбора года рождения и после выбора правим его в профиле ВК\n\t\t\t\tif ((!props.vkProfile.bdate || props.vkProfile.bdate == null || props.vkProfile.bdate == undefined))\n\t\t\t\t{\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t\telse if ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() < 1920)) {\n\t\t\t\t\t\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirthYear\" data={props.vkProfile} action={props.setVkProfileInfo} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\t// после регистрации, загрузки новых данных с сервера и указания года рождения необходимо обновить данные на сервере\n\t\t\t\t\tif (new Date(props.myProfile.Birth).getFullYear() < 1920) {\n\t\t\t\t\t\tprops.getAuthInfo(props.vkProfile);\n\t\t\t\t\t}\n\t\t\t\t\telse { // если данные обновлены и все в порядке с профилями\n\t\t\t\t\t\tprops.setCurrentModalWindow(null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// поправка даты в vk профиле (правится, когда профиль грузится с бэкэнда без регистрации)\n\t\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() >= 1920)) {\n\t\t\t\t\t\tprops.setVkProfileInfo({ ...props.vkProfile, bdate: props.vkProfile.bdate + \".\" + new Date(props.myProfile.Birth).getFullYear().toString() })\n\t\t\t\t\t}\n\n\t\t\t\t\tif (props.myProfile.CityUmbracoId != null && props.myProfile.CityUmbracoId == -1) {\n\t\t\t\t\t\t//debugger\n\t\t\t\t\t\t// предлагаем выбрать город\n\t\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t\t}\n\n\n\t\t\t\t\t//props.getUser(19757699);\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t// if (props.myProfile.Name)\n\t\t// {\n\t\t// \tsetModalWindow(<ModalCommon modalName=\"MyProfile\" data={props.myProfile} Close={() => setModalWindow(null)}></ModalCommon>)\n\t\t// }\n\t}, [props.myProfile])\n\n\n\t// отобразить панель админа турниров\n\tuseEffect(() => {\n\t\t// если загрузились админы города\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\n\t\t\t// отображаем пункт меню администрирование турниров\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\n\t\t\t\tprops.setShowAdminTourneyTab(true)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.setShowAdminTourneyTab(false)\n\t\t\t}\n\t\t}\n\t}, [props.tournamentAdmins])\n\n\n\tconst TournamentSelect = (item) => {\n\t\t//debugger\n\t\tprops.setTournamentMode(\"view\");\n\t\tprops.setSelectedTournament(item);\n\t\t// надо заполнять TournamentGroups!\n\t\t//props.setActiveMenuItem(\"tournamentitem\"); // отключил, тк установил компонент hoc withHistory\n\t\t//toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\"\n\t}\n\n\tconst CollectSelect = (item) => {\n\t\t//debugger\n\t\tprops.selectSimpleCollect(item);\n\t\tprops.setCollectItemMode(\"view\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил тк использовал компонент с hoc withHistory\n\t}\n\n\n\tconst CollectAdd = () => {\n\t\t//debugger\n\t\tprops.setCollectItemMode(\"add\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил, тк сделал кнопку через hoc withHistory\n\t}\n\n\tconst UpdateFromServer = () => {\n\t\twindow.location.reload(true);\n\t}\n\n\tlet test = () => {\n\t\t\n\t\t\n\t}\n\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\n\t\tif (menuItem.enabled && menuItem.show)\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\n\t\telse\n\t\t\treturn null\n\t}\n\t).filter(i => i);\n\n\t//if ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\n\t//debugger\n\n\n\treturn (\n\n\t\t<Epic\n\t\t\tactiveStory={props.mainMenu.activeItem.name}\n\t\t\ttabbar={\n\t\t\t\t<Tabbar>\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\n\t\t\t\t\t{/* <TabbarItemWithHistory toMenuName=\"collectslist\" selected={\"collectslist\" === props.mainMenu.activeItem.name} data-story=\"collectslist\" text=\"Сборы\"></TabbarItemWithHistory> */}\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\n\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\n\t\t\t\t\t{\n\t\t\t\t\t//props.ShowAdminTeamTab \n\t\t\t\t\tprops.ShowAdminTourneyTab \n\t\t\t\t\t&& <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\n\t\t\t\t</Tabbar>}>\n\n\t\t\t<View id=\"hot\" \n\t\t\t//activePanel={props.matches.hotPanel} \n\t\t\tactivePanel=\"main\" \n\t\t\tmodal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader left={<BackButton isBack={true} />}>Горячее в городе</PanelHeader>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сервисы</Header>}>\n\t\t\t\t\t\t<CardGrid size=\"s\">\n\t\t\t\t\t\t\t<CardWithHistory\n\t\t\t\t\t\t\t\tdata-story=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttext=\"Перейти к турнирам\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttoMenuName=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t//handleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={tournament}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Турниры<br />города</span>\n\t\t\t\t\t\t\t</CardWithHistory>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={player}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t<Card onClick={test}>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={stadium}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Предстоящие матчи</Header>}>\n\t\t\t\t\t\t<Hot Name=\"Сегодня\" Matches={props.matches.hot.today}></Hot>\n\t\t\t\t\t\t<Hot Name=\"Завтра\" Matches={props.matches.hot.tomorrow}></Hot>\n\t\t\t\t\t\t\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сыграны вчера</Header>}>\n\t\t\t\t\t\t<Hot Matches={props.matches.hot.yesterday}></Hot>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t\n\t\t\t</View>\n\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tВсе турниры\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group header={<Header>Текущие турниры города</Header>}>\n\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprops.tournament.tournaments.map(t => {\n\n\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Founder.Name} ${t.Founder.Surname}`}\n\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.WhenBegin) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t`Стартует \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.WhenBegin).getDate() <= 9 ? \"0\" + (new Date(t.WhenBegin).getDate()) : (new Date(t.WhenBegin).getDate())}.${new Date(t.WhenBegin).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.WhenBegin).getMonth() + 1) : (new Date(t.WhenBegin).getMonth() + 1)}.${new Date(t.WhenBegin).getFullYear()}`\n\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"}\n\t\t\t\t\t\t\t\t\t\thandleClick={() => TournamentSelect(t)}\n\t\t\t\t\t\t\t\t\t\tdata-story=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\ttoMenuName=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t>{t.Name}</RichCellWithHistory>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden header={<Header>Архивные турниры города</Header>}>\n\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"collectslist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tВсе сборы\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t<CellButtonWithHistory\n\t\t\t\t\t\t\tdata-story=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\ttext=\"Создать сбор\" // необходимо для использования withHistory\n\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\thandleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tАрендовать площадку и собрать людей</CellButtonWithHistory>\n\t\t\t\t\t</FormItem>\n\t\t\t\t\t<Group header={<Header>Текущие сборы города</Header>}>\n\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tprops.collect.collects.sort((a, b) => new Date(a.When).getTime() - new Date(b.When).getTime())\n\t\t\t\t\t\t\t\t\t.map(t => {\n\t\t\t\t\t\t\t\t\t\tlet timeEnding = addToTime(new Date(t.When), 0, t.DurationMinutes);\n\n\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Creator.Name} ${t.Creator.Surname}`}\n\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.When) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t`Начало \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getDate() <= 9 ? \"0\" + (new Date(t.When).getDate()) : (new Date(t.When).getDate())}.${new Date(t.When).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.When).getMonth() + 1) : (new Date(t.When).getMonth() + 1)}.${new Date(t.When).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tв \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getHours() <= 9 ? \"0\" + (new Date(t.When).getHours()) : (new Date(t.When).getHours())}:${new Date(t.When).getMinutes() <= 9 ? \"0\" + (new Date(t.When).getMinutes()) : (new Date(t.When).getMinutes())}\n\t\t\t\t\t\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t((timeEnding > new Date())\n\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Закончен\"\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\thandleClick={() => CollectSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\tafter={`${t.Cost} руб.`}\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"\n\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"\n\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t({t.Members.length}/{t.NeedMembers}) - {t.Name}\n\t\t\t\t\t\t\t\t\t\t</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden header={<Header>Архивные сборы</Header>}>\n\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"collectadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tУправление сборами\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<SimpleCollectItem></SimpleCollectItem>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"profile\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tПрофиль\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <FormItem>\n\t\t\t\t\t\t<InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Город\">{props.myProfile && props.myProfile.CityName}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Год рождения\">{props.myProfile && new Date(props.myProfile.Birth).getFullYear()}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Город привязки\">{props.myProfile && props.myProfile.CityUmbracoName}</InfoRow>\n\t\t\t\t\t</FormItem>\n\t\t\t\t\t}\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden>\n\t\t\t\t\t\tОписание проекта, возможность написать автору, выбор амплуа, выбор уровня (не играл, новичек, город и тд)\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tСсылка на сайт и на канал на ютубе, где документация есть по проекту\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tсделать кнопку \"подписаться на уведомления\"\n\t\t\t\t\t\tзапросить разрешение на отправку сообщения от имени приложения (или сообщества?)\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header=\"Опции\">\n\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t<ButtonWithNotify Message=\"Подписаться на уведомления от сервиса?\" mode=\"primary\" Yes={() => bridge.send(\"VKWebAppAllowNotifications\")}>Подписаться на события</ButtonWithNotify>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\n\t\t\t\t\t</Group>\n\t\t\t\t\t<ProfilePanel></ProfilePanel>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tУправление турнирами\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tМои команды\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tТурнир\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TournamentItem\n\t\t\t\t\t\t\tmode={props.tournament.mode}\n\t\t\t\t\t\t//Tab=\"shedule\"\n\t\t\t\t\t\t//mode=\"view\"\n\t\t\t\t\t\t></TournamentItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tКоманда\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"matchitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tМатч\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<MatchItem match={props.matches.selected}></MatchItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tДоступно для заявки\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\n\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\n\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\n\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\n\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tИгрок\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\tИгрок\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"notauthorized\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<CardGrid size=\"l\">\n\t\t\t\t\t\t<Card style={{height: '100%'}}>\n\t\t\t\t\t\t\t<FormItem style={{height: '100px'}}>\n\t\t\t\t\t\t\t\t<span style={cardStyle}><Title>Вы не авторизованы</Title></span>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t</Card>\n\t\t\t\t\t</CardGrid>\n\t\t\t\t\t\n\t\t\t\t</Panel>\n\t\t\t\t\n\t\t\t</View>\n\n\n\t\t</Epic>\n\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\n\t\tCurrentModalWindow: state.system.CurrentModalWindow,\n\t\tLoading: state.system.Loading,\n\t\tcities: state.cityEntity.cities,\n\t\t//places: state.placeEntity.places,\n\t\tplaces: state.simplePlaceEntity.places,\n\t\tglobalPopout: state.system.GlobalPopout,\n\t\tvkProfile: state.profileEntity.vkProfile,\n\t\tmyProfile: state.profileEntity.myProfile,\n\t\terrorObject: state.system.ErrorObject,\n\t\t//`errorMessage: state.system.ErrorObject.message,\n\t\ttriedToGetProfile: state.profileEntity.triedToGetProfile,\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\n\t\ttournament: state.tournamentsEntity,\n\t\tcollect: state.collectEntity,\n\t\tteam: state.teamsEntity,\n\t\tbidTeams: state.bidTeamsEntity,\n\t\tmatches: state.matches,\n\t\ttournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, { \n\tsetCurrentModalWindow, setLoading, goToPanel,\n\tgetAllSimpleCollectsInCityByCityUmbracoId, getAllSimplePlacesInCityByCityId, getAllRentsInCityByCityId, getUser, setSelectedUser,\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity, getTournamentsByCityId, setSelectedTournament, setTournamentMode, setCollectItemMode,\n\tsetActiveMenuItem, setVkProfileInfo, setGlobalPopout, getUserProfile, getAuthInfo, setTriedToGetProfile, setHotPanel, resetError, selectSimpleCollect,\n\tgetAllCitiesFromServer, setUserProfileCity, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab, getMatchesInCurrentCity,\n})(App);\n","import { users } from \"./constants/commonConstants\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\n\nconst initState = {\n    users: [\n        users[0],\n        users[1],\n    ]\n}\n\n\nlet userReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\nexport const ampluaCathegoryTypes = [\n    {id: 0, name: \"Вратарь\"},\n    {id: 1, name: \"Защитник\"},\n    {id: 2, name: \"Полузащитник\"},\n    {id: 3, name: \"Нападающий\"},\n    {id: 4, name: \"Тренер\"},\n    {id: 5, name: \"Административный персонал\"},\n]\n\nexport const ampluaTypes = [\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n]\n\nconst initState = {\n\n}\n\n\nlet ampluaReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport profileReducer from './profileReducer.js'\nimport collectReducer from './collectReducer.js'\nimport userReducer from './userReducer.js'\nimport hot from './hotReducer.js'\nimport tournaments from './tournamentsReducer.js'\nimport teams from './teamsReducer.js'\nimport bidTeams from './bidTeamsReducer.js'\nimport ampluaReducer from './ampluaReducer.js'\n//import placeReducer from './placeReducer.js'\nimport rentReducer from './rentReducer.js'\nimport simplePlaceReducer from './simplePlaceReducer.js'\nimport paymentReducer from './paymentReducer.js'\nimport mainMenuReducer from './mainMenuReducer.js'\nimport systemReducer from './systemReducer.js'\nimport cityReducer from './cityReducer.js'\nimport matchReducer from './matchReducer.js'\nimport vkReducer from './vkReducer.js'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\n    }) : compose;\n\n\nlet reducers = combineReducers({\n    profileEntity: profileReducer,\n    collectEntity: collectReducer,\n    hotEntity: hot,\n    tournamentsEntity: tournaments,\n    teamsEntity: teams,\n    teamsEntity: teams,\n    bidTeamsEntity: bidTeams,\n    matches: matchReducer,\n    userEntity: userReducer,\n    cityEntity: cityReducer,\n    ampluaEntity: ampluaReducer,\n    //placeEntity: placeReducer,\n    rentEntity: rentReducer,\n    vkcom: vkReducer,\n    simplePlaceEntity: simplePlaceReducer,\n    paymentEntity: paymentReducer,\n    mainMenu: mainMenuReducer,\n    system: systemReducer,\n})\n\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\n// composeEnhancers(\n//     applyMiddleware(thunk))\n\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\nwindow.store = store;\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport store from './store/store'\nimport { Provider } from \"react-redux\";\nimport { AdaptivityProvider, AppRoot, ConfigProvider, usePlatform } from \"@vkontakte/vkui\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  </Provider>, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => { }); //runtime download\n}\n"],"sourceRoot":""}