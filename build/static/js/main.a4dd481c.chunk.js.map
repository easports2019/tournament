{"version":3,"sources":["store/selectors/selectors.js","components/Modals/ModalCommon/ModalCommon.jsx","img/common/defaultPlace.jpg","store/constants/commonConstants.js","utils/convertors/dateUtils.js","store/mainMenuReducer.js","utils/api/server.js","utils/api/api.js","store/systemReducer.js","store/collectReducer.js","store/rentReducer.js","store/simplePlaceReducer.js","components/Panels/Common/WithNotify/ButtonWithNotify.jsx","components/Panels/Common/HOCs/withNotify.jsx","components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/tournamentsReducer.js","store/teamsReducer.js","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","store/bidTeamsReducer.js","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","store/matchReducer.js","components/Panels/AdminPanel/Match/MatchListItem.jsx","components/Panels/Common/Shedule/Shedule.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/Hot/Hot.jsx","components/Panels/Common/WithHistory/CardWithHistory.jsx","components/Panels/Common/WithHistory/CellButtonWithHistory.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Panels/ProfilePanel/ProfilePanel.jsx","img/common/player300-s.png","img/common/stadium300-s.png","img/common/tournament300.png","store/profileReducer.js","store/cityReducer.js","store/groupReducer.js","store/vkReducer.js","components/Panels/AdminPanel/Match/MatchItem.jsx","components/Panels/Common/Search/SearchPanel.jsx","components/Panels/AdminPanel/Team/GroupAdminPanel.jsx","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["getCurrentExpirienceName","level","expirienceName","ModalCommon","props","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","selectedDate","setSelectedDate","useEffect","activeModal","modalName","id","header","data","title","mode","top","placeholder","onClose","Close","actions","size","onClick","message","Accept","Name","Surname","Birth","Register","City","icon","Icon","Message","action","bdate","isNaN","action2","onChange","e","currentTarget","value","options","start","count","current","result","push","Date","getFullYear","map","year","label","renderOption","option","restProps","split","length","undefined","min","day","month","max","onDateChange","profile","CityUmbracoId","style","color","CityName","cities","city","CityUmbracoName","currentDate","BidTeam","Id","AdminTournamentComment","TeamName","When","getDay","getMonth","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Year","WhenBegin","WhenEnd","Details","Reglament","MatchLength","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Photo","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","keys","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","Address","Stages","Parking","Worktime","BreakTimes","DressingRooms","Areas","Price","Enabled","Access","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","dateIsMin","date","dt","getDate","TimeIsNotAssigned","getHours","getMinutes","getSeconds","timeToString","hours","minutes","seconds","h","toString","m","s","dateTimeToTimeString","datetime","dateToString","newDate","args","dateOptions","weekday","datesWithoutTimeIsSame","addToDate","toLocaleString","addToTime","date1","date2","dateSelectorValueToJSDateValue","dsValue","jSDateValueToDateSelectorValue","jsDate","ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","name","position","enabled","show","activeItem","setActiveMenuItem","menuName","type","mainMenuReducer","state","find","it","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","resultcode","okObj","dat","VKAPI","get","then","ErrorMessage","catch","error","CityAPI","post","SimplePlaceAPI","cityId","startindex","formData","FormData","append","RentAPI","CollectAPI","userProfileId","simpleCollect","userProfile","JSON","stringify","simpleMember","reason","TeamAPI","teamId","ProfileAPI","vkUserData","vkUser","UTC","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","team","newgroup","oldgroup","userprofile","teamToSend","newgroupToSend","TournamentId","oldgroupToSend","newGroup","oldGroup","tournamentToSend","item","publish","tg","admintext","tournamentGroupToSend","tournamentGroup","tournamentGroupId","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllInCityByUserProfile","getAllByAdminProfileId","saveTeam","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","tournamentgroup","teamName","bidTeamToTournament","MatchAPI","matchInfo","match","groupId","grTeam","groupTeam","TournamentAPI","tournamentId","ServiceAPI","GroupAPI","ANY_ACTION_TYPE","SYSTEM_SET_LOADING","SYSTEM_CHECK_LOADING","SYSTEM_SET_CONNECTED","SYSTEM_SET_DISCONNECTED","SYSTEM_PUSH_TO_HISTORY","SYSTEM_SET_CURRENT_MODAL_WINDOW","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","SYSTEM_SET_SHOW_GROUP_TAB","SYSTEM_SET_OBLAKO_PROFILE_LOADED","SYSTEM_SET_VK_PROFILE_LOADED","SYSTEM_SET_VK_PROFILE_BIRTH_DATE_LOADED","SYSTEM_SET_VK_PROFILE_BIRTH_YEAR_LOADED","SYSTEM_SET_VK_PROFILE_CITY_LOADED","SYSTEM_SET_TRIED_TO_LOAD_OBLAKO_PROFILE","SYSTEM_SET_TRIED_TO_LOAD_VK_PROFILE","currentMenu","Connected","VkProfileLoaded","VkProfileBirthDateLoaded","VkProfileBirthYearLoaded","VkProfileCityLoaded","OblakoProfileLoaded","TriedToLoadVkProfile","TriedToLoadOblakoProfile","history","GlobalPopout","CurrentModalWindow","ErrorObject","ShowAdminTourneyTab","ShowAdminTeamTab","ShowGroupTab","Loading","CheckLoading","setTriedToLoadOblakoProfile","tried","setTriedToLoadVkProfile","setOblakoProfileLoaded","loaded","setGlobalPopout","on","setCurrentModalWindow","modal","setErrorMessage","errorMessage","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","val","pushToHistory","systemReducer","loading","slice","showAdminTourneyTab","showGroupTab","COLLECTS_SET_ALL_SIMPLE_COLLECTS","COLLECTS_SELECT_SIMPLE_COLLECT","COLLECTS_SET_COLLECT_ITEM_MODE","COLLECTS_DEL_SIMPLE_COLLECT","COLLECTS_ADD_SIMPLE_COLLECT","COLLECTS_SET_SIMPLE_COLLECT","COLLECTS_SET_SELECTED_COLLECT_MEMBERS","COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS","COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT","prototype","addDays","days","this","setDate","collects","selected","setAllSimpleCollects","simplecollects","deleteMemberFromSimpleCollect","member","addMemberToSelectedSimpleCollect","setCollectItemMode","delSimpleCollect","collect","addSimpleCollect","setSimpleCollect","collectReducer","simplecollect","Members","members","col","res","filter","demoRents","RENTS_SET_RENTS","RENTS_SET_SELECTED_RENT","rents","selectedRent","selectedDayRents","setRents","rentReducer","r","From","rentDate","SimplePlaceId","simplePlaceId","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","PLACES_SET_SELECTED_PLACE","places","selectedPlace","setPlaces","simplePlaceReducer","x","placeId","withNotify","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","AcceptAndClose","Yes","evt","handleClick","prevProps","prevState","React","Component","connect","collectEntity","simplePlace","simplePlaceEntity","rentEntity","rent","myProfile","profileEntity","DeleteMemberFromCollect","pl","setSelectedSimplePlace","setSelectedRent","AddSimpleCollect","registerMemberToSimpleCollect","DelSimpleCollect","EditSimpleCollect","setSelectedMembers","workoutSelector","ranges","minutesOneSlot","workoutColNumber","useAdaptivity","viewWidth","acceptBeMember","setAcceptBeMember","showPanelBeMember","setShowPanelBeMember","showCancelMemberForm","setShowCancelMemberForm","cancelReason","setCancelReason","details","setDetails","collectType","setCollectType","needMembers","setNeedMembers","costMembers","setCostMembers","costAll","setCostAll","plus","setPlus","Array","selectedSlots","setSelectedSlots","selectedTimeRanges","vkids","UserVkId","photo","bridge","send","access_token","us","response","p","PhotoPath","youAreMember","youAreOrganizer","CreatorId","simplePlaces","changeCollectType","selectSlot","tmpSelectedSlot","ss","Hours","Minutes","sort","a","b","gotoProfile","profileId","open","calculateNeedMembers","need","Math","round","calculateCostMembers","membercost","worktimeSlots","wt","selectedDT","from","FromTime","ToTime","valueOf","fromTmp","slotsNumber","numberOfCols","numberOfRows","trunc","slots","slotsInHour","startHour","oneSlotMinutes","SlotMinutes","PricePerSlot","Selected","Rented","timeSlotsForSimpleCollects","iButtons","slot","slotCurrentIndex","forEach","worktimeSlot","curentWorktimeSlotFromTime","curentWorktimeSlotToTime","currentSlotTime","Breaks","brek","to","brekTime","rnt","rentTime","isArray","slt","selectedTime","CostPerHour","reduce","acc","cur","costall","costMem","calculateCostAll","splitCols","sCol","j","width","tr","until","caption","disabled","NeedMembers","Cost","Creator","before","src","memberUserProfile","SimpleCollectId","deleteMember","defaultValue","FullPrice","Checkbox","checked","changePlace","place","changeDate","description","bottom","withHistorySave","toMenuName","isBack","TeamAdminList","List","multiline","Button2Handle","after","CellClick","data-story","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_MY_ADD_OR_EDIT","TOURNAMENT_SET_TOURNAMENTGROUPS","TOURNAMENT_SET_TOURNAMENTTEAMS","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_MATCH_LENGTH","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","TOURNAMENT_SET_ORGANIZATOR_NAME","TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT","TOURNAMENT_SET_LINK","TOURNAMENT_SET_LINK2","TOURNAMENT_SET_LINK2NAME","TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES","emptyTournament","tournaments","bidsNew","selectedForView","selectedTables","myTournaments","cityTournamentAdmins","setTournaments","setTournamentTables","tables","setMyTournament","mytournament","addOrEditTournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","setSelectedTournamentGroups","groups","setTournamentTeams","bidsWithTeamsAndGroups","delGroupFromTournamentByKeyId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","deleteTournament","getTournamentTeams","getMyTournaments","tournamentReducer","tour","KeyId","newTourn","t","OrganizatorName","OrganizatorNameShort","Link","Link2","Link2Name","newTGroups","Teams","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","mainMenu","tournamentsEntity","teamsEntity","Button1Handle","publishTeam","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","ListItem","removable","onRemove","Delete","BidList","trim","Tournament","Founder","BidTeamTournamentList","Bids","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","SelectedName","bidSelectMode","cityEntity","getTournamentGroups","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","SaveTeam","TournamentAdminList","BidListItem","adminText","setAdminText","Item","Decline","MATCH_SET_ALL_MATCHES","MATCH_SET_ALL_MATCHES_SELECTED_TEAM","MATCH_DEL_MATCH","MATCH_SET_SELECTED","MATCH_ADD_MATCH","MATCH_SET_HOT_MATCHES","MATCH_SET_ACCESS","MATCH_SET_MODE","MATCH_SET_PLAYED","MATCH_SET_HOT_PANEL","matches","matchesBySelectedTeam","hot","yesterday","today","tomorrow","hotPanel","access","setAllMatches","setAllMatchesBySelectedTeam","setHotMatches","delMatch","addMatch","setAccess","setMode","setSelectedMatch","getAllMatchesByTournament","addMatchToShedule","Number","delMatchFromShedule","matchReducer","tomorrow_begin","tomorrow_end","st","played","panelName","lose","maxWidth","padding","overflow","display","fontSize","win","fontWeight","draw","schet_base","margin","borderRadius","schet","backgroundColor","noschet","MatchListItem","Match","now","endOfMatch","timeString","inGame","ClickHandler","gradientColor","calcInitialsAvatarColor","Played","Team1Goals","Team2Goals","Team1Bid","Team2Bid","optMaker","todayIs","makeZeroBefore","g","UmbracoId","teamGoals","selectedTournamentGroup","setSelectedTournamentGroup","selectedTournamentGroupTeamList","setSelectedTournamentGroupTeamList","selectedTeam1","setSelectedTeam1","selectedTeam2","setSelectedTeam2","setSelectedBidTeam1ToTournament","setSelectedBidTeam2ToTournament","selectedTeam1Goals","setTeam1Goals","selectedTeam2Goals","setTeam2Goals","setSelectedPlace","selectedDescription","setSelectedDescription","selectedId","setSelectedId","selectedPlayed","setSelectedPlayed","selectedHour","setSelectedHour","selectedMinute","setSelectedMinute","timeIsNotAssigned","setTimeIsNotAssigned","dateIsNotAssigned","setDateIsNotAssigned","getGroup","changeGroup","league_id","allMatchesInAllGroups","editId","PlaceId","Team1Id","Team2Id","Description","BidTeamToTournamentId1","BidTeamToTournamentId2","changeTimeIsNotAssigned","assigned","changeDateIsNotAssigned","groupAndMatchesItem","prev","next","Team1BidId","Team2BidId","Team1","Team2","goToEditMatch","otherProps","delCurrentMatch","align","goToViewMatch","toLocaleDateString","w7percent","textAlign","w8percent","w20percent","TournamentTables","setTournamentOrganizatorName","setTournamentLink","setTournamentLink2","setTournamentOrganizatorNameShort","setTournamentLink2Name","replaceTeam","tOldGoup","tNewGroup","tGoup","getTeamInfo","changeTournamentTeamBidTournamentGroup","deleteTeamFromTournament","setTournamentMatchLength","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","getTournamentTablesByTournamentId","tempGroupName","setTempGroupName","Tab","currentTab","setCurrentTab","activePopout","setActivePopout","CardResultStyle","height","justifyContent","alignItems","flexWrap","CardStyle","alignSelf","alignContent","subCardStyle","flexDirection","AcceptBid","DeclineBid","SetPopup","oldTg","iosCloseItem","autoclose","newTg","SelectTournamentGroup","weight","target","href","popout","activePanel","table","tT","firstItem","secondItem","chet","row","Games","Wins","Loses","Draws","GoalsScored","GoalsMissed","GoalsDifference","Points","keyId","DeleteTeam","ProfilePanel","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_MY_TOTAL_EXP","PROFILE_SET_MY_NAME","PROFILE_SET_MY_BIRTH","PROFILE_SET_MY_SURNAME","PROFILE_SET_USER_IS_GROUP_ADMIN","PROFILE_SET_USER_IS_FIRST_START","vkProfile","isGroupAdmin","isFirstStart","setVkProfileInfo","setUserProfile","profileReducer","birth","getYear","isAdmin","TotalExpirience","exp","surname","birthDate","CITY_GET_ALL_FROM_SERVER","cityReducer","GROUP_SET_GROUP_TEAM","GROUP_SET_GROUP","GroupId","IsTournament","setGroupTeam","isOrg","connectTeamWithGroup","IsOranizator","TournamnentId","groupReducer","VK_SET_SELECTED_USER","selectedUser","vkReducer","MatchItem","time","centering","readOnly","minHeight","SimpleSearch","searchWord","setSearchWord","resultArray","setResultArray","toLowerCase","indexOf","ActionOnSelect","groupEntity","UserIsGroupAdmin","matchesByTeam","getTeamsInCity","showSearch","setShowSearch","SetOurTeam","click","errorObject","globalPopout","OblakoProfileBirthDateLoaded","OblakoProfileCityLoaded","appIsFirstStart","tournamentAdmins","setGroup","setBirthDate","setShowGroupTab","getGroupTeamInfo","setUserIsGroupAdmin","getTeamSheduleByTeamId","setLoading","checkConnection","updateLoading","saveUserProfile","ProfileInfo","setUserName","setUserSurName","setMyTotalExpirience","getAllSimpleCollectsInCityByCityUmbracoId","getAllSimplePlacesInCityByCityId","getAllRentsInCityByCityId","getUser","setSelectedUser","getTournamentsByCityId","cityUmbId","setVkProfileInfoAndSetFlags","setVkProfileBirthDateLoaded","setVkProfileCityLoaded","setVkProfileLoaded","getUserProfile","registerUser","vkProfileInfo","setHotPanel","selectSimpleCollect","getAllCitiesFromServer","setUserProfileCity","setOblakoProfileCityLoaded","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","getMatchesInCurrentCity","setLaunchParams","setGroupInfo","isFetching","setIsFetching","snackBar","setSnackBar","timerStarts","setTimerStarts","connectionTimer","cardStyle","left","background","document","documentElement","clientWidth","opacity","addToCommunity","layout","fill","consoleLog","vk_viewer_group_role","vk_group_id","info","subscribe","detail","schemeAttribute","createAttribute","scheme","body","attributes","setNamedItem","fetchData","setInterval","ii","store","clearInterval","CheckConnection","setTimeout","filtredTournaments","TournamentSelect","menuItem","onRefresh","reload","activeStory","tabbar","player","stadium","lineHeight","hidden","getTime","timeEnding","group_id","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","hotEntity","paymentReducer","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","appearance","getElementById"],"mappings":"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","file":"static/js/main.a4dd481c.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\"\n\nexport const useIsConnected = () => {\n    debugger\n    let connected = useSelector(state => state.system.Connected)\n    return connected;\n    //const count = useSelector(state => state.counter.count)\n  }\n\n\nexport const getCurrentExpirienceName = (level) => {\n  let expirienceName = \"Никогда не играл в футбол\";\n\n  if (level == 0){\n    expirienceName = \"Новичок. Никогда не играл ранее\";\n  } \n  else if (level > 10 && level <= 20){\n    expirienceName = \"Новичок. Только начинаю играть\";\n  }  \n  else if (level > 20 && level <= 30){\n    expirienceName = \"Новичок. Не испорчу игру начинающим командам\";\n  }  \n  else if (level > 30 && level <= 40){\n    expirienceName = \"Любитель. Выхожу на замену в матчах городских турниров\";\n  }  \n  else if (level > 40 && level <= 50){\n    expirienceName = \"Любитель. Первые успехи, подаю надежды\";\n  }  \n  else if (level > 50 && level <= 60){\n    expirienceName = \"Любитель. Востребован у команд региона\";\n  }  \n  else if (level > 60 && level <= 70){\n    expirienceName = \"Любитель. Средний уровень игры для большинства команд региона\";\n  }  \n  else if (level > 70 && level <= 80){\n    expirienceName = \"Любитель. Регулярный выход в основном составе большинства команд региона\";\n  }  \n  else if (level > 80 && level <= 90){\n    expirienceName = \"Любитель. Регулярный выход в основном составе ТОП-команд региона\";\n  }  \n  else if (level > 90 && level <= 95){\n    expirienceName = \"Полупрофессионал, опыт игр на межрегиональном уровне\";\n  }  \n  else if (level > 95){\n    expirienceName = \"Профессиональный футболист с действующим контрактом\";\n  }  \n\n  return expirienceName;\n}","import React, { useState, useEffect } from 'react';\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input, DatePicker } from '@vkontakte/vkui'\n\n\n\nlet ModalCommon = (props) => {\n    // при первом запуске подгрузить города\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\n    let [selectedDate, setSelectedDate] = useState(\"\")\n    let [bidCity, setBidCity] = useState(\"\")\n\n\tuseEffect(() => {\n\t\t// загрузка городов здесь\n\t\t\n    }, [])\n    \n    const setDate = (value) => {\n        setSelectedDate(`${value.day}.${value.month}.${value.year}`)\n    }\n    \n    const saveDate = () => {\n        debugger\n        if (selectedDate && (selectedDate.split('.').length > 2) && (+selectedDate.split('.')[2] > 1920)){\n            props.action({...props.data, bdate: selectedDate != \"\" ? selectedDate : undefined})\n            props.action2(2);\n        }\n    }\n    \n    const saveCity = () => {\n        debugger\n        if (selectedCity && selectedCity >= 0){\n            props.action({...props.data.profile, CityUmbracoId: selectedCity})\n            props.Close();\n        }\n    }\n    \n    const saveYear = () => {\n        debugger\n        if (selectedYear && selectedYear > 0)\n        {\n            props.action(\n                {...props.data, \n                    bdate: props.data.bdate && props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)});\n            props.action2(2);\n        }\n    }\n\n\n    return (\n        <ModalRoot activeModal={props.modalName}>\n            <ModalPage id=\"CitySelect\"\n                header={\n                <ModalPageHeader>\n                \n              </ModalPageHeader>\n            }\n          >\n                <Group>\n                    <InfoRow>\n                        Ваш город определен как: {props.data.title}\n                    </InfoRow>\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\n                    <InfoRow top=\"Город\">            \n                        <SelectMimicry placeholder=\"Выбрать город\" />\n                    </InfoRow>\n                </Group>    \n            </ModalPage>\n\n            <ModalCard id=\"Error\"\n                onClose={props.Close}\n                //header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\n                header={props.data ? props.data : \"Произошла неизвестная ошибка\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard id=\"AreYouSure\"\n                onClose={props.Close}\n                header={props.data.message ? props.data.message : \"Текст вопроса не передан\"}\n                actions={\n                    <>\n                    <Button size=\"l\" mode=\"destructive\" onClick={props.Accept}>Да</Button>\n                    <Button size=\"l\" mode=\"secondary\" onClick={props.Close}>Нет</Button>\n                </>\n            }\n                >\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard id=\"MyProfile\"\n                onClose={props.Close}\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n                    {\n                        (props.data) ?\n                        `Имя: ${props.data.Name && props.data.Name} \\r\\n\n                        Фамилия: ${props.data.Surname && props.data.Surname} \\r\\n\n                        Дата рождения: ${props.data.Birth && props.data.Birth} \\r\\n\n                        Зарегистрирован: ${props.data.Register && props.data.Register} \\r\\n\n                        Город: ${props.data.City && props.data.City.Name && props.data.City.Name}\n                        ` : \"\"\n                    }\n            </ModalCard>\n\n            <ModalCard id=\"Info\"\n                onClose={props.Close}\n                icon={props.Icon && props.Icon}\n                header={(props.data && props.data.Name) ? props.data.Name : \"Имя не прогрузилось\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n                    {\n                        (props.data && props.data.Message) ?\n                        props.data.Message\n                         : \"\"\n                    }\n            </ModalCard>\n            \n            <ModalCard id=\"SelectBirthYear\"\n                // onClose={props.Close}\n                header=\"Укажите Ваш год рождения\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={saveYear}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow>\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Год рождения\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            \n            <ModalCard id=\"SelectBirth\"\n                // onClose={props.Close}\n                header=\"Укажите дату вашего рождения\"\n                actions={\n                <Button size=\"l\" mode=\"primary\" \n                onClick={saveDate}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow>\n                            Дату рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальную дату вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Дата рождения\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 100 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear()}}\n                                    //defaultValue={props.tournaments.selected.WhenEnd}\n\n                                    onDateChange={(e) => setDate(e)}\n                                ></DatePicker>            \n                            {/* <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                /> */}\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            \n            <ModalCard id=\"SelectCity\"\n                // onClose={props.Close}\n                header=\"Выберите город\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => saveCity()}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Город не найден\">\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \n                                Выберите из списка ближайший к вам город, за спортивной жизнью которого вы будете следить.\n                            </InfoRow>\n                            <FormItem top=\"Город\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedCity(+e.currentTarget.value)\n                                    }}\n                                options={props.data.cities && props.data.cities.map(city => {\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\n                                }\n                                )}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                        {/* <InfoRow>или</InfoRow>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Укажите название вашего города\">\n                                Оставьте заявку администратору на добавление Вашего города в систему\n                            </InfoRow>\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\n                        </FormLayoutGroup> */}\n                    </FormLayout>\n            </ModalCard>\n      </ModalRoot>\n    )\n}\n\n\nexport default ModalCommon","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","const currentDate = new Date();\n\n\n// таймслотов в одном часе\nexport const timeSlotsInOneHour = () => {\n    return +2\n}\n\nexport const getMaxNumberOfMembersInCollect = () => {\n    return +30\n}\n\nexport const getMinNumberOfMembersInCollect = () => {\n    return +2\n}\n\nexport const accessTypes = [\n    {Id: 0, Name: \"public\"},\n    {Id: 1, Name: \"private\"},\n    {Id: 2, Name: \"moderate\"},\n]\n\n// тип участия в сборе\nexport const memberingCollectTypes = {\n    Invite: 0, // приглашен\n    Member: 1, // уже подтвержден (участник)\n    Organizator: 2, // организатор\n    Participate: 3, // попросился\n    All: 4, // без фильтрации, все сборы\n}\n\nexport const cityTournamentAdmins = \n[\n    {\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \n    },\n]\n\nexport const Collect = {\n    collects: [],\n    selected: {\n        selected: {\n            Id: 6,\n            Name: 'Тестовый сбор',\n            When: '2021-09-09T17:40:00',\n            DurationMinutes: 90,\n            Details: 'Сбор в 10:30',\n            Comment: 'Верхнее поле',\n            Cost: 2500,\n            NeedMembers: 15,\n            PlaceId: 1,\n            Place: {\n              Id: 1,\n              Name: 'Стадион Динамо верхнее поле',\n              Info: 'Половина поля',\n              SimpleCityId: 3,\n              City: null,\n              Address: 'бульвар Петрковский',\n              Geo: '57.754071, 40.963803',\n              MainPicture: null,\n              Parking: true,\n              BicycleParking: false,\n              Enabled: true,\n              UmbracoId: 0,\n              Worktime: [],\n              ErrorMessage: null,\n              Published: true,\n              Deleted: false\n            },\n            CreatorId: 63,\n            Creator: {\n              CityUmbracoName: 'Кострома',\n              Name: 'Даниил',\n              Surname: 'Каверзин',\n              CityVkId: 1809,\n              UserProfileId: 63,\n              UserVkId: 'id136649652',\n              LastOnline: '2021-05-25T10:35:25',\n              Birth: '2001-06-04T00:00:00',\n              PhotoPath: ''\n            },\n            Members: [\n              {\n                Id: 1,\n                SimpleCollect: {\n                  Id: 6,\n                  Name: 'Тестовый сбор',\n                  When: '2021-09-09T17:40:00',\n                  DurationMinutes: 90,\n                  Details: 'Сбор в 10:30',\n                  Comment: 'Верхнее поле',\n                  Cost: 2500,\n                  NeedMembers: 15,\n                  SimplePlaceId: 1,\n                  SimplePlace: {\n                    Id: 1,\n                    Name: 'Стадион Динамо верхнее поле',\n                    Info: 'Половина поля',\n                    SimpleCityId: 3,\n                    City: null,\n                    Address: 'бульвар Петрковский',\n                    Geo: '57.754071, 40.963803',\n                    MainPicture: null,\n                    Parking: true,\n                    BicycleParking: false,\n                    Enabled: true,\n                    UmbracoId: 0,\n                    Worktime: [],\n                    ErrorMessage: null,\n                    Published: true,\n                    Deleted: false\n                  },\n                  CreatorId: 63,\n                  Creator: {\n                    UserProfileId: 63,\n                    UserVkId: 'id136649652',\n                    Name: 'Даниил',\n                    Surname: 'Каверзин',\n                    Fathername: null,\n                    Birth: '2001-06-04T00:00:00',\n                    Register: '2021-05-25T10:02:38',\n                    LastOnline: '2021-05-25T10:35:25',\n                    Height: 0,\n                    Weight: 0,\n                    PhotoPath: '',\n                    CityVkId: 1809,\n                    CityName: 'Ленинск-Кузнецкий',\n                    CityUmbracoId: 1080,\n                    CityUmbracoName: 'Кострома',\n                    LegId: -1,\n                    AmpluaId: -1,\n                    LastIp: '81.177.24.37',\n                    SimpleCollects: [],\n                    SimpleUserMessages: [],\n                    SimpleMembers: [],\n                    Citys: null,\n                    Tournaments: [],\n                    Ampluas: null,\n                    Legs: null,\n                    Admins: [],\n                    CityTournamentAdmins: [],\n                    ErrorMessage: '',\n                    Published: false,\n                    Deleted: false\n                  },\n                  SimpleMembers: [],\n                  ErrorMessage: null,\n                  Published: false,\n                  Deleted: false\n                },\n                SimpleCollectId: 6,\n                UserProfile: {\n                  UserProfileId: 63,\n                  UserVkId: 'id136649652',\n                  Name: 'Даниил',\n                  Surname: 'Каверзин',\n                  Fathername: null,\n                  Birth: '2001-06-04T00:00:00',\n                  Register: '2021-05-25T10:02:38',\n                  LastOnline: '2021-05-25T10:35:25',\n                  Height: 0,\n                  Weight: 0,\n                  PhotoPath: '',\n                  CityVkId: 1809,\n                  CityName: 'Ленинск-Кузнецкий',\n                  CityUmbracoId: 1080,\n                  CityUmbracoName: 'Кострома',\n                  LegId: -1,\n                  AmpluaId: -1,\n                  LastIp: '81.177.24.37',\n                  SimpleCollects: [],\n                  SimpleUserMessages: [],\n                  SimpleMembers: [],\n                  Citys: null,\n                  Tournaments: [],\n                  Ampluas: null,\n                  Legs: null,\n                  Admins: [],\n                  CityTournamentAdmins: [],\n                  ErrorMessage: '',\n                  Published: false,\n                  Deleted: false\n                },\n                UserProfileId: 63\n              },\n            ]\n          }\n    }\n}\n\nexport const TeamAdmins = \n[\n    {\n        Id : 0,\n        Name: \"Тестовая команда\",\n        Year: 2021,\n        WhenBorn: {day: 1, month: 2, year: 2021},\n        Details: \"Системная\",\n        Logo: \"\",\n        CityId: -1,\n        TournamentGroups: [], \n        Admins: [],\n        Matches: [],\n        Players: [],\n        Published: true,\n        Deleted: false,\n    },\n]\n\nexport const BidTeam = {\n    Id: -1,\n    AdminTournamentComment: \"\",\n    TeamName: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TeamId: -1, \n    Team: [],\n    TournamentGroupId: -1,\n    TournamentGroup: [],\n    UserProfileId: -1,\n    UserProfile: {},\n    Approved: false,\n    Deleted: false,\n    Published: false,\n\n}\n\nexport const Match = {\n    Id: -1,\n    Name: \"Матч\",\n    Description: \"Описание матча\",\n    Picture: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TournamentGroup: {},\n    TournamentGroupId: -1,\n    Place: {},\n    PlaceId: -1,\n    Team1: {},\n    Team1Id: -1,\n    Team2: {},\n    Team2Id: -1,\n    Team1Bid: {},\n    Team1BidId: -1,\n    Team2Bid: {},\n    Team2BidId: -1,\n    Team1Goals: 0,\n    Team2Goals: 0,\n    MatchEvents: [],\n    Deleted: false,\n    Published: false,\n    ErrorMessage: \"\",\n\n}\n\nexport const EmptyTournament = {\n    Id : -1,\n    Name: \"\",\n    Year: 0,\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    Details: \"\",\n    Reglament: \"\", \n    MatchLength: 60,\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [], \n    Admins: [],\n    Published: false,\n    Deleted: false,\n}\n\n\nexport const geo = {\n    Cities: [\n        {\n            Id: 0,\n            Name: \"Кострома\",\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\n            Population: 250000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n        {\n            Id: 1,\n            Name: \"Иваново\",\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\n            Population: 800000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n    ],\n    Owners: [\n        {\n            Id: 0, \n            Name: \"Владелец 1\",\n        },\n        {\n            Id: 1, \n            Name: \"Владелец 2\",\n        }\n    ],\n}\n\nexport const simplePlaces =  []\n\nexport const rents =  []\n\n\nexport const places =  [\n        {\n            PlaceId: 0,\n            Name: \"Динамо\", /* placename*/\n            get Owner() { return geo.Owners[0]},\n            set Owner(val) { geo.Owners[0] = val},\n            get City() { return geo.Cities[0]},\n            set City(val) { geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\n            Geo: \"\",\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\n            DressingRooms: [\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\n            ],\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\n            Enabled: true,\n            Access: {},\n            \n        },\n        {\n            PlaceId: 1,\n            Name: \"МЧС\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        },\n        {   \n            PlaceId: 2,\n            Name: \"КГТУ\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        }\n    ]\n\n    export const ampluaCathegoryTypes = [\n        {Id: 0, Name: \"Вратарь\"},\n        {Id: 1, Name: \"Защитник\"},\n        {Id: 2, Name: \"Полузащитник\"},\n        {Id: 3, Name: \"Нападающий\"},\n        {Id: 4, Name: \"Тренер\"},\n        {Id: 5, Name: \"Административный персонал\"},\n        {Id: 6, Name: \"Игрок\"},\n    ]\n     \n    export const ampluaTypes = [\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\n    ]\n\n\nexport const users = [\n    {\n        Id: 0,\n        FirstName: \"Александр\",\n        SurName: \"Смирнов\",\n        FatherName: \"Евгеньевич\",\n        NickName: \"easports\",\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\n        Datebirth: new Date(\"05.29.1987\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n                Stamina: 100, // выносливость\n                Feints: 100, // финты\n                Reaction: 100, // реакция\n                ScoringFlair: 100, // голевое чутье\n                Intellect: 100, // ум\n                Rejection: 100, // отбор мяча\n                SlideEffect: 100, // игра в подкате\n                Header: 100, // игра головой\n                Creativity: 100, // креативность\n                Dribble: 100, // дрибблинг\n                Opening: 100, // открывание под пас\n                Charisma: 100, // харизма\n                BallTaking: 100, // прием мяча\n                FieldVision: 100, // видение поля\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n        },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 1,\n        FirstName: \"Евгений\",\n        SurName: \"Иванов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"eivanov\",\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\n        Datebirth: new Date(\"28.02.1983\"),\n        Leg: 1, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 2,\n        FirstName: \"Фёдор\",\n        SurName: \"Смолов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"fsmolov\",\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\n        Datebirth: new Date(\"01.01.1989\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n]\n\nexport const myProfile = {\n    myProfile: users[0],\n}\n\n\nexport class commonUtils  {\n\n    static deepClone = (obj) => {\n        const clObj = {};\n        for(const i in obj) {\n            if (obj[i] instanceof Object) {\n                clObj[i] = this.deepClone(obj[i]);\n                continue;\n            }\n            clObj[i] = obj[i];\n        }\n        return clObj;\n    }\n\n    static copyCity = (city_source) => {\n        return city_source;\n    }\n\n    static copyAmplua = (amplua_source) => {\n        return amplua_source\n    }\n\n    static copyKeyFunction = (keyFunction_source) => {\n        return keyFunction_source\n    }\n\n    static copyUser = (user_source) => {\n        if (user_source == undefined || Object.keys(user_source).length === 0)\n            return undefined\n\n        return {\n            Id: user_source.Id,\n            FirstName: user_source.FirstName,\n            SurName: user_source.SurName,\n            FatherName: user_source.FatherName,\n            NickName: user_source.NickName,\n            Datebirth: user_source.Datebirth,\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\n            CityNow: { ...this.copyCity(user_source.CityNow) },\n            Level: {...user_source.Level\n            },\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\n            Injury: {...user_source.Injury},\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n        }\n            \n    }\n\n    static copyOwner = (owner_source) => {\n        return {...owner_source}\n    }\n    \n    static copyAccess = (access_source) => {\n        return {...access_source}\n    }\n\n    static copyPlace = (place_source) => {\n        \n        if (place_source == undefined || Object.keys(place_source).length === 0)\n            return undefined\n\n        return {\n            Id: place_source.Id,\n            Name: place_source.Name,\n            Owner: {...this.copyOwner(place_source.Owner)},\n            City: {...this.copyCity(place_source.City)},\n            Address: {...place_source.Address},\n            Geo: {...place_source.Geo},\n            Photo: [...place_source.Photo],\n            Stages: place_source.Stages,\n            Parking: place_source.Parking,\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\n            DressingRooms: [...place_source.DressingRooms],\n            Areas: [...place_source.Areas],\n            Price: place_source.Price, // цена за час занятий\n            Enabled: place_source.Enabled,\n            Access: {...this.copyAccess(place_source.Access)},\n        }\n    }\n\n    static copyCollect = (collect_source) => {\n        \n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \n            return undefined\n\n        return {\n            Id: collect_source.Id,\n            Place: this.copyPlace(collect_source.Place),\n            Date: collect_source.Date,\n            Hour: collect_source.Hour,\n            Minute: collect_source.Minute,\n            DurationMinutes: collect_source.DurationMinutes,\n            Price: collect_source.Price, // цена за весь период\n            Options: [...collect_source.Options],\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\n            /*\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\n\n            */\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\n            return {\n                Id: uGroup.Id,\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\n                NumberOf: uGroup.NumberOf,  // количество участников \n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \n                    {\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\n                    }): \n                [{}])],\n                Price: uGroup.Price,\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\n            }\n        })],\n            UsersInvited: [\n                ...collect_source.UsersInvited.map(uInvited => {\n                    \n                    return {\n                        Id: uInvited.Id,\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \n                        User: {...this.copyUser(uInvited.User)},\n                    }\n                })\n            ],\n            UsersWantsToParticipate: [\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\n                    \n                    return {\n                        \n                        Id: uWP.Id,\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \n                        User: {...this.copyUser(uWP.User)},\n                    }\n                })\n            ],\n            Access: { ...this.copyAccess(collect_source.Access) },\n            Permanent: collect_source.Permanent,\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \n            Organizer: {...this.copyUser(collect_source.Organizer)}\n        }\n    }\n\n}","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\n\nexport function isDate(str) {\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\n  }\n \nexport const getAge = (date) => {\n    if (date != undefined) \n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\n    else\n        return 0;\n    \n}\n\n/// проверяет, является ли дата DateTime.Min (C#)\nexport const dateIsMin = (date) => {\n    if (date){\n        let dt = new Date(date);\n\n        if (dt.getDate() == 1 && dt.getMonth() == 0 && dt.getFullYear() == 1){\n            return true;\n        }\n    }\n    return false;\n}\n\n/// проверка, установлено ли время игры (если время равно 00:00:05, значит не установлено)\nexport const TimeIsNotAssigned = (date) => {\n    return date != null \n    ? ((date.getHours() == 0 && date.getMinutes() == 0 && date.getSeconds() == 5) ? true : false)\n    : true\n    \n}\n\nexport const timeToString = (hours, minutes, seconds) => {\n    \n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\n    let res = \"\";\n\n    if (h.length > 0 && m.length > 0 && s.length > 0)\n        res = h + \":\" + m + \":\" + s;\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\n        res = h + \":\" + m;\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\n        res = h;\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\n        res = m + \":\" + s;\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\n        res = s;\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\n        res = m;\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\n        res = h + \":\" + s;\n    else\n        res = \"\";\n    return res;\n}\n\nexport const dateTimeToTimeString = (datetime) => {\n    return timeToString(new Date(datetime).getHours(), new Date(datetime).getMinutes())\n}\n\n// возвращает дату в формате ДН, ДД ММММ ГГГГ г. , в args args[0] - прибавить дней, args[1] - прибавить месяцев, args[2] - прибавить лет,\n// args[3] = true - пишем день недели, false - не пишем\n// args[4] = true - указываем Сегодня/завтра, false - просто пишем дату\nexport const dateToString = (date, ...args) => {\n    \n    if (typeof date == \"string\")\n        date = new Date(date);\n\n    let newDate = date;\n    let dateOptions = (args == undefined || args[3] == undefined || (args[3] != undefined && args[3] == true)) ?\n    {\n        // era: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'short',\n        // timezone: 'UTC',\n        // hour: 'numeric',\n        // minute: 'numeric',\n        // second: 'numeric'\n    }\n    : {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    };\n\n    if (args[0])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2])\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    if (args[4] != undefined && args[4] == true)\n        return datesWithoutTimeIsSame(new Date, newDate) \n            ? \"Сегодня\"\n            : ((datesWithoutTimeIsSame(addToDate(new Date, 1), newDate) \n                ? \"Завтра\" \n                : newDate.toLocaleString(\"ru\", dateOptions)))\n    else \n        return newDate.toLocaleString(\"ru\", dateOptions);\n\n\n    //return newDate.toLocaleString(\"ru\", dateOptions)\n}\n\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\nexport const addToDate = (date, ...args) => {\n        \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить дни\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1]) // добавить месяцы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2]) // добавить годы\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate;\n}\n\n// прибавляет к дате переданное в параметрах количество часов, минут, секунд. первый параметр -часы, второй- минуты и т.д.\nexport const addToTime = (date, ...args) => {\n     \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить часы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours() + args[0])\n\n    if (args[1]) // добавить минуты\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes() + args[1])\n\n    if (args[2]) // добавить секунды\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes(), newDate.getSeconds() + args[2])\n\n    return newDate;\n}\n\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\nexport const datesWithoutTimeIsSame = (date1, date2) => {\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\n}\n\n// сравнение двух дат только по времени (часы и минуты) без даты. true - равны, false- не равны\nexport const timesWithoutDateHourMinuteIsSame = (date1, date2) => {\n    return (date1.getHours() == date2.getHours() && date1.getMinutes() == date2.getMinutes())\n}\n\n// преобразование значения dateSelector из пакета vk ui в нативную дату JS\nexport const dateSelectorValueToJSDateValue = (dsValue) => {\n    //{day: currentDate.getDate(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()}\n    return new Date(dsValue.year, dsValue.month-1, dsValue.day)\n}\n\n// преобразование нативной даты JS в значение dateSelector из пакета vk ui\nexport const jSDateValueToDateSelectorValue = (jsDate) => {\n    \n    return {day: jsDate.getDate(), month: jsDate.getMonth()+1, year: jsDate.getFullYear()}\n}\n\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    \n    for (let i = 0; i < slotsNumber; i++){\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\n    }\n    \n    return slots\n}\n\n// создание массива объектов для расписания работы площадки\nexport const timeSlotsForSimpleCollects = (slotsNumber, slotsInHour=timeSlotsInOneHour(), startHour) => {\n    \n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    for (let i = 0; i < slotsNumber; i++)\n    {\n        slots.push({\n            Hours: Math.trunc(i / slotsInHour) + startHour, \n            Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), \n            SlotMinutes: oneSlotMinutes,\n            PricePerSlot: 0,\n            Enabled: true,\n            Selected: false,\n            Rented: false,}\n            )\n    }\n    \n    return slots\n\n}","const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\n\n\n\nconst initState = {\n    menuItems: [{\n        id: 0,\n        name: \"hot\",\n        title: \"Горячее\",\n        position: 0,\n        enabled: true,\n        show: true,\n    },{\n        id: 1,\n        name: \"allTournaments\",\n        title: \"Турниры\",\n        position: 1,\n        enabled: true,\n        show: true,\n    },{\n        id: 2,\n        name: \"profile\",\n        title: \"Профиль\",\n        position: 3,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 3,\n        name: \"tournamentadmin\",\n        title: \"Управление турнирами\",\n        position: 4,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"tournamentitem\",\n        title: \"Турнир\",\n        position: 5,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 3,\n        name: \"teamadmin\",\n        title: \"Управление командами\",\n        position: 6,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"teamitem\",\n        title: \"Команда\",\n        position: 7,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 5,\n        name: \"addcollect\",\n        title: \"Новый сбор\",\n        position: 8,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 6,\n        name: \"viewcollect\",\n        title: \"Сбор\",\n        position: 9,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 7,\n        name: \"viewuser\",\n        title: \"Игрок\",\n        position: 10,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 8,\n        name: \"bidlist\",\n        title: \"Доступно для заявки\",\n        position: 11,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 9,\n        name: \"collectslist\",\n        title: \"Все сборы\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 10,\n        name: \"collectadmin\",\n        title: \"Сбор\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"notauthorized\",\n        title: \"Не авторизован\",\n        position: 13,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"matchitem\",\n        title: \"Матч\",\n        position: 14,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 12,\n        name: \"groupadmin\",\n        title: \"Моя команда\",\n        position: 15,\n        enabled: true,\n        show: false,\n    },\n    \n],\n    //activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\n    activeItem: {id: 11, name: \"notauthorized\", title: \"Не авторизован\", position: 13, enabled: true, show: true,},\n}\n\n\nlet mainMenuReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\n            \n            return {...state,\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setActiveMenuItem = (menuName) => {\n    \n    return {\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\n        menuName\n    }\n}\n\n\nexport default mainMenuReducer;","import Axios from 'axios'\n\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\"; // тестовый 2\nexport const backserver = \"https://oblakosporta.ru\"; // прод\n//export const backserver = \"https://front.oblakosporta.ru\";\n//export const backserver = \"https://localhost:44325\";  \n//export const backserver = \"https://192.168.56.101:44325\"; // локальный\n//export const backserver = \"http://192.168.56.101:51463\"; // локальный без сертификата\nexport const URL = backserver + \"/umbraco/api/\";\nexport const authQueryString = window.location.search;\n\n\n\nexport\tconst PostJsonInstance = Axios.create(\n\t\t{\n\t\t\tbaseURL: URL,\n\t\t\ttimeout: 15000,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"}\n\t\t}\n\t)","import { PostJsonInstance, authQueryString } from './server';\n\nexport let errorObj = (text) => {\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\n}\n\nexport let okObj = (dat) => {\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\n}\n\n\n// export let ApiSendInfo =\n// {\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \n//     system: {},\n//     addRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return false;\n//         }\n//         let currentDT = new Date();\n//         this.requests.push({name, time: currentDT});\n//         return {name, time: currentDT};\n//     },\n//     checkRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return true;\n//         }\n//         return false;\n//     },\n//     check: function(){\n//         ////debugger\n//         this_.requests = this_.requests ? this_.requests.map(req => {\n//             let now = new Date();\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\n//                 return req;\n//             }\n//         }) : []\n//     },\n// }\n\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\n\nexport const VKAPI = {\n    getUser(id) {\n        debugger\n        return PostJsonInstance.get(\"https://api.vk.com/method/users.get?user_id=\" + id + \"&v=5.52\").then(data => {\ndebugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n        \n    }\n}\n\nexport const CityAPI = {\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const PlaceAPI = {\n\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n\n\n    // запрос места по его Id\n    // placeId - Id места\n    getById(placeId) {\n        let formData = new FormData();\n        formData.append(\"placeid\", placeId);\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n\n}\n\nexport const SimplePlaceAPI = {\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"SimplePlace/GetSimplePlacesInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    \n\n}\n\nexport const RentAPI = {\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    getAllRentsInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"Rents/GetRentsInCityByCityId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n}\n\nexport const CollectAPI = {\n\n    getAll() {\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"placeid\", placeId);\n\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityId(cityId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityid\", cityId);\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n    \n    \n    addSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/AddCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    editSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/EditCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    delSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DelCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    registerSimpleMemberToSimpleCollect(userProfileId, simpleCollect) {\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/RegisterMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    deleteMemberFromSimpleCollect(userProfileId, simpleCollect, simpleMember, reason=\"\") {\n        debugger\n        //simpleCollectUserProfile\n        simpleMember.Comment=reason;\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DeleteMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile }, simpleMember: {...simpleMember} })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllSimpleByCityUmbracoId(cityId, startindex = 0) {\n        //debugger\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityId\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"SimpleCollect/GetSimpleCollectsInCityByCityId\" + authQueryString, formData).then(data => {\n            //return okObj(data.data);\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n}\n\nexport const TeamAPI = {\n\n    // getAll() {\n    //     return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n    //         return okObj(data.data);\n    //     })\n    //         .catch(error => {\n    //             return errorObj(error)\n    //         })\n    // },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getTeamInfoByTeamId(teamId) {\n        let formData = new FormData();\n        formData.append(\"teamid\", teamId);\n\n        return PostJsonInstance.post(\"SimpleTeam/GetById\" + authQueryString, formData).then(data => {\n            //debugger\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const ProfileAPI = {\n    // запрос информации о пользователе\n    getUserProfile(vkUserData) {\n\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\n    getAuthInfo_old(formData) {\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // регистрация/обновление даты рождения + получение данных о профиле\n    //getAuthInfo(vkUser) {\n    registerUser(vkUser) {\n\n        let [day, month, year] = vkUser.bdate.split('.');\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\n\n        let vkUserData = {\n            'bdate': bDate,\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\n            'first_name': vkUser.first_name,\n            'id': vkUser.id,\n            'last_name': vkUser.last_name,\n            'photo_100': vkUser.photo_100,\n            'photo_200': vkUser.photo_200,\n            'photo_max_orig': vkUser.photo_max_orig,\n            'sex': vkUser.sex,\n            'timezone': vkUser.timezone,\n        }\n\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // изменение города привязки пользователя\n    setUserProfileCity(userData) {\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    },\n    \n    // сохранение пользователя\n    saveUserProfile(userData) {\n\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfile\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    }\n}\n\nexport const CityTournamentAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    // возвращает всех админов города\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    /// запрос групп турнира\n    getTournamentGroups(tournament, startindex) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"tournamentId\", tournament.Id);\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    changeTeamTournamentGroup(team, newgroup, oldgroup,  userprofile){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let newgroupToSend = {\n            Id: newgroup.Id,\n            TournamentId: newgroup.TournamentId,\n        }\n        let oldgroupToSend = {\n            Id: oldgroup.Id,\n            TournamentId: oldgroup.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/SetTeamTournamentGroup\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            newGroup: { ...newgroupToSend }, oldGroup: { ...oldgroupToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    \n    // возвращает заявки по турниру (для админа турнира)\n    getTournamentTeamsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpleTournament/GetTeamsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTournament(tournament, userprofile) {\n        ////debugger\n        \n\n        if (tournament.Id < 0){\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\n                    return {\n                        Name: item.Name,\n                        Id: item.Id != undefined ? item.Id : -1,\n                    }\n                })],\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTournament(tournament, userprofile) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    // удаление команды (отклонение заявки от команды) из турнира\n    deleteTeamFromTournamentByTeam(team, tg, userprofile, admintext){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let tournamentGroupToSend = {\n            Id: tg.Id,\n            TournamentId: tg.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeleteTeamFromTournament\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            tournamentGroup: { ...tournamentGroupToSend }, userProfile: { ...userprofile }, admintext: admintext })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    /// удаление группы турнира\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tournamentGroupId,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n   \n    /// добавление группы турнира\n    addTournamentGroup(tournament, userprofile, tGroup) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tGroup.Id,\n            Name: tGroup.Name,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n\n    // AddContact(contact){\n    //     ////debugger\n    //     //return instace.get('/contacts/getcontacts');\n    //     let Contact= contact;\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\n    //         ////debugger\n    //         return x.data;\n    //     }).catch(y => {\n    //         ////debugger\n    //         console.log(y)\n    //     });\n    // },\n}\n\nexport const TeamAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllInCityByUserProfile(userProfile) {\n        let formData = new FormData();\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTeam/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTeam(team, userprofile) {\n        \n        if (team.Id < 0){\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTeam(team, userprofile) {\n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n}\n\nexport const BidTeamAPI = {\n    \n    getActualTournaments(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // возвращает заявки по турниру (для админа турнира)\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    // согласовывает заявку (для админа турнира)\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    \n    // отклоняет заявку (для админа турнира)\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        let bid = {\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \n                    When: new Date(),\n                    TournamentGroupId: tournamentgroup.Id,\n                    UserProfileId: userprofile.UserProfileId,\n                    TeamId: team.Id,\n                    Team: null,\n                    Approved: false,\n                    UserProfile: null,\n                    ErrorMessage: \"\",\n                    AdminTournamentComment : \"\",\n                    TournamentGroup: null,\n                }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delBidTeamToTournament(bid, userprofile, team) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n    \n    /// допуск комады к турниру\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\n        ////debugger \n        let bidToSend = {...bid,\n            AdminTournamentComment: admincomment,\n            Approve: approve,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const MatchAPI = {\n    addMatch(matchInfo, userprofile, hours, minutes, seconds) {\n        \n        //new Date()\n        matchInfo.When = matchInfo.When != null\n        ? new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes, seconds )\n        : null;\n        \n        return PostJsonInstance.post(\"Match/Add2\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Del\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    getAllMatchesByTournament(tournament, userprofile) {\n        \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n        //new Date()\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        //return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tourn }, userProfile: { ...userprofile } })).then(data => {\n        return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n    getCurrentMatchesByCity(userProfile) {\n        let formData = new FormData();\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\n        return PostJsonInstance.post(\"Match/GetByCity\" + authQueryString, formData).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n    // возвращает расписание всех матчей всех турниров указанной команды\n    getTeamSheduleByTeamId(groupId, teamId, userProfile) {\n        let grTeam = {\n            groupId,\n            teamId,\n        }\n        \n        return PostJsonInstance.post(\"Match/GetTeamSheduleByTeamId\" + authQueryString, \n        JSON.stringify({ groupTeam: { ...grTeam }, userProfile: { ...userProfile } }))\n        .then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const TournamentAPI = {\n    getAllTournamentsInCityByCityUmbracoId(cityUmbracoId) {\n        \n        let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllCurrentInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n    \n    \n    getTournamentTablesByTournamentId(tournamentId) {\n        \n        let formData = new FormData();\n        formData.append(\"tournamentId\", tournamentId);\n        return PostJsonInstance.post(\"Tables/GetByTournamentId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    }\n}\n\nexport const ServiceAPI = {\n    checkConnection() {\n        \n        return PostJsonInstance.post(\"Service/Connect\" + authQueryString).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const GroupAPI = {\n    \n    // возвращает связанную с группой команду\n    getTeamGroupFromServer(groupId, userProfile) {\n        let grTeam = {\n            groupId,\n            teamId: -1,\n        }\n\n        return PostJsonInstance.post(\"VkGroup/Get\" + authQueryString, \n        JSON.stringify({ groupTeam: { ...grTeam }, userProfile: { ...userProfile } }))\n        .then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    // связывает группу с командой\n    setTeamGroupToServer(groupId, teamId, userProfile) {\n        \n        let grTeam = {\n            groupId,\n            teamId,\n        }\n\n        return PostJsonInstance.post(\"VkGroup/Add\" + authQueryString, \n        JSON.stringify({ groupTeam: { ...grTeam }, userProfile: { ...userProfile } }))\n        .then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}","import {ampluaTypes, users} from './constants/commonConstants'\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\nimport { authQueryString } from './../utils/api/server';\nimport { ServiceAPI, errorObj } from './../utils/api/api.js'\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst SYSTEM_SET_LOADING = \"SYSTEM_SET_LOADING\";\nconst SYSTEM_CHECK_LOADING = \"SYSTEM_CHECK_LOADING\";\nconst SYSTEM_SET_CONNECTED = \"SYSTEM_SET_CONNECTED\";\nconst SYSTEM_SET_DISCONNECTED = \"SYSTEM_SET_DISCONNECTED\";\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\nconst SYSTEM_SET_CURRENT_MODAL_WINDOW = \"SYSTEM_SET_CURRENT_MODAL_WINDOW\";\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\nconst SYSTEM_SET_SHOW_GROUP_TAB = \"SYSTEM_SET_SHOW_GROUP_TAB\";\nconst SYSTEM_SET_OBLAKO_PROFILE_LOADED = \"SYSTEM_SET_OBLAKO_PROFILE_LOADED\";\nconst SYSTEM_SET_VK_PROFILE_LOADED = \"SYSTEM_SET_VK_PROFILE_LOADED\";\nconst SYSTEM_SET_VK_PROFILE_BIRTH_DATE_LOADED = \"SYSTEM_SET_VK_PROFILE_BIRTH_DATE_LOADED\";\nconst SYSTEM_SET_VK_PROFILE_BIRTH_YEAR_LOADED = \"SYSTEM_SET_VK_PROFILE_BIRTH_YEAR_LOADED\";\nconst SYSTEM_SET_VK_PROFILE_CITY_LOADED = \"SYSTEM_SET_VK_PROFILE_CITY_LOADED\";\nconst SYSTEM_SET_TRIED_TO_LOAD_OBLAKO_PROFILE = \"SYSTEM_SET_TRIED_TO_LOAD_OBLAKO_PROFILE\";\nconst SYSTEM_SET_TRIED_TO_LOAD_VK_PROFILE = \"SYSTEM_SET_TRIED_TO_LOAD_VK_PROFILE\";\n\n\nconst initState = {\n    currentMenu: {},\n\n    Connected: false,\n    VkProfileLoaded: false,\n    VkProfileBirthDateLoaded: false,\n    VkProfileBirthYearLoaded: false,\n    VkProfileCityLoaded: false,\n    OblakoProfileLoaded: false,\n    TriedToLoadVkProfile: 0,\n    TriedToLoadOblakoProfile: 0,\n\n    history: [\"hot\"],\n    GlobalPopout: false,\n    CurrentModalWindow: null,\n    //ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\n    ErrorObject: \"\",\n    ShowAdminTourneyTab: false,\n    ShowAdminTeamTab: false,\n    ShowGroupTab: false,\n    Loading: true,\n    CheckLoading: new Date(),\n     // level \n\n}\n\n\nexport let systemReducer = (state = initState, action) => \n{\n    \n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        case SYSTEM_PUSH_TO_HISTORY: {\n            return {...state,\n                history: [...state.history, action.item]\n            };\n        }\n        case SYSTEM_CHECK_LOADING: {\n            return {...state,\n                CheckLoading: new Date(),\n            };\n        }\n        case SYSTEM_SET_CONNECTED: {\n            \n            return {...state,\n                Connected: true,\n            };\n        }\n        case SYSTEM_SET_TRIED_TO_LOAD_OBLAKO_PROFILE: {\n            \n            return {...state,\n                TriedToLoadOblakoProfile: action.tried,\n            };\n        }\n        case SYSTEM_SET_TRIED_TO_LOAD_VK_PROFILE: {\n            \n            return {...state,\n                TriedToLoadVkProfile: action.tried,\n            };\n        }\n        case SYSTEM_SET_OBLAKO_PROFILE_LOADED: {\n            \n            return {...state,\n                OblakoProfileLoaded: action.loaded,\n            };\n        }\n        case SYSTEM_SET_VK_PROFILE_LOADED: {\n            \n            return {...state,\n                VkProfileLoaded: action.loaded,\n            };\n        }\n        case SYSTEM_SET_VK_PROFILE_BIRTH_DATE_LOADED: {\n            \n            return {...state,\n                VkProfileBirthDateLoaded: action.loaded,\n            };\n        }\n        case SYSTEM_SET_VK_PROFILE_BIRTH_YEAR_LOADED: {\n            \n            return {...state,\n                VkProfileBirthYearLoaded: action.loaded,\n            };\n        }\n        case SYSTEM_SET_VK_PROFILE_CITY_LOADED: {\n            \n            return {...state,\n                VkProfileCityLoaded: action.loaded,\n            };\n        }\n        case SYSTEM_SET_DISCONNECTED: {\n            \n            return {...state,\n                Connected: false,\n            };\n        }\n        case SYSTEM_SET_GLOBAL_POPOUT: {\n            return {...state,\n                GlobalPopout: action.on,\n            };\n        }\n        case SYSTEM_SET_CURRENT_MODAL_WINDOW: {\n            return {...state,\n                CurrentModalWindow: action.modal,\n            };\n        }\n        case SYSTEM_SET_LOADING: {\n            return {...state,\n                Loading: action.loading,\n                GlobalPopout: action.loading,\n            };\n        }\n        case SYSTEM_SET_ERROR_MESSAGE: {\n            \n            return {...state,\n                ErrorObject: {...action.errorMessage},\n                // че-то ошибочки начинают какие-то левые вылезать, если делать все как тут нужно\n                // ErrorObject: {...state.ErrorObject,\n                //     message: action.errorMessage,\n                //     resultcode: -1, \n                //     result: \"\",\n                // }\n            };\n        }\n        case SYSTEM_RESET_ERROR: {\n            \n            return {...state,\n                ErrorObject: {...initState.ErrorObject},\n            };\n        }\n        case SYSTEM_POP_FROM_HISTORY: {\n            \n            return {...state,\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\n            };\n        }\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\n            \n            return {...state,\n                ShowAdminTourneyTab: action.showAdminTourneyTab\n            };\n        }\n        case SYSTEM_SET_SHOW_GROUP_TAB: {\n            \n            return {...state,\n                ShowGroupTab: action.showGroupTab\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\nexport const setTriedToLoadOblakoProfile = (tried) => {\n    return {\n        type: SYSTEM_SET_TRIED_TO_LOAD_OBLAKO_PROFILE,\n        tried\n    }\n}\n\nexport const setTriedToLoadVkProfile = (tried) => {\n    return {\n        type: SYSTEM_SET_TRIED_TO_LOAD_VK_PROFILE,\n        tried\n    }\n}\n\nexport const setOblakoProfileLoaded = (loaded) => {\n    return {\n        type: SYSTEM_SET_OBLAKO_PROFILE_LOADED,\n        loaded\n    }\n}\n\nexport const setVkProfileLoaded = (loaded) => {\n    return {\n        type: SYSTEM_SET_VK_PROFILE_LOADED,\n        loaded\n    }\n}\n\nexport const setVkProfileBirthDateLoaded = (loaded) => {\n    return {\n        type: SYSTEM_SET_VK_PROFILE_BIRTH_DATE_LOADED,\n        loaded\n    }\n}\n\nexport const setVkProfileBirthYearLoaded = (loaded) => {\n    return {\n        type: SYSTEM_SET_VK_PROFILE_BIRTH_YEAR_LOADED,\n        loaded\n    }\n}\n\nexport const setVkProfileCityLoaded = (loaded) => {\n    return {\n        type: SYSTEM_SET_VK_PROFILE_CITY_LOADED,\n        loaded\n    }\n}\n\nexport const setLoading = (loading) => {\n    return {\n        type: SYSTEM_SET_LOADING,\n        loading\n    }\n}\n\nexport const updateLoading = () => {\n    return {\n        type: SYSTEM_CHECK_LOADING\n    }\n}\n\nexport const setConnected = () => {\n    return {\n        type: SYSTEM_SET_CONNECTED\n    }\n}\n\nexport const setDisconnected = () => {\n    return {\n        type: SYSTEM_SET_DISCONNECTED\n    }\n}\n\nexport const pushToHistory = (val) => {\n    return {\n        type: SYSTEM_PUSH_TO_HISTORY,\n        item: val\n    }\n}\n\nexport const setShowAdminTourneyTab = (val) => {\n    return {\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\n        showAdminTourneyTab: val\n    }\n}\n\nexport const setShowGroupTab = (val) => {\n    return {\n        type: SYSTEM_SET_SHOW_GROUP_TAB,\n        showGroupTab: val\n    }\n}\n\nexport const popFromHistory = (val) => {\n    return {\n        type: SYSTEM_POP_FROM_HISTORY,\n        item: val\n    }\n}\n\nexport const setGlobalPopout = (on) => {\n    return {\n        type: SYSTEM_SET_GLOBAL_POPOUT,\n        on\n    }\n}\n\nexport const setCurrentModalWindow = (modal) => {\n    return {\n        type: SYSTEM_SET_CURRENT_MODAL_WINDOW,\n        modal\n    }\n}\n\nexport const setErrorMessage = (errorMessage) => {\n    return {\n        type: SYSTEM_SET_ERROR_MESSAGE,\n        errorMessage\n    }\n}\n\nexport const resetError = () => {\n    return {\n        type: SYSTEM_RESET_ERROR\n    }\n}\n\n// export const setLastFromHistoryMenuItem = (val) => {\n//     return {\n//         type: POP_FROM_HISTORY,\n//         item: val\n//     }\n// }\n\nexport const goToPanel = (nextPanel, back) => {\n    return (dispatch, getState) => {\n        \n        if (back){\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\n            dispatch(setActiveMenuItem(preLast));\n            dispatch(popFromHistory(nextPanel));\n        }\n        else{\n            dispatch(pushToHistory(nextPanel));\n            dispatch(setActiveMenuItem(nextPanel));\n        }\n        \n    }\n}\n\n\n// проверка связи с сервисом\nexport const checkConnection = () => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n        ServiceAPI.checkConnection()\n                .then(pl => {\n                    \n                    if (pl && pl.result == \"Ok\") {\n                        dispatch(setConnected());\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при соединении с сервисом\")))\n                        dispatch(setDisconnected());\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Ошибка запуска приложения\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\nexport default systemReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CollectAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\n\nconst COLLECTS_SET_ALL_SIMPLE_COLLECTS = \"COLLECTS_SET_ALL_SIMPLE_COLLECTS\";\nconst COLLECTS_SELECT_SIMPLE_COLLECT = \"COLLECTS_SELECT_SIMPLE_COLLECT\";\nconst COLLECTS_SET_COLLECT_ITEM_MODE = \"COLLECTS_SET_COLLECT_ITEM_MODE\";\nconst COLLECTS_DEL_SIMPLE_COLLECT = \"COLLECTS_DEL_SIMPLE_COLLECT\";\nconst COLLECTS_ADD_SIMPLE_COLLECT = \"COLLECTS_ADD_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SIMPLE_COLLECT = \"COLLECTS_SET_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SELECTED_COLLECT_MEMBERS = \"COLLECTS_SET_SELECTED_COLLECT_MEMBERS\";\nconst COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS = \"COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS\";\nconst COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT = \"COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\n\nconst initState = {\n    collects: [],\n    selected: {},\n    mode: \"view\",\n}\n\n\nlet collectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case COLLECTS_SET_ALL_SIMPLE_COLLECTS: {\n            return {\n                ...state,\n                collects: [...action.simplecollects],\n            };\n        }\n        case COLLECTS_SELECT_SIMPLE_COLLECT: {\n            return{\n                ...state,\n                selected: action.simplecollect,\n            }\n        }\n        case COLLECTS_SET_COLLECT_ITEM_MODE: {\n            return{\n                ...state,\n                mode: action.mode,\n            }\n        }\n        case COLLECTS_SET_SELECTED_COLLECT_MEMBERS: {\n            return{\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Members: [...action.members],\n                },\n            }\n        }\n        case COLLECTS_ADD_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects, action.collect],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_SET_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.map(col => {\n                    \n                    if (col.Id == action.collect.Id)\n                    {\n                        col = {...action.collect}\n                    }\n                    return col\n                })],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_DEL_SIMPLE_COLLECT: {\n            let res = {\n                ...state,\n                collects: [...state.collects.filter(col => col.Id != action.collect.Id) ],\n                selected: {...state.selected,\n                    Published: false,\n                    Deleted: true,\n            }\n            }\n            return res;\n        }\n        case COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                },\n            }\n        }\n        case COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT: {\n            debugger\n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members, action.member],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members, action.member],\n                },\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllSimpleCollects = (simplecollects) => {\n    return {\n        type: COLLECTS_SET_ALL_SIMPLE_COLLECTS,\n        simplecollects\n    }\n}\n\nexport const deleteMemberFromSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS,\n        member\n    }\n}\n\nexport const addMemberToSelectedSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT,\n        member\n    }\n}\n\nexport const selectSimpleCollect = (simplecollect) => {\n    return {\n        type: COLLECTS_SELECT_SIMPLE_COLLECT,\n        simplecollect\n    }\n}\n\nexport const setCollectItemMode = (mode) => {\n    return {\n        type: COLLECTS_SET_COLLECT_ITEM_MODE,\n        mode\n    }\n}\n\nexport const delSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_DEL_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const addSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_ADD_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_SET_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSelectedMembers = (members) => {\n    return {\n        type: COLLECTS_SET_SELECTED_COLLECT_MEMBERS,\n        members\n    }\n}\n\n\n\n\n// возвращает актуальные простые сборы города\nexport const getAllSimpleCollectsInCityByCityUmbracoId = (cityId = -1, userProfile = null) => {\n    return dispatch => {\n        if (cityId != -1) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    CollectAPI.getAllSimpleByCityUmbracoId(cityId)\n                        .then(pl => {\n                            //debugger\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setAllSimpleCollects(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные CollectAPI.getAllSimpleByCityUmbracoId\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отказ участника сбора\nexport const DeleteMemberFromCollect = (userProfileId = -1, collect = null, simpleMember=null, reason = \"\") => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null) &&  (simpleMember != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.deleteMemberFromSimpleCollect(userProfileId, collect, simpleMember, reason)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(deleteMemberFromSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.deleteMemberFromSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавление сбора\nexport const AddSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.addSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(addSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// изменение сбора\nexport const EditSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.editSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                \n                                if (pl && pl.data) {\n                                    \n                                    dispatch(setSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отмена сбора\nexport const DelSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.delSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(delSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.delSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// регистрация участника на сбор\nexport const registerMemberToSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.registerSimpleMemberToSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n\n                                    dispatch(addMemberToSelectedSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default collectReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { rents } from './constants/commonConstants'\nimport { RentAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { datesWithoutTimeIsSame } from './../utils/convertors/dateUtils'\n\nconst demoRents = rents;\n\nconst RENTS_SET_RENTS = \"RENTS_SET_RENTS\";\nconst RENTS_SET_SELECTED_RENT = \"RENTS_SET_SELECTED_RENT\";\n\n\n\nconst initState = {\n    rents: [],\n    selectedRent: {},\n    selectedDayRents: [],\n}\n\n\nlet rentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case RENTS_SET_RENTS: {\n            return {\n                ...state,\n                rents: [...action.rents],\n            };\n        }\n        case RENTS_SET_SELECTED_RENT: {\n            return {\n                ...state,\n                selectedDayRents: [...state.rents.filter(r => datesWithoutTimeIsSame(new Date(r.From),action.rentDate) && (r.SimplePlaceId == action.simplePlaceId))],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setRents = (rents) => {\n    return {\n        type: RENTS_SET_RENTS,\n        rents\n    }\n}\n\nexport const setSelectedRent = (simplePlaceId, rentDate) => {\n    return {\n        type: RENTS_SET_SELECTED_RENT,\n        simplePlaceId,\n        rentDate\n    }\n}\n\n\n// все аренды с сервера по UmbracoId города\nexport const getAllRentsInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            RentAPI.getAllRentsInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setRents(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setRents(demoRents))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setRents(demoRents))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default rentReducer;","import { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { simplePlaces } from './constants/commonConstants'\nimport { SimplePlaceAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\n\nconst demoPlaces = simplePlaces;\n\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\nconst PLACES_SET_SELECTED_PLACE = \"PLACES_SET_SELECTED_PLACE\";\n\n\n\nconst initState = {\n    places: [],\n    selectedPlace: {},\n}\n\n\nlet simplePlaceReducer = (state = initState, action) => {\n    switch (action.type) {\n        case PLACES_SET_ALL_PLACES: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        case PLACES_SET_SELECTED_PLACE: {\n            return {\n                ...state,\n                selectedPlace: state.places.find(x => x.Id == action.placeId),\n            };\n        }\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setPlaces = (places) => {\n    return {\n        type: PLACES_SET_ALL_PLACES,\n        places\n    }\n}\n\nexport const setSelectedSimplePlace = (placeId) => {\n    return {\n        type: PLACES_SET_SELECTED_PLACE,\n        placeId\n    }\n}\n\n\nexport const setPlace = (placeId, placeData) => {\n    return {\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\n        placeId,\n        placeData\n    }\n}\n\n\n// все места с сервера по UmbracoId города\nexport const getAllSimplePlacesInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            SimplePlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setPlaces(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setPlaces(demoPlaces))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setPlaces(demoPlaces))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default simplePlaceReducer;","import React, { Component } from 'react'\nimport { Button } from '@vkontakte/vkui'\nimport { withNotify } from '../HOCs/withNotify'\n\nconst ButtonWithNotify = (props) => {\n  //debugger\n \n    return (\n        <Button Accept={null} Close={props.Close} Message={props.Message} {...props}></Button>\n        \n    )\n}\n\nexport default withNotify(ButtonWithNotify)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel, setCurrentModalWindow} from '../../../../store/systemReducer'\nimport ModalCommon from '../../../Modals/ModalCommon/ModalCommon'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withNotify = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel, setCurrentModalWindow\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n            this.AcceptAndClose = this.AcceptAndClose.bind(this);\n\n        }\n\n        AcceptAndClose(){\n            this.props.Yes();\n            this.props.setCurrentModalWindow(null);\n        }\n\n        clickEvent(evt){\n            // тут выводим окошко с вопросом (уверен?), если да, то делаем действие, переданное в хэндлере\n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n                \n            this.props.setCurrentModalWindow(<ModalCommon \n                modalName=\"AreYouSure\" \n                //Message={this.props.Message} \n                data={{ message: this.props.Message }}\n                Close={() => this.props.setCurrentModalWindow(null)}\n                Accept={this.AcceptAndClose}\n                ></ModalCommon>);\n            //this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea,\n    File, CellButton, Button, Header, List, Cell, Select, CustomSelectOption, IconButton,\n    CardGrid, Card, SplitLayout, SplitCol, Div, Radio, RangeSlider, useAdaptivity, VKCOM\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from './../../../../../store/dataTypes/common.js'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n    dateToString, dateTimeToTimeString, datesWithoutTimeIsSame, timeSlotsForSimpleCollects, timeToString,\n    dateSelectorValueToJSDateValue, jSDateValueToDateSelectorValue, timeSlotsForCollects, addToTime\n} from './../../../../../utils/convertors/dateUtils';\nimport {\n    DeleteMemberFromCollect, AddSimpleCollect, setCollectItemMode, EditSimpleCollect,\n    registerMemberToSimpleCollect, DelSimpleCollect, setSelectedMembers\n} from './../../../../../store/collectReducer';\nimport { setSelectedRent } from './../../../../../store/rentReducer';\nimport { setSelectedSimplePlace } from './../../../../../store/simplePlaceReducer';\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport { myProfile } from '../../../../../store/constants/commonConstants';\nimport ButtonWithNotify from '../../../Common/WithNotify/ButtonWithNotify';\n\n\n// включить защиту от создания сбора на прошедшее время! \n\n\nconst SimpleCollectItem = (props) => {\n    let currentDate = new Date();\n    let maxCollectDate = new Date();\n    let workoutSelector = \"\";\n    let totalCost = 0;\n    let ranges = \"\";\n\n    let minutesOneSlot = 30; // количество минут в таймслоте\n    let minTimeSlotToRent = 2; // минимальный таймслот для аренды (в таймслотах, а не в минутах меряем)\n\n    let adapt = useAdaptivity();\n    let workoutColNumber = adapt.viewWidth+1; // количество столбцов. должно отличаться на разных разрешениях экрана\n    //adapt.viewWidth\n\n    let [acceptBeMember, setAcceptBeMember] = useState(false)\n    let [showPanelBeMember, setShowPanelBeMember] = useState(false)\n    let [showCancelMemberForm, setShowCancelMemberForm] = useState(false)\n    let [cancelReason, setCancelReason] = useState(\"\")\n    let [details, setDetails] = useState(\"\")\n    let [collectType, setCollectType] = useState(3)\n    let [needMembers, setNeedMembers] = useState(10)\n    let [selectedDate, setSelectedDate] = useState(jSDateValueToDateSelectorValue(currentDate))\n    let [costMembers, setCostMembers] = useState(200)\n    let [costAll, setCostAll] = useState(2000)\n    let [plus, setPlus] = useState(costAll - (costMembers * needMembers))\n    let [selectedSlots, setSelectedSlots] = useState(new Array()) //  тут отдельные выбранные ячейки\n    let selectedTimeRanges = new Array() // тут сгруппированные выбранные ячейки отдельными диапазонами\n\n\n    useEffect(() => {\n        if (props.collect.selected && props.collect.selected.Members && props.collect.selected.Members != undefined && props.collect.selected.Members.length > 0) {\n\n            let vkids = \"\";\n            let memberPhotos = props.collect.selected.Members.map(m => {\n                vkids += m.UserProfile.UserVkId.slice(2) + \",\"\n                return { id: m.UserProfile.UserVkId.slice(2), photo: \"\" }\n            });\n\n            //\n            const params = bridge.send(\"VKWebAppGetAuthToken\", { \"app_id\": 7161115, \"scope\": \"\" }).then(res => {\n                bridge.send(\"VKWebAppCallAPIMethod\",\n                    {\n                        \"method\": \"users.get\",\n                        \"request_id\": \"userphotorequest\",\n                        \"params\": {\n                            \"user_ids\": vkids,\n                            \"fields\": \"photo_100\",\n                            \"v\": \"5.131\",\n                            \"access_token\": res.access_token\n                        }\n                    })\n                    .then(us => {\n\n\n\n                        let members = props.collect.selected.Members.map(m => {\n                            let photo = us.response.filter(p => ((\"id\" + p.id) == m.UserProfile.UserVkId));\n                            if (photo && photo[0] != undefined) {\n                                m.UserProfile.PhotoPath = photo[0].photo_100;\n                            }\n                            return m;\n\n                        })\n\n                        props.setSelectedMembers(members);\n                        //m.UserProfile.PhotoPath = us.photo_100;\n                        //props.setSelectedUser(us);\n                    })\n\n                    // bridge.send(\"VKWebAppOpenPayForm\", {\n                    //     \"app_id\": 7161115, \n                    //     \"action\": \"pay-to-service\", \n                    //     \"params\": {\n                    //         \"amount\": 1.5,\n                    //         \"data\": {\n                    //                 \"currency\": \"RUB\",\n                    //                 \"merchant_data\": \"eyJvcmRlcl9pZCI6IjI1NTMxIiwidHMiOiIxNTM5MzI5NzcwIiwiYW1vdW50IjoxLjUsImN1cnJlbmN5IjoiUlVCIn0=\",\n                    //                 \"merchant_sign\": \"63d5dce9d2c9d29198ba12ba3f8e270e6606a221\",\n                    //                 \"order_id\": \"25531\",\n                    //                 \"ts\": \"1539329770\"\n                    //                 },\n                    //         \"description\": \"Test Payment\",\n                    //         \"action\": \"pay-to-service\",\n                    //         \"merchant_id\": 617001,\n                    //                 \"version\": 2,\n                    //         \"sign\": res.access_token\n                    //     }\n                    // });\n            })\n\n            \n        }\n\n    }, props.collect.selected.Id)\n\n    //debugger\n    let youAreMember = (props.collect.selected.Members && props.collect.selected.Members.length > 0)\n        ?\n        (props.collect.selected.Members.filter(m => m.UserProfileId == props.myProfile.UserProfileId).length > 0 ? true : false)\n        :\n        false;\n    let youAreOrganizer = (props.collect.selected && props.collect.selected != undefined && props.myProfile && props.myProfile != undefined) ?\n        props.collect.selected.CreatorId == props.myProfile.UserProfileId :\n        false;\n\n    //let [youAreMember, setYouAreMember] = useState(yam);\n\n    let simplePlaces = props.simplePlace.places;\n\n    let changePlace = (e) => {\n        props.setSelectedSimplePlace(+e.currentTarget.value);\n        props.setSelectedRent(+e.currentTarget.value, dateSelectorValueToJSDateValue(selectedDate));\n        setSelectedSlots([])\n    }\n\n    let changeDate = (value) => {\n        setSelectedDate(value);\n        setSelectedSlots([])\n\n    }\n\n    let changeCollectType = (type) => {\n        setCollectType(type)\n    }\n\n    let selectSlot = (value) => {\n        // взять минимальное количество слотов и сделать проверку на послеющие ячейки\n        // и это же самое нужно сделать на сервере! чтобы исключить двойную аренду\n        // проверить следующий слот (не конец смены, следующий не арендован, не перерыв)\n        let tmpSelectedSlot = [];\n\n        // выявили выбранное время\n        let res = selectedSlots.filter(ss => (ss.Hours == value.Hours && ss.Minutes == value.Minutes));\n        if (res.length != 0)\n            tmpSelectedSlot = selectedSlots.filter(ss => (ss.Hours != value.Hours || ss.Minutes != value.Minutes));\n        else\n            tmpSelectedSlot = [...selectedSlots, value];\n\n        // сортировка\n        tmpSelectedSlot.sort((a, b) => {\n            let i1 = a.Hours * (60 / minutesOneSlot * minutesOneSlot) + a.Minutes;\n            let i2 = b.Hours * (60 / minutesOneSlot * minutesOneSlot) + b.Minutes;\n\n            return (i1 - i2)\n        })\n\n\n\n        setSelectedSlots(tmpSelectedSlot);\n    }\n\n    let gotoCollect = (value) => {\n\n\n    }\n\n    let gotoProfile = (profileId) => {\n        window.open(\"https://vk.com/\" + profileId, '_blank');\n    }\n\n\n    const CancelMember = () => {\n        let member = {\n            UserProfileId: props.myProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const deleteMember = (memberUserProfile) => {\n        \n        let member = {\n            UserProfileId: memberUserProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"Удален организатором\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const AcceptRights = () => {\n        setAcceptBeMember(!acceptBeMember);\n    }\n\n    const calculateCostAll = (costall) => {\n        setCostAll(costall);\n        let costMem = Math.round(costall / needMembers);\n        setCostMembers(costMem);\n\n        setPlus((costMem * needMembers) - costall);\n    }\n\n    const calculateNeedMembers = (need) => {\n\n        \n            setNeedMembers(need);\n            setCostMembers(Math.round(costAll / need));\n            setPlus((Math.round(costAll / need) * need) - costAll);\n        \n    }\n\n    const calculateCostMembers = (membercost) => {\n        setCostMembers(membercost);\n        setPlus((membercost * needMembers) - costAll);\n    }\n\n    const registerToCollect = () => {\n\n        props.registerMemberToSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const createCollect = () => {\n\n        let collect = {\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: new Date(\n                selectedDate.year,\n                selectedDate.month - 1,\n                selectedDate.day,\n                selectedTimeRanges[0].Hours + 3, // прибавил 3 часа (разница от UTC)\n                selectedTimeRanges[0].Minutes),\n            DurationMinutes: selectedTimeRanges[0].SlotMinutes,\n            Details: details,\n            FullPrice: costAll,\n            Comment: \"\",\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.selectedPlace.Id,\n            CreatorId: props.myProfile.UserProfileId,\n        }\n        props.AddSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const saveChanges = () => {\n\n        let collect = {\n            Id: props.collect.selected.Id,\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: props.collect.selected.When,\n            DurationMinutes: props.collect.selected.DurationMinutes,\n            Details: details,\n            FullPrice: props.collect.selected.FullPrice,\n            Comment: props.collect.selected.Comment,\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.collect.selected.SimplePlaceId,\n            CreatorId: props.collect.selected.CreatorId,\n        }\n        props.EditSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const cancelCollect = () => {\n        props.DelSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const changeCollect = () => {\n\n        setDetails(props.collect.selected.Details);\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"edit\");\n    }\n\n    const cancelSave = () => {\n\n        setDetails(props.collect.selected.Details ? props.collect.selected.Details : \"\");\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"view\");\n    }\n\n    // строим контрол выбора времени\n    // если место и время выборано\n    if ((props.selectedPlace) && (props.selectedPlace.Worktime != null) && (props.selectedPlace.Worktime != undefined)) {\n        //debugger\n        // собираем все слоты из расписания, которые совпадают с выбранной датой\n        let worktimeSlots = props.selectedPlace.Worktime.filter(wt => {\n            //selectedDate, wt, rents\n            let selectedDT = new Date(dateSelectorValueToJSDateValue(selectedDate)) // selected in box\n            let from = new Date(wt.FromTime) // current item date and start time\n            let to = new Date(wt.ToTime) // current item date and end time\n            if (datesWithoutTimeIsSame(from, selectedDT))\n                return true;\n            else\n                return false;\n        }).sort((a, b) => new Date(a.FromTime).valueOf() - new Date(b.FromTime).valueOf())\n\n        // если выборка дала данные (слоты)\n        if (worktimeSlots && worktimeSlots != undefined && worktimeSlots.length > 0 && worktimeSlots[0] != undefined) {\n            // если верменной слот найден, производим с ним модификации по формированию и покраске кнопок, а также назначения им действий\n\n            let fromTmp = new Date(worktimeSlots[0].FromTime); // берем время ОТ первого слота\n            let toTmp = new Date(worktimeSlots[worktimeSlots.length - 1].ToTime);  // берем время ДО последнего слота\n            let slotsNumber = (toTmp.valueOf() - fromTmp.valueOf()) / (minutesOneSlot * 60 * 1000); // общее количество слотов\n            let numberOfCols = slotsNumber < workoutColNumber ? slotsNumber : workoutColNumber; // количество колонок\n            let numberOfRows = Math.trunc(slotsNumber / numberOfCols) == slotsNumber / numberOfCols ? slotsNumber / numberOfCols : Math.trunc(slotsNumber / numberOfCols) + 1; // количество строк\n\n            let slots = timeSlotsForSimpleCollects(slotsNumber, 60 / minutesOneSlot, fromTmp.getHours()); // получили общее время работы с разбивкой по диапазонам (обычно по 30 минут на каждую ячейку)\n\n            // бежим по массиву слотов расписаний\n            slots = slots.map((slot, slotCurrentIndex) => {\n\n                \n                worktimeSlots.forEach(worktimeSlot => {\n                    \n                    let curentWorktimeSlotFromTime = new Date(worktimeSlot.FromTime);\n                    let curentWorktimeSlotToTime = new Date(worktimeSlot.ToTime);\n                    let currentSlotTime = new Date(\n                        curentWorktimeSlotFromTime.getFullYear(), \n                        curentWorktimeSlotFromTime.getMonth(), \n                        curentWorktimeSlotFromTime.getDate(), \n                        slot.Hours, slot.Minutes);\n\n\n                    if ((worktimeSlot != null) \n                        && (worktimeSlot != undefined) \n                        && (curentWorktimeSlotFromTime <= currentSlotTime && curentWorktimeSlotToTime > currentSlotTime)\n                        ) {\n                        // расставляем перерывы. \n                        // пробегаем по массиву перерывов, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как недоступный\n                        if (worktimeSlot.Breaks && worktimeSlot.Breaks.length > 0) {\n                            worktimeSlot.Breaks.forEach(brek => {\n\n                                let from = new Date(brek.FromTime);\n                                let to = new Date(brek.ToTime);\n\n                                let brekTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= brekTime && (to > brekTime)) {\n                                    slot.Enabled = false;\n                                }\n                            });\n                        }\n\n                        // расставляем аренды\n                        // пробегаем по массиву арендованного времени, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как занятый\n                        props.rent.selectedDayRents.forEach(rnt => {\n\n                            let from = new Date(rnt.From);\n                            let to = addToTime(from, 0, rnt.DurationMinutes);\n\n                            let rentTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n                            \n\n                            if (from <= rentTime && (to > rentTime)) {\n\n                                if (rnt.Published)\n                                    slot.Rented = true;\n                            }\n                        });\n\n                        // расставляем выбранные слоты\n                        if (selectedSlots && Array.isArray(selectedSlots) && selectedSlots.length > 0) {\n\n                            selectedSlots.forEach(slt => {\n\n                                let from = new Date(`01/01/2000 ${slt.Hours}:${slt.Minutes}`);\n                                let to = addToTime(from, 0, minutesOneSlot);\n\n                                let selectedTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= selectedTime && (to > selectedTime)) {\n\n                                    slt.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.Selected = true;\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n                    }\n                });\n\n                return slot;\n            }\n            )\n\n\n            // маркируем доступное и недоступное время и создаем результирующий массив кнопок\n            let iButtons = slots.map(x => {\n                if (x.Enabled) {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button onClick={() => gotoCollect(x)} mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        if (x.Selected) {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"primary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                        else {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"commerce\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                    }\n\n                }\n                else {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        return <Div>\n                            <Button mode=\"secondary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                }\n            })\n\n            //selectedTimeRanges = new Array()\n            // вычисляем выбранные временные промежутки и выводим их в список\n            for (let i = 0; i < selectedSlots.length; i++) {\n                if (selectedSlots[i - 1] != null && selectedSlots[i - 1] != undefined) {\n\n                    let i1 = selectedSlots[i].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i].Minutes;\n                    let i2 = selectedSlots[i - 1].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i - 1].Minutes;\n\n                    if ((i1 - i2) <= minutesOneSlot) {\n                        selectedTimeRanges[selectedTimeRanges.length - 1].SlotMinutes += selectedSlots[i].SlotMinutes;\n                        selectedTimeRanges[selectedTimeRanges.length - 1].PricePerSlot += selectedSlots[i].PricePerSlot;\n                    }\n                    else {\n                        selectedTimeRanges.push(\n                            {\n                                Hours: selectedSlots[i].Hours,\n                                Minutes: selectedSlots[i].Minutes,\n                                SlotMinutes: selectedSlots[i].SlotMinutes,\n                                Enabled: selectedSlots[i].Enabled,\n                                Selected: selectedSlots[i].Selected,\n                                Rented: selectedSlots[i].Rented,\n                                PricePerSlot: selectedSlots[i].PricePerSlot,\n                            }\n                        )\n                    }\n                }\n                else {\n\n                    selectedTimeRanges.push(\n                        {\n                            Hours: selectedSlots[i].Hours,\n                            Minutes: selectedSlots[i].Minutes,\n                            SlotMinutes: selectedSlots[i].SlotMinutes,\n                            Enabled: selectedSlots[i].Enabled,\n                            Selected: selectedSlots[i].Selected,\n                            Rented: selectedSlots[i].Rented,\n                            PricePerSlot: selectedSlots[i].PricePerSlot,\n                        }\n                    )\n                }\n\n            }\n\n\n            // если изменилась цена, перезапишем ее в состоянии\n            totalCost = selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0);\n            if (totalCost != costAll)\n                calculateCostAll(selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0))\n\n            let splitCols = []\n\n            // разбиваем кнопки по колонкам для наиболее удобного отображения \n            for (let i = 0; i < numberOfCols; i++)//4\n            {\n                let sCol = []\n                for (let j = 0; j < numberOfRows; j++)//5\n                {\n                    sCol.push(iButtons[i * numberOfRows + j])\n                }\n                splitCols.push(<SplitCol width=\"25%\">{sCol}</SplitCol>)\n            }\n\n            ranges = (selectedTimeRanges && selectedTimeRanges.length > 0) ? selectedTimeRanges.map(tr => {\n                let until = addToTime(new Date(`01/01/2000 ${tr.Hours}:${tr.Minutes}`), 0, tr.SlotMinutes);\n                return <InfoRow>с {timeToString(tr.Hours, tr.Minutes)} до {timeToString(until.getHours(), until.getMinutes())}  ({tr.PricePerSlot} руб.) </InfoRow>\n\n\n            }) :\n                \"Время не выбрано\"\n\n\n            // записываем полученную иерархию контролов в единый селектор\n            workoutSelector =\n                <SplitLayout>\n                    {splitCols}\n                </SplitLayout>\n\n        }\n\n\n    }\n    else\n        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n\n\n\n\n\n\n    switch (props.collect.mode) {\n        case \"view\": {\n            if (props.collect.selected.Deleted != undefined && props.collect.selected.Deleted == true) {\n                return (\n                    <>\n                        <FormItem>\n                            <InfoRow><strong>Этот сбор был отменен</strong></InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Дата и время\">\n                            <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Место\">\n                            <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                        </FormItem>\n                        <FormItem top=\"Информация\" disabled>\n                            <InfoRow>{props.collect.selected.Details}</InfoRow>\n                        </FormItem>\n                    </>\n                )\n            }\n            else {\n                return (\n                    <>\n                        {props.collect.selected && props.collect.selected != undefined ?\n                            <>\n\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Дата и время\">\n                                    <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                        {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Место\">\n                                    <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                        {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                                </FormItem>\n                                <FormItem top=\"Информация\">\n                                    <InfoRow>{props.collect.selected.Details}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Сколько человек нужно\">\n                                    <InfoRow>{props.collect.selected.NeedMembers}\n                                        {(props.collect.selected.Members && props.collect.selected.Members.length > 0) &&\n                                            ` (нужно еще ${props.collect.selected.NeedMembers - props.collect.selected.Members.length} чел.)`\n                                        }\n                                    </InfoRow>\n\n                                </FormItem>\n                                <FormItem top=\"Стоимость на 1 человека\">\n                                    <InfoRow>{props.collect.selected.Cost}</InfoRow>\n                                </FormItem>\n                                <Group header={<Header mode=\"secondary\">Участники</Header>}>\n                                    {(props.collect.selected.Members && props.collect.selected.Members.length > 0) ?\n                                        <FormItem>\n                                            <List>\n                                                {props.collect.selected.Members.map((item) => {\n\n                                                    return <RichCell\n                                                    text={`${item.UserProfile.Name} ${item.UserProfile.Surname} ${item.UserProfileId == props.collect.selected.Creator.UserProfileId ? \" (Организатор)\" : \"\"}`}\n                                                        before={item.UserProfile.PhotoPath && item.UserProfile.PhotoPath != undefined ?\n                                                            <Avatar size={72} src={item.UserProfile.PhotoPath} />\n                                                            :\n                                                            null\n                                                        }\n                                                        actions={\n                                                        props.myProfile.UserProfileId == props.collect.selected.Creator.UserProfileId ? \n                                                            <Group>\n                                                                {item.UserProfile.UserProfileId != props.collect.selected.Creator.UserProfileId && \n                                                                    <ButtonWithNotify mode=\"destructive\" Message={`Уверены, что хотите исключить ${item.UserProfile.Name} ${item.UserProfile.Surname}?`} Yes={() => deleteMember(item.UserProfile)}>Исключить</ButtonWithNotify>}\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </Group>\n                                                            :\n                                                            <>\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </>\n\n                                                    }\n                                                    >\n                                                    </RichCell>\n                                                }\n\n                                                )\n\n                                                }\n                                            </List>\n                                        </FormItem>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Пока нет участников. Стань первым.</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                {\n                                    (!youAreMember) ?\n                                        (\n                                            (new Date(props.collect.selected.When) > new Date()) ?\n                                                (\n                                                    (props.collect.selected.Members.length < props.collect.selected.NeedMembers) ?\n                                                    ((!showPanelBeMember) ?\n                                                        <FormItem top=\"Участие\">\n                                                            <CellButton onClick={() => setShowPanelBeMember(!showPanelBeMember)}>Стать участником</CellButton>\n                                                        </FormItem>\n                                                        :\n                                                        <FormItem top=\"Стать участником\">\n                                                            {(acceptBeMember) &&\n                                                                <CellButton onClick={registerToCollect}>Зарегистрироваться на сбор</CellButton>\n                                                            }\n                                                            <Checkbox checked={acceptBeMember} onChange={AcceptRights}>\n                                                                {`Подтверждаю, что готов прибыть на сбор в ${props.collect.selected.Place.Name} в \n                                    ${dateToString(props.collect.selected.When)} к ${dateTimeToTimeString(props.collect.selected.When)}\n                                    и оплатить взнос в размере ${props.collect.selected.Cost} рублей`}\n                                                            </Checkbox>\n                                                        </FormItem>)\n                                                        :\n                                                        <FormItem top=\"Участие\">\n                                                            <InfoRow>Регистрация закончена. Народ набран.</InfoRow>\n                                                        </FormItem>\n                                                )\n                                                :\n                                                <FormItem top=\"Участие\">\n                                                    <InfoRow>Регистрация закончена</InfoRow>\n                                                </FormItem>\n                                        )\n                                        :\n                                        <FormItem top=\"Участие\">\n                                            {(new Date(props.collect.selected.When) > new Date()) ?\n                                                <>\n                                                    <InfoRow>{(!youAreOrganizer) ? `Вы подтвердили участие в сборе` : `Вы организатор сбора`}</InfoRow>\n                                                    {(!showCancelMemberForm) ?\n                                                        ((!youAreOrganizer) ?\n                                                            <RichCell actions={<ButtonWithNotify mode=\"destructive\" Message=\"Отказаться от участия?\" Yes={() => setShowCancelMemberForm(true)}>Отказаться от участия</ButtonWithNotify>}></RichCell> :\n                                                            <RichCell actions={\n                                                                <>\n                                                                    <Button mode=\"primary\"\n                                                                        onClick={changeCollect}\n                                                                    >Изменить сбор</Button>\n                                                                    <ButtonWithNotify mode=\"destructive\"\n                                                                        Message=\"Желаете отменить сбор?\"\n                                                                        Yes={cancelCollect}\n                                                                    >Отменить сбор</ButtonWithNotify>\n                                                                </>\n                                                            }></RichCell>\n\n                                                        )\n                                                        :\n                                                        <Group>\n                                                            <FormItem>\n                                                                <b>Вы хотите отказаться от участия? Укажите причину отказа</b>\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Input type=\"text\" value={cancelReason} onChange={(e) => setCancelReason(e.currentTarget.value)} defaultValue=\"\" />\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Button onClick={() => setShowCancelMemberForm(false)}>Не отказываться</Button>\n                                                                {cancelReason.length > 4 && <Button onClick={CancelMember} mode=\"destructive\">Отказаться</Button>}\n                                                            </FormItem>\n                                                        </Group>\n                                                    }\n                                                </>\n                                                :\n                                                <InfoRow>Вы участвовали в сборе</InfoRow>\n                                            }\n                                        </FormItem>\n                                }\n\n                            </>\n                            :\n                            <></>\n                        }\n                    </>\n                )\n            }\n        }; break;\n        case \"add\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <Select\n                            placeholder=\"Не выбрано\"\n                            value={(props.selectedPlace && props.selectedPlace.Id) ? props.selectedPlace.Id : null}\n                            onChange={e => changePlace(e)}\n                            options={simplePlaces.map(place => ({\n                                label: place.Name, value: place.Id\n                                // , avatar: user.photo_100 \n                            }))}\n                            renderOption={({ option, ...restProps }) => (\n                                <CustomSelectOption {...restProps}\n                                //   before={<Avatar size={24} src={option.avatar} />} \n                                />\n                            )}\n                        />\n                        {/* <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell> */}\n                    </FormItem>\n                    <FormItem top=\"Дата\">\n                        <DatePicker\n                            min={jSDateValueToDateSelectorValue(currentDate)}\n                            max={{ day: currentDate.getDate(), month: currentDate.getMonth() + 2, year: currentDate.getFullYear() }}\n                            defaultValue={selectedDate}\n                            onDateChange={(value) => { changeDate(value) }}\n                        />\n                        {/* <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow> */}\n                    </FormItem>\n                    <FormItem>\n                        {workoutSelector}\n\n                    </FormItem>\n                    <FormItem top=\"Выранное время\">\n                        {ranges}\n                    </FormItem>\n                    {selectedTimeRanges && selectedTimeRanges.length > 0 ?\n                        <Group>\n\n\n                            <FormItem>\n                                <InfoRow>\n                                    <br />\n                                    Вы можете сначала собрать людей и после оплатить. <br />\n                                    Либо вы можете сначала оплатить, а потом собирать людей. <br />\n                                    Аренда площадки гарантируется только после её оплаты.\n                                </InfoRow>\n                            </FormItem>\n\n                            <FormItem>\n                                <Group>\n                                    {\n                                        (selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                            <InfoRow style={{ \"color\": \"red\" }}>Вы отметили {selectedTimeRanges.length} диапазона(ов) времени: <br />\n                                                {ranges}\n                                                В таком режиме вы можете только арендовать всё выбранное время.\n                                                Чтобы создать сбор, необходимо выбрать только один диапазон подряд идущего времени, например,\n                                                18:00, 18:30 и 19:00 (с 18:00 до 19:30 - 1.5 часа)</InfoRow>\n                                            : <></>\n                                    }\n                                    {(selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Оплатить потом создать</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Создать потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n                                        :\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description=\"После оплаты аренда закреплена за вами\">Оплатить потом создать сбор</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description=\"Закрепление аренды будет только после оплаты\">Создать сбор потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n\n                                    }\n\n                                </Group>\n                            </FormItem>\n                            {collectType != 3 &&\n                                <>\n                                    <FormItem top=\"Информация по сбору\">\n                                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)}\n                                            placeholder=\"Укажите здесь важную информацию для участников сбора\" />\n                                    </FormItem>\n                                    <FormItem top=\"Сколько человек нужно\">\n                                        <Input type=\"Number\"\n                                            defaultValue={needMembers}\n                                            value={needMembers}\n                                            placeholder=\"10\"\n                                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                                        ></Input>\n\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                                        <InfoRow>{costAll}</InfoRow>\n                                        {/* <Input type=\"Number\"\n                                    defaultValue={costAll}\n                                    value={costAll}\n                                    placeholder=\"2000\"\n                                    onChange={e => calculateCostAll(e.currentTarget.value)}\n                                ></Input> */}\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                                        <Input type=\"Number\"\n                                            defaultValue={costMembers}\n                                            value={costMembers}\n                                            placeholder=\"200\"\n                                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                                        ></Input>\n                                    </FormItem>\n                                    <FormItem top=\"Остаток после оплаты\">\n                                        <InfoRow>{plus} руб</InfoRow>\n                                    </FormItem>\n                                </>\n                            }\n                            <FormItem top=\"Публикация\">\n                                {selectedTimeRanges && selectedTimeRanges.length > 0 ? (\n                                    collectType == 1 ? <RichCell\n                                        caption=\"Оплатить и создать сбор\"\n                                        actions={<Button>Оплатить и создать сбор</Button>}\n                                    >\n                                    </RichCell> :\n                                        (collectType == 2 ?\n                                            <RichCell\n                                                caption=\"Создать сбор и оплатить\"\n                                                actions={<Button onClick={createCollect}>Создать сбор</Button>}\n                                            >\n                                            </RichCell> :\n                                            <RichCell\n                                                caption=\"Оплатить выбранное время без создания сбора\"\n                                                actions={<Button>Оплатить</Button>}\n                                            >\n                                            </RichCell>)\n                                ) :\n                                    <RichCell\n                                        caption=\"Выберите место, дату и время занятий\">\n                                    </RichCell>}\n                            </FormItem>\n                        </Group>\n                        :\n                        <></>\n                    }\n                </>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата и время\">\n                        <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell>\n                    </FormItem>\n\n\n                    <FormItem top=\"Информация по сбору\">\n                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)} placeholder=\"Сделать чтобы можно было покупать аренду без сбора. сбор опционально делается\" />\n                    </FormItem>\n                    <FormItem top=\"Сколько человек нужно\"\n                    bottom={\n                        props.collect.mode == \"edit\" \n                    && props.collect.selected.Members \n                    && props.collect.selected.Members != undefined \n                    && props.collect.selected.Members.length > 0 \n                    && (needMembers < props.collect.selected.Members.length) ?\n                    <CellButton mode=\"danger\">Нельзя указывать меньше, чем зарегистрированных участников</CellButton>\n                    : \"\"\n                    }\n                    >\n                        <Input type=\"Number\"\n                            defaultValue={needMembers}\n                            value={needMembers}\n                            placeholder=\"10\"\n                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                        ></Input>\n\n                    </FormItem>\n                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                        <InfoRow>{costAll}</InfoRow>\n                        {/* <Input type=\"Number\"\n                                defaultValue={costAll}\n                                value={costAll}\n                                placeholder=\"2000\"\n                                onChange={e => calculateCostAll(e.currentTarget.value)}\n                            ></Input> */}\n                    </FormItem>\n                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                        <Input type=\"Number\"\n                            defaultValue={costMembers}\n                            value={costMembers}\n                            placeholder=\"200\"\n                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                        ></Input>\n                    </FormItem>\n                    <FormItem top=\"Остаток после оплаты\">\n                        <InfoRow>{plus} руб</InfoRow>\n                    </FormItem>\n\n                    <FormItem top=\"Сохранение\">\n                        <RichCell\n                            actions={\n                                <Group>\n                                    <Button\n                                        onClick={cancelSave}\n                                    >Отменить изменения</Button>\n                                    {\n                                        props.collect.mode == \"edit\" \n                                        && props.collect.selected.Members \n                                        && props.collect.selected.Members != undefined \n                                        && props.collect.selected.Members.length > 0 \n                                        && (needMembers >= props.collect.selected.Members.length) ?\n                                        <Button\n                                        Message = \"Сохранить внесенные изменения?\"\n                                        Yes={saveChanges}\n                                    >Сохранить изменения</Button>\n                                        :\n                                        <Button disabled>Исправьте ошибки...</Button>\n                                }\n                                </Group>\n                            }\n                        >\n                        </RichCell>\n                    </FormItem>\n\n\n                </>\n            )\n        }; break;\n        default: {\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        }; break;\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        collect: state.collectEntity,\n        simplePlace: state.simplePlaceEntity,\n        selectedPlace: state.simplePlaceEntity.selectedPlace,\n        selectedRent: state.rentEntity.selectedRent,\n        rent: state.rentEntity,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    DeleteMemberFromCollect, setSelectedSimplePlace, setSelectedRent, AddSimpleCollect, registerMemberToSimpleCollect,\n    DelSimpleCollect, setCollectItemMode, EditSimpleCollect, setSelectedMembers,\n})(SimpleCollectItem)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withHistorySave = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n\n        }\n\n        clickEvent(evt){\n            \n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { Component } from 'react'\nimport { RichCell } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst RichCellWithHistory = (props) => {\n  \n \n    return (\n        <RichCell isBack={false} {...props}></RichCell>\n        \n    )\n}\n\nexport default withHistorySave(RichCellWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\nimport { Icon24ChevronRight } from '@vkontakte/icons';\n\nconst Icon24ChevronRightWithHistory = (props) => {\n  \n \n    return (\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\n        \n    )\n}\n\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\nconst TeamAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBorn);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {/* {!item.Published ? \n                                        <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\n                                        : \n                                        <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\n                                        <ButtonWithNotify Yes={() => props.Button2Handle(item)} Message=\"Удалить команду?\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    // caption={date && `Основана: ${dateToString(date)}`}\n                                    after={\n                                        <Icon24ChevronRightWithHistory\n                                            handleClick={() => props.CellClick(item)} \n                                            toMenuName=\"teamitem\" \n                                            data-story=\"teamitem\"\n                                        >\n\n                                        </Icon24ChevronRightWithHistory>\n                                    }\n                                    // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : \n                    <FormItem><InfoRow>Нет команд</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, BidTeamAPI, TournamentAPI } from './../utils/api/api.js'\nimport { cityTournamentAdmins } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTournamentAdmins = cityTournamentAdmins;\n\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\nconst TOURNAMENT_MY_ADD_OR_EDIT = \"TOURNAMENT_MY_ADD_OR_EDIT\";\nconst TOURNAMENT_SET_TOURNAMENTGROUPS = \"TOURNAMENT_SET_TOURNAMENTGROUPS\";\nconst TOURNAMENT_SET_TOURNAMENTTEAMS = \"TOURNAMENT_SET_TOURNAMENTTEAMS\";\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\nconst TOURNAMENT_MATCH_LENGTH = \"TOURNAMENT_MATCH_LENGTH\";\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\nconst TOURNAMENT_SET_ORGANIZATOR_NAME = \"TOURNAMENT_SET_ORGANIZATOR_NAME\";\nconst TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT = \"TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT\";\nconst TOURNAMENT_SET_LINK = \"TOURNAMENT_SET_LINK\";\nconst TOURNAMENT_SET_LINK2 = \"TOURNAMENT_SET_LINK2\";\nconst TOURNAMENT_SET_LINK2NAME = \"TOURNAMENT_SET_LINK2NAME\";\n\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES = \"TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES\";\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    tournaments: [], // все турниры\n    bidsNew: [], // новые заявки на турниры\n    selectedForView: {}, // выбранный турнир для просмотра в пользовательском режиме (а надо ли?)\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\n    selectedTables: [],  // турнирные таблицы выбранного турнира для просмотра пользователями\n    myTournaments: [], // те, что я создал\n    cityTournamentAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet tournamentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\n            return {\n                ...state,\n                myTournaments: [...action.myTournaments],\n            };\n        }\n        case TOURNAMENT_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TOURNAMENT_SET_MYTOURNAMENT: {\n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.map(tour => {\n                    \n                    if (tour.Id == action.mytournament.Id) {{\n                        tour = {...action.mytournament};\n                    }}\n                    return tour;\n                })],\n            };\n        }\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\n            \n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES: {\n            \n            return {\n                ...state,\n                selectedTables: [...action.tables],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\n            let index = -1;\n            let max = -1;\n            \n            \n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {...action.tournament,\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\n                        return {...item, KeyId: ++max}\n                    })]\n                },\n            };\n        }\n        case TOURNAMENT_RESET_TOURNAMENT: {\n            return {\n                ...state,\n                selected: {...emptyTournament},\n            };\n        }\n        case TOURNAMENT_MY_ADD_OR_EDIT: {\n            let newTourn = state.myTournaments.filter(t => t.Id == action.tournament.Id)\n            if (newTourn){\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments.map(t => {\n                            if (t.Id == action.tournament.Id){\n                                t = {...t.tournament}\n                            }\n                            return t;\n                        })\n                    ],\n                };\n            }\n            else{\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments, action.tournament\n                    ],\n                };\n            }\n        }\n        case TOURNAMENT_MATCH_LENGTH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                MatchLength: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\n            return {\n                ...state,\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\n            };\n        }\n        case TOURNAMENT_SET_NEW_BIDS: {\n            return {\n                ...state,\n                bidsNew: [...action.bids],\n            };\n        }\n        case TOURNAMENT_DEL_BID: {\n            return {\n                ...state,\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case TOURNAMENT_SET_WHEN_BEGIN: {\n\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenBegin: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_WHEN_END: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenEnd: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ORGANIZATOR_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    OrganizatorName: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    OrganizatorNameShort: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK2: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link2: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK2NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link2Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Reglament: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Details: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_PUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: true,\n                },\n            };\n        }\n        case TOURNAMENT_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: false,\n                },\n            };\n        }\n        case TOURNAMENT_ADD_GROUP: {\n            let max = -1;\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n            // if (action.group.Id < 0)\n            //     return {\n            //         ...state,\n            //         selected: {...state.selected, \n            //             TournamentGroups: [...state.selected.TournamentGroups, \n            //                 {\n            //                     KeyId: max + 1,    \n            //                     Name: action.group.Name\n            //                 }],\n            //         },\n            //     };\n            // else\n                return {\n                    ...state,\n                    selected: {...state.selected, \n                        TournamentGroups: [...state.selected.TournamentGroups, \n                            {\n                                ...action.group,\n                                KeyId: max + 1,    \n                                Id: action.group.Id,\n                                Name: action.group.Name\n                            }],\n                    },\n                };\n\n        }\n        case TOURNAMENT_SET_GROUP: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\n                        if (item.Id == action.groupId)\n                        {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTGROUPS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTTEAMS: {\n\n            let newTGroups = [];\n            \n\n            // clear tournament groups\n            state.selected.TournamentGroups.forEach(tg => {\n                tg.Teams = [];\n            })\n\n            // заполнение групп\n            action.bidsWithTeamsAndGroups.forEach(bid => {\n                \n                newTGroups = state.selected.TournamentGroups.map(tg => {\n                    \n                    if (tg.Id == bid.TournamentGroupId)\n                    {\n                        bid.Team.Name = bid.TeamName;\n                        tg.Teams = [...tg.Teams, bid.Team];\n                    }\n                    return tg;\n                })\n            });\n            \n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...newTGroups],\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\n            debugger\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setTournamentTables = (tables) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES,\n        tables\n    }\n}\n\nexport const setMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_SET_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const addOrEditTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_MY_ADD_OR_EDIT,\n        tournament\n    }\n}\n\nexport const setSelectedTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\n        tournament\n    }\n}\n\nexport const deleteMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const setMyTournaments = (myTournaments) => {\n    return {\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\n        myTournaments\n    }\n}\n\nexport const tournamentPublish = () => {\n    return {\n        type: TOURNAMENT_PUBLISH,\n    }\n}\n\nexport const tournamentUnpublish = () => {\n    return {\n        type: TOURNAMENT_UNPUBLISH,\n    }\n}\n\nexport const resetTournament = () => {\n    return {\n        type: TOURNAMENT_RESET_TOURNAMENT\n    }\n}\n\nexport const setTournamentWhenBegin = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_BEGIN,\n        when\n    }\n}\n\nexport const setTournamentWhenEnd = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_END,\n        when\n    }\n}\n\nexport const setTournamentMode = (mode) => {\n    return {\n        type: TOURNAMENT_SET_MODE,\n        mode\n    }\n}\n\nexport const setTournamentName = (value) => {\n    return {\n        type: TOURNAMENT_SET_NAME,\n        value\n    }\n}\n\nexport const setTournamentOrganizatorName = (value) => {\n    return {\n        type: TOURNAMENT_SET_ORGANIZATOR_NAME,\n        value\n    }\n}\n\nexport const setTournamentOrganizatorNameShort = (value) => {\n    return {\n        type: TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT,\n        value\n    }\n}\n\nexport const setTournamentLink = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK,\n        value\n    }\n}\n\nexport const setTournamentLink2 = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK2,\n        value\n    }\n}\n\nexport const setTournamentLink2Name = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK2NAME,\n        value\n    }\n}\n\nexport const setTournamentMatchLength = (value) => {\n    return {\n        type: TOURNAMENT_MATCH_LENGTH,\n        value\n    }\n}\n\nexport const setTournamentDetails = (value) => {\n    return {\n        type: TOURNAMENT_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTournamentReglament = (value) => {\n    return {\n        type: TOURNAMENT_SET_REGLAMENT,\n        value\n    }\n}\n\nexport const setTournamentNewBids = (bids) => {\n    return {\n        type: TOURNAMENT_SET_NEW_BIDS,\n        bids\n    }\n}\n\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\n    return {\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\n        cityTournamentAdmins\n    }\n}\n\nexport const setSelectedTournamentGroups = (groups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTGROUPS,\n        groups\n    }\n}\n\nexport const setTournamentTeams = (bidsWithTeamsAndGroups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTTEAMS,\n        bidsWithTeamsAndGroups\n    }\n}\n\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\n    debugger\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const addGroupToTournament = (group) => {\n    return {\n        type: TOURNAMENT_ADD_GROUP,\n        group\n    }\n}\n\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\n    return {\n        type: TOURNAMENT_SET_GROUP,\n        tournamentId,\n        groupId,\n        groupName\n    }\n}\n\nexport const deleteTournamentBid = (bid) => {\n    return {\n        type: TOURNAMENT_DEL_BID,\n        bid\n    }\n}\n\n// перемещение заявки от команды в другую группу по команде\nexport const replaceTeam = (team, tOldGoup, tNewGroup) => {\n    \n} \n\n// отмена заявки от команды (удаление из турнира) по команде\nexport const deleteTeam = (team, tGoup) => {\n\n}\n\n// все админы турниров города\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        \n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новый турнир\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\n                    .then(pl => {\n                        debugger\n                        if (pl && pl.data) {\n                            dispatch(addOrEditTournament(pl.data))\n                            //dispatch(resetTournament());\n                            //dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                            //dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        //dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\n                        //dispatch(setGlobalPopout(false))\n                    })\n            else {\n                //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                //dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            //dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\n            //dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет турнир\nexport const deleteTournament = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает новые заявки в турнир\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setTournamentNewBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает группы и заявленные команды турнира\nexport const getTournamentTeams = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.getTournamentTeamsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// изменяет группу команды в турнире\nexport const changeTournamentTeamBidTournamentGroup = (team = null, newgroup = null, oldgroup = null, userprofile = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (newgroup != null) && (oldgroup != null)) {\n            \n            if (authQueryString && authQueryString.length > 0)\n            \n                CityTournamentAdminAPI.changeTeamTournamentGroup(team, newgroup, oldgroup, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось сменить группу: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сменить группу, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Подтверждает заявку в турнир\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Отклоняет заявку в турнир\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Удаляет команду из турнира\nexport const deleteTeamFromTournament = (team = null, tournamentGroup = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournamentGroup != null) && (userprofile != null)  && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTeamFromTournamentByTeam(team, tournamentGroup, userprofile, admintext)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду из турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет группу турнира\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournamentGroupId < 0)\n                {\n                    debugger\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавляет группу турнира\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournament.Id < 0)\n                {\n                    debugger\n                    dispatch(addGroupToTournament(tournamentGroup));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(addGroupToTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTournaments = (userProfileId = -1) => {\n    return dispatch => {\n        if (userProfileId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setMyTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры города для пользователя\nexport const getTournamentsByCityId = (cityUmbId = -1) => {\n    return dispatch => {\n        if (cityUmbId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getAllTournamentsInCityByCityUmbracoId(cityUmbId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        debugger\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера турнирные таблицы групп/лиг выбранного турнира\nexport const getTournamentTablesByTournamentId = (tournamentId = -1) => {\n    return dispatch => {\n        if (tournamentId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getTournamentTablesByTournamentId(tournamentId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournamentTables(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { TeamAdminAPI, TeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { TeamAdmins } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTeamAdmins = TeamAdmins;\n\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\n\nconst currentDate = new Date();\n\nconst emptyTeam = {\n    Id: -1,\n    Name: \"\",\n    Year: 0,\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    Details: \"\",\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [],\n    Admins: [],\n    Matches: [],\n    Players: [],\n    Published: false,\n    Deleted: false,\n}\n\nconst initState = {\n    teams: [], // все турниры\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\n    myTeams: [], // те, что я создал\n    cityTeamAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения команды (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet teamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TEAM_SET_ALL_TEAMS: {\n            return {\n                ...state,\n                teams: [...action.teams],\n            };\n        }\n        case TEAM_SET_MY_TEAMS: {\n           // debugger\n            return {\n                ...state,\n                myTeams: [...action.myTeams],\n            };\n        }\n        case TEAM_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TEAM_ADD_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams, { ...action.myteam }]\n            };\n        }\n        case TEAM_SET_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.map(tour => {\n\n                    if (tour.Id == action.myteam.Id) {\n                        {\n                            tour = { ...action.myteam, };\n                        }\n                    }\n                    return tour;\n                })],\n            };\n        }\n        case TEAM_DELETE_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\n            };\n        }\n        case TEAM_SET_SELECTED_TEAM: {\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\n            debugger\n\n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxT)\n                        maxT = item.KeyId;\n                }\n            });\n            state.selected.Admins.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxA)\n                        maxA = item.KeyId;\n                }\n            });\n            state.selected.Matches.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxM)\n                        maxM = item.KeyId;\n                }\n            });\n            state.selected.Players.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxP)\n                        maxP = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {\n                    ...action.team,\n                    WhenBorn: {\n                        day: new Date(action.team.WhenBorn).getDate(),\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\n                        year: new Date(action.team.WhenBorn).getFullYear()\n                    },\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\n                        return { ...item, KeyId: ++maxT }\n                    })],\n                    Admins: [...action.team.Admins.map(item => {\n                        return { ...item, KeyId: ++maxA }\n                    })],\n                    Matches: [...action.team.Matches.map(item => {\n                        return { ...item, KeyId: ++maxM }\n                    })],\n                    Players: [...action.team.Players.map(item => {\n                        return { ...item, KeyId: ++maxP }\n                    })],\n                },\n            };\n        }\n        case TEAM_RESET_TEAM: {\n            return {\n                ...state,\n                selected: { ...emptyTeam },\n            };\n        }\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\n            return {\n                ...state,\n                cityTeamAdmins: [...action.cityTeamAdmins],\n            };\n        }\n        case TEAM_SET_WHEN_BORN: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    WhenBorn: action.when,\n                },\n            };\n        }\n        case TEAM_SET_NAME: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Name: action.value,\n                },\n            };\n        }\n        case TEAM_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Reglament: action.value,\n                },\n            };\n        }\n        case TEAM_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Details: action.value,\n                },\n            };\n        }\n        case TEAM_PUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: true,\n                },\n            };\n        }\n        case TEAM_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: false,\n                },\n            };\n        }\n        case TEAM_ADD_GROUP: {\n            let max = -1;\n            state.selected.TeamGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: [...state.selected.TeamGroups,\n                    {\n                        KeyId: max + 1,\n                        Name: action.groupName\n                    }],\n                },\n            };\n        }\n        case TEAM_SET_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.map(item => {\n                        if (item.Id == action.groupId) {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TEAM_DEL_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTeams = (teams) => {\n    return {\n        type: TEAM_SET_ALL_TEAMS,\n        teams\n    }\n}\n\nexport const setMyTeam = (myteam) => {\n    return {\n        type: TEAM_SET_MYTEAM,\n        myteam\n    }\n}\n\nexport const addMyTeam = (myteam) => {\n    return {\n        type: TEAM_ADD_MYTEAM,\n        myteam\n    }\n}\n\nexport const setSelectedTeam = (team) => {\n    debugger\n    return {\n        type: TEAM_SET_SELECTED_TEAM,\n        team\n    }\n}\n\nexport const deleteMyTeam = (myteam) => {\n    return {\n        type: TEAM_DELETE_MYTEAM,\n        myteam\n    }\n}\n\nexport const setMyTeams = (myTeams) => {\n    return {\n        type: TEAM_SET_MY_TEAMS,\n        myTeams\n    }\n}\n\nexport const teamPublish = () => {\n    return {\n        type: TEAM_PUBLISH,\n    }\n}\n\nexport const teamUnpublish = () => {\n    return {\n        type: TEAM_UNPUBLISH,\n    }\n}\n\nexport const resetTeam = () => {\n    return {\n        type: TEAM_RESET_TEAM\n    }\n}\n\nexport const setTeamWhenBorn = (when) => {\n    return {\n        type: TEAM_SET_WHEN_BORN,\n        when\n    }\n}\n\n\nexport const setTeamMode = (mode) => {\n    return {\n        type: TEAM_SET_MODE,\n        mode\n    }\n}\n\nexport const setTeamName = (value) => {\n    return {\n        type: TEAM_SET_NAME,\n        value\n    }\n}\n\nexport const setTeamDetails = (value) => {\n    return {\n        type: TEAM_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTeamReglament = (value) => {\n    return {\n        type: TEAM_SET_REGLAMENT,\n        value\n    }\n}\n\n\n\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\n    return {\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\n        cityTeamAdmins\n    }\n}\n\nexport const delGroupFromTeam = (teamId, groupId) => {\n    return {\n        type: TEAM_DEL_GROUP,\n        teamId,\n        groupId\n    }\n}\n\nexport const addGroupToTeam = (teamId, groupName) => {\n    return {\n        type: TEAM_ADD_GROUP,\n        teamId,\n        groupName\n    }\n}\n\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\n    return {\n        type: TEAM_SET_GROUP,\n        teamId,\n        groupId,\n        groupName\n    }\n}\n\n\n// все админы турниров города\nexport const getAllCityTeamAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новую команду\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null && userprofile != null) {\n            if (authQueryString && authQueryString.length > 0)\n            {\n                if (team.Id < 0) // добавление\n                {\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n                else{ // изменение\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет команду\nexport const deleteTeam = (team = null, userprofile = null) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.deleteTeam(team, userprofile)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTeams = (userProfileId = -1) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (userProfileId != -1) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n\n                            dispatch(setMyTeams(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан userprofile = -1\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все команды города\nexport const getTeamsInCity = (userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (userProfile != null) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n                TeamAdminAPI.getAllInCityByUserProfile(userProfile)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n\n                            dispatch(setTeams(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан userprofile = -1\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getTeamInfo = (team = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n            TeamAPI.getTeamInfoByTeamId(team.Id)\n                    .then(pl => {\n                        \n                        if (pl && pl.data) {\n                            \n                            dispatch(setSelectedTeam(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default teamReducer;","import React, { Component } from 'react'\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst ButtonWithHistory = (props) => {\n  \n \n    return (\n        <Button isBack={false} {...props}></Button>\n        \n    )\n}\n\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem, Group } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from './TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setSelectedTeam(item);\n        props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTeam();\n        props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n        \n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                </FormItem>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\n                </FormItem>\n                <Group>\n                    <TeamAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTeam}\n                    Button2Handle = {DeleteTeam}\n                    List={props.team.myTeams}\n                    >\n                        \n                    </TeamAdminList>\n                </Group>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TeamAdminPanel);","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { BidTeam } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoBidTeam = BidTeam;\n\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\n\n\nconst currentDate = new Date();\n\nconst emptyBidTeam = BidTeam\n\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\nexport const BID_TEAM_MODE_VIEW = \"view\"\n\nconst initState = {\n    tournaments: [], // все турниры\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\n    selectedTournament: {...EmptyTournament},\n    myBids: [], // те, что я создал\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\n}\n\n\nlet bidBidTeamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case BID_TEAM_SET_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\n            return {\n                ...state,\n                selectedTournament: {...state.selectedTournament, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case BID_TEAM_SET_SELECTED_MODE: {\n            return {\n                ...state,\n                selectMode: action.mode,\n            };\n        }\n        case BID_TEAM_SET_MY_BIDS: {\n            return {\n                ...state,\n                myBids: [...action.bids],\n            };\n        }\n        case BID_TEAM_ADD_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids, action.bid],\n            };\n        }\n        case BID_TEAM_DEL_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case BID_TEAM_APPROVE_BID: {\n            debugger\n            return {\n                ...state,\n                \n            };\n        }\n        \n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: BID_TEAM_SET_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setMyBids = (bids) => {\n    return {\n        type: BID_TEAM_SET_MY_BIDS,\n        bids\n    }\n}\n\nexport const approveBid = (bid) => {\n    return {\n        type: BID_TEAM_APPROVE_BID,\n        bid\n    }\n}\n\nexport const addMyBid = (bid) => {\n    return {\n        type: BID_TEAM_ADD_MY_BID,\n        bid\n    }\n}\n\nexport const delMyBid = (bid) => {\n    return {\n        type: BID_TEAM_DEL_MY_BID,\n        bid\n    }\n}\n\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\n        groups\n    }\n}\n\nexport const setBidTeamSelectedMode = (mode) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_MODE,\n        mode\n    }\n}\n\n// все админы турниров города\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        \n        if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getActualTournaments(userprofile, team)\n                .then(pl => {\n                    \n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setTournaments(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        //dispatch(setCityBidTeamAdmins(demoBidTeam))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос заявок команды\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (team.Id >= 0)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(setMyBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавление заявки от команды\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(addMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаление заявки от команды\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\n    \n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\n            .then(pl => {\n                        \n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\n                            dispatch(delMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                    else {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                        dispatch(setGlobalPopout(false))\n                        \n                    }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n            \n        }\n    }\n}\n\n\n// согласование/отмена заявки от команды\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(approveBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default bidBidTeamReducer;","import React from 'react'\nimport { Cell } from '@vkontakte/vkui'\n\n\n\n\nconst ListItem = (props) => {\n    return (\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \n            removable \n            onRemove={() => props.Delete(props.KeyId)}\n            >\n                {props.Name}\n            </Cell>\n    )\n\n}\n\n\nexport default ListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        debugger\n                        if (item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else if (!item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    //onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else\n                            return (\n                                <RichCell\n                                    onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    actions={<ButtonWithNotify mode=\"destructive\" Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button1Handle(item)}>Отменить заявку</ButtonWithNotify>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                    })\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List } from '@vkontakte/vkui'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\n\n\nconst BidTeamTournamentList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        \n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\n                            //debugger\n                            return <>{props.Bids.map(bid => {\n                                debugger\n                                // просмотреть и вывести заявки\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\n                                    debugger\n                                    return (\n                                        <RichCell\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                            onClick={() => props.CellClick(item)}\n                                            \n                                        >\n                                            {item.Name}\n                                        </RichCell>\n                                    )}\n                                }\n                            )}</>\n                            \n\n\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                    onClick={() => props.CellClick(item)}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                    })\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Button, FormItem, Input } from '@vkontakte/vkui'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidTeamTournamentGroupsList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    //debugger\n\n    return (\n        <Group header=\"Выберите группу/лигу\">\n            <Group mode=\"plain\">\n                <FormItem>\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\n                </FormItem>\n                <FormItem top=\"Название команды на этот турнир\">\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\n                </FormItem>\n                <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        //debugger\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\n                        {\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\n                            // props.Bids.map\n\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Заявляем команду в эту группу?\" Yes={() => props.Button1Handle(item)}>Заявиться сюда</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        \n                    })\n                    : <InfoRow>Нет групп в турнире</InfoRow>\n                }\n\n            </List>\n            </Group>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from '../Team/TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\n\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\nimport BidList from './BidList';\n\n\n\nconst BidTeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        // props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        // props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        // props.setSelectedTeam(item);\n        // props.setTeamMode(\"edit\");\n    }\n\n    const CancelBid = (item) => {\n        \n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\n        // props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        // props.resetTeam();\n        // props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\n                <BidList\n                    CellClick={CellClick}\n                    Button1Handle = {CancelBid}\n                    //Button2Handle = {DeleteTeam}\n                    List={props.tournamentsForBids.myBids}\n                >\n                    \n                </BidList>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    cancelBidTeamToTournamentGroup, \n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\n} from '../../../../store/tournamentsReducer'\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\nimport {\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { goToPanel } from '../../../../store/systemReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidTeamList from '../BidTeam/BidList';\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\n\nconst TeamItem = (props) => {\n    let currentDate = new Date();\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\n\n    const teamDate = new Date(\n        props.teams.selected.WhenBorn.year,\n        props.teams.selected.WhenBorn.month-1,\n        props.teams.selected.WhenBorn.day\n        );\n\n    useEffect(() =>{\n        debugger\n        if ((props.teams.selected != null) && (props.teams.selected.Id >= 0)){\n            props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\n            props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\n        }\n    }, props.teams.selected)\n        \n    \n    const MakeBid = (tournamentgroup) => {\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n\n    const CancelBid = (tournamentgroup) => {\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n    \n    const SelectTournament = (tournament) => {\n        props.getTournamentGroups(tournament)\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"groups\")\n    }\n    \n    const BackToTournaments = () => {\n        props.setBidTeamSelectedMode(\"tournaments\")\n    }\n    \n    const CancelTeamCreate = () => {\n        props.goToPanel(\"teamadmin\", false);\n    }\n\n\n    const SaveTeam = () => {\n        props.saveSelectedTeam(props.teams.selected, props.myProfile);\n        props.goToPanel(\"teamadmin\", false);\n        //props.setTeamMode(\"view\");\n    }\n\n    \n\n    switch (props.mode) {\n        case \"view\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Название команды\">\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата основания\">\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Описание команды\">\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Логотип\">\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\n                    </FormItem>\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                            <List>\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                            </List>\n                            :\n                            <FormItem>\n                                <InfoRow>Нет групп</InfoRow>\n                            </FormItem>\n                        }\n                    </Group> */}\n                </>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новая команда</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новую команду?\" Yes={SaveTeam}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Отменить создание команды?\" Yes={CancelTeamCreate} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <Group>\n                    <Header>Управление командой</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Заявки на турнир\">\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\n                        </FormItem>\n                        <FormItem top=\"Куда можно заявиться\">\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\n                                <BidTeamTournamentList\n                                    CellClick={SelectTournament}\n                                    // Button1Handle = {MakeBid}\n                                    // Button2Handle = {CancelBid}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    List={props.tournamentsForBids.tournaments}\n                                ></BidTeamTournamentList>\n                        :\n                                <BidTeamTournamentGroupsList\n                                    CellClick={BackToTournaments}\n                                    Button1Handle = {MakeBid}\n                                    Button2Handle = {CancelBid}\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    TeamName={teamNameOnTournament}\n                                    SetTeamName={SetTeamNameOnTournament}\n                                ></BidTeamTournamentGroupsList>\n                        }\n                        </FormItem>\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Сохранить изменения?\" Yes={SaveTeam}>Внести изменения</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        };break;\n        default:{\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        };break;\n        \n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        teams: state.teamsEntity,\n        bidTeams: state.bidTeamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n        SelectedName: state.teamsEntity.selected.Name,\n        bidSelectMode: state.bidTeamsEntity.selectMode, \n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, { setTeamMode, goToPanel,\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \n})(TeamItem)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport TournamentListItem from './TournamentListItem'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\nconst TournamentAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBegin);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {!item.Published ? \n                                        <ButtonWithNotify Message=\"Опубликовать турнир?\" Yes={() => props.Button1Handle(item, true)}>Опубликовать</ButtonWithNotify>\n                                        : \n                                        <ButtonWithNotify Message=\"Снять с публикации турнир?\" Yes={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</ButtonWithNotify>}\n                                        <ButtonWithNotify Message=\"Удалить турнир?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    caption={date && `Начало: ${dateToString(date)}`}\n                                    after={<Icon24ChevronRightWithHistory\n                                    handleClick={() => props.CellClick(item)} \n                                        toMenuName=\"tournamentitem\" \n                                        data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\n                                    }\n                                    text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : <FormItem><InfoRow>Нет турниров</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TournamentAdminList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TournamentAdminList from './TournamentAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, \n    setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TournamentAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTournament = (tour, publish) => {\n\n        props.publishTournament(tour, props.myProfile, publish);\n    }\n   \n    const DeleteTournament = (tour) => {\n        props.deleteTournament(tour, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setTournamentMode(\"edit\");\n        props.setSelectedTournament(item);\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTournament();\n        props.setTournamentMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTournaments(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\n                </FormItem>\n                <TournamentAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTournament}\n                    Button2Handle = {DeleteTournament}\n                    List={props.tournament.myTournaments}\n                >\n                    \n                </TournamentAdminList>\n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TournamentAdminPanel);","import React, {useState} from 'react'\nimport  ButtonWithNotify  from './../../Common/WithNotify/ButtonWithNotify'\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\n\n\n\n\nconst BidListItem = (props) => {\n\n    let [adminText, setAdminText] = useState(\"\");\n\n\n    return (\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \n            actions={\n                <>\n                    <ButtonWithNotify mode=\"primary\" Message=\"Принять заявку команды?\" Yes={() => props.Accept(props.Item)}>Принять</ButtonWithNotify>\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\n                    <ButtonWithNotify mode=\"destructive\" Message=\"Отклонить заявку команды?\" Yes={() => props.Decline(props.Item, adminText)}>Отклонить</ButtonWithNotify>\n                </>\n            }\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\n            >\n                Команда {props.Item.Team.Name}\n            </RichCell>\n    )\n\n}\n\n\nexport default BidListItem","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, MatchAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoMatch = Match;\n\nconst MATCH_SET_ALL_MATCHES = \"MATCH_SET_ALL_MATCHES\";\nconst MATCH_SET_ALL_MATCHES_SELECTED_TEAM = \"MATCH_SET_ALL_MATCHES_SELECTED_TEAM\";\nconst MATCH_DEL_MATCH = \"MATCH_DEL_MATCH\";\nconst MATCH_SET_SELECTED = \"MATCH_SET_SELECTED\";\nconst MATCH_ADD_MATCH = \"MATCH_ADD_MATCH\";\nconst MATCH_SET_HOT_MATCHES = \"MATCH_SET_HOT_MATCHES\";\nconst MATCH_SET_ACCESS = \"MATCH_SET_ACCESS\";\nconst MATCH_SET_MODE = \"MATCH_SET_MODE\";\nconst MATCH_SET_PLAYED = \"MATCH_SET_PLAYED\";\nconst MATCH_SET_HOT_PANEL = \"MATCH_SET_HOT_PANEL\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    matches: [],\n    matchesBySelectedTeam: [],\n    hot: {\n        yesterday: [],\n        today: [],\n        tomorrow: [],\n    },\n    hotPanel: \"today\", // \"yesterday\", \"tomorrow\"\n    selected: {},\n    access: \"user\",\n    mode: \"list\", // режим отображения турнира (\"list\" - список, \"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet matchReducer = (state = initState, action) => {\n    switch (action.type) {\n        case MATCH_SET_ALL_MATCHES: {\n            return {\n                ...state,\n                matches: [...action.matches],\n            };\n        }\n        case MATCH_SET_ALL_MATCHES_SELECTED_TEAM: {\n            return {\n                ...state,\n                matchesBySelectedTeam: [...action.matches],\n            };\n        }\n        case MATCH_SET_SELECTED: {\n            return {\n                ...state,\n                selected: action.match,\n            };\n        }\n        case MATCH_DEL_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches.filter(m => m.Id != action.match.Id)],\n            };\n        }\n        case MATCH_ADD_MATCH: {\n            debugger\n            if (state.matches != null && state.matches.filter(x => x.Id == action.match.Id).length > 0)\n            {\n                return {\n                    ...state,\n                    matches: [...state.matches.map(x => {\n                        if (x.Id == action.match.Id){\n                            return action.match\n                        }\n                        else\n                        {\n                            return x\n                        }\n                    })],\n                }\n            }\n            else\n            {\n                return {\n                    ...state,\n                    matches: [...state.matches, action.match],\n                }\n            }\n            \n        }\n        case MATCH_SET_HOT_MATCHES: {\n            \n            let date = new Date();\n            let today = date.addDays(1).addDays(-1);\n            let yesterday = date.addDays(-1);\n            let tomorrow_begin = date.addDays(1);\n            let tomorrow_end = date.addDays(2);\n\n            let st = {\n                ...state,\n                hot: {\n                    yesterday: [...action.matches.filter(match => {\n                        \n                        return ((new Date(match.When) >= yesterday) && (new Date(match.When) < today))\n                    })],\n                    today: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= today) && (new Date(match.When) < tomorrow_begin))\n                    })],\n                    tomorrow: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= tomorrow_begin) && (new Date(match.When) < tomorrow_end))\n                    })],\n                },\n            };\n            \n            return st;\n        }\n        case MATCH_SET_ACCESS: {\n            return {\n                ...state,\n                access: action.access,\n            };\n        }\n        case MATCH_SET_PLAYED: {\n            return {\n                ...state,\n                access: action.played,\n            };\n        }\n        case MATCH_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case MATCH_SET_HOT_PANEL: {\n            return {\n                ...state,\n                hotPanel: action.panelName,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllMatches = (matches) => {\n    return {\n        type: MATCH_SET_ALL_MATCHES,\n        matches\n    }\n}\n\nexport const setAllMatchesBySelectedTeam = (matches) => {\n    return {\n        type: MATCH_SET_ALL_MATCHES_SELECTED_TEAM,\n        matches\n    }\n}\n\nexport const setHotMatches = (matches) => {\n    return {\n        type: MATCH_SET_HOT_MATCHES,\n        matches\n    }\n}\n\nexport const delMatch = (match) => {\n    return {\n        type: MATCH_DEL_MATCH,\n        match\n    }\n}\n\nexport const addMatch = (match) => {\n    return {\n        type: MATCH_ADD_MATCH,\n        match\n    }\n}\n\nexport const setAccess = (access) => {\n    return {\n        type: MATCH_SET_ACCESS,\n        access\n    }\n}\n\nexport const setPlayed = (played) => {\n    return {\n        type: MATCH_SET_PLAYED,\n        played\n    }\n}\n\nexport const setMode = (mode) => {\n    return {\n        type: MATCH_SET_MODE,\n        mode\n    }\n}\n\nexport const setHotPanel = (panelName) => {\n    return {\n        type: MATCH_SET_HOT_PANEL,\n        panelName\n    }\n}\n\nexport const setSelectedMatch = (match) => {\n    return {\n        type: MATCH_SET_SELECTED,\n        match\n    }\n}\n\n\n\n// все матчи турнира\nexport const getAllMatchesByTournament = (tournament = null, userProfile = null, startindex = 0) => {\n    return dispatch => {\n        if ((tournament != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0)\n                MatchAPI.getAllMatchesByTournament(tournament, userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data && pl.data.length > 0) {\n                                \n                                dispatch(setAllMatches(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавить матч в турнир\nexport const addMatchToShedule = (match = null, userProfile = null, hours = 0, minutes = 0, seconds = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.addMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes, seconds)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                                dispatch(setErrorMessage(\"Успешно добавлено\"))\n\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n// удалить матч из турнира\nexport const delMatchFromShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.delMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(delMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// возвращает актуальные матчи города\nexport const getMatchesInCurrentCity = (userProfile = null) => {\n    return dispatch => {\n        if (userProfile != null) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.getCurrentMatchesByCity(userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data.length > 0) {\n                                dispatch(setHotMatches(pl.data));\n                                //dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные MatchAPI.getCurrentMatchesByCity\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// возвращает расписание матчей выбранной команды во всех турнирах города\nexport const getTeamSheduleByTeamId = (teamId, userProfile, groupId = -1) => {\n    return dispatch => {\n        if (userProfile != null) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.getTeamSheduleByTeamId(groupId, teamId, userProfile)\n                        .then(pl => {\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setAllMatchesBySelectedTeam(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные MatchAPI.getTeamSheduleByTeamId\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default matchReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, calcInitialsAvatarColor, InitialsAvatar } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport {  addToTime, dateToString, TimeIsNotAssigned, timeToString, dateIsMin, datesWithoutTimeIsSame } from '../../../../utils/convertors/dateUtils';\nimport { green } from 'chalk';\n\n\n\nconst lose = {\n    \n    maxWidth: \"40%\",\n    padding: '1px 0px 1px 0px',\n    overflow: \"hidden\",\n    display: \"inline-block\",\n    fontSize: \"0.9em\",\n}\n\nconst win = {\n    ...lose,\n    fontWeight: 'bold',\n}\n\nconst draw = {\n    ...lose,\n}\n\nconst schet_base = {\n    ...win,\n    maxWidth: \"15%\",\n    padding: '1px 7px 1px 7px',\n    margin: '0px 5px',\n    fontWeight: 'bold', \n    fontSize: '1em',\n    borderRadius: '10px',\n}\n\nconst schet = {\n    ...schet_base,\n    color: 'yellow',\n    backgroundColor: 'gray',\n}\n\nconst noschet = {\n    ...schet_base,\n}\n\nconst MatchListItem = (props) => {\n    \n\n    let match=props.Match;\n    let place=props.Place;\n    let date = (match.When != null && !dateIsMin(match.When)) \n        ? new Date(match.When) \n        : null;\n    let now = new Date();\n\n    let endOfMatch = date != null ? addToTime(date, 0, match.TournamentGroup.Tournament.MatchLength + 10) : null; // 10 минут добавляем на всякий случай (задержки, перерывы)\n    let timeString = date != null ? (TimeIsNotAssigned(date) ? \" время не назначено\" : ` в ${timeToString(date.getHours(), date.getMinutes())}`) : \"\";\n    let dateString = \"\";\n    // let date = (match.When != null && !dateIsMin(match.When)) \n    // ? (datesWithoutTimeIsSame(new Date, new Date(match.When)) ? \"Сегодня\" : new Date(match.When)) \n    // : null;\n    let inGame = date != null && ((date <= now ) && (now < endOfMatch));\n\n        return (\n            <RichCell\n                onClick={props.ClickHandler}\n                before={\n                <InitialsAvatar\n                gradientColor={calcInitialsAvatarColor(match.TournamentGroup.TournamentId)}\n                >\n                    <h6>{match.TournamentGroup.Tournament.OrganizatorNameShort}</h6>\n                    </InitialsAvatar>\n            }\n                caption={place ? place.Name : \"Не назначено\"}\n                text={\n                    inGame \n                    ? <span style={{ \"color\": \"red\" }}>Матч идет</span> \n                    : match.Played ?\n                        <span style={{ \"color\": \"green\" }}>Сыгран \n                        {date != null \n                            && <span>{` в ${dateToString(date, 0, 0, 0, true)}`}</span>\n                        }\n                        </span> :\n                        <span style={{ \"color\": \"blue\" }}> \n                        {\n                            date != null\n                            ? <span>{`${dateToString(date, 0, 0, 0, true)}`} \n                            { timeString }\n                            </span>\n                            : <span>Дата и время не назначено</span>\n                        }\n                        </span>\n                }\n            >\n                {match.Played ? <>\n                        <span \n                            style={(+match.Team1Goals > +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? draw : lose}\n                            >{match.Team1Bid.TeamName}</span>\n                        <span style={schet}>{match.Team1Goals} - {match.Team2Goals}</span>\n                        <span \n                            style={(+match.Team1Goals < +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? draw : lose}\n                        >{match.Team2Bid.TeamName}</span>\n                    </> :\n                    <>\n                    <span style={draw}>{match.Team1Bid.TeamName}</span>\n                    <span style={noschet}> - </span>\n                    <span style={draw}>{match.Team2Bid.TeamName}</span>\n                    </>\n                }\n            </RichCell>\n        )\n}\n\nexport default MatchListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div, Headline, Textarea, Search } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setSelectedMatch,\n} from '../../../../store/matchReducer'\nimport {\n    goToPanel,\n} from '../../../../store/systemReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport ButtonWithNotify from '../WithNotify/ButtonWithNotify';\nimport MatchListItem from '../../AdminPanel/Match/MatchListItem';\nimport { TimeIsNotAssigned } from '../../../../utils/convertors/dateUtils';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Shedule = (props) => {\n\n    useEffect(() => {\n\n        props.getAllMatchesByTournament(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected)\n\n    let isAdminMode = props.mode == \"admin\" ? true : false;\n    let tournament = props.tournament;\n    let today = props.todayIs;\n\n    // создание объектов для заполнения выпадающих списков (count - сколько элементов, makeZeroBefore - дописывать ли нули впереди к цифрам от 0 до 9)\n    let optMaker = (count, makeZeroBefore = true) => {\n        let m = [];\n        for (let i = 0; i < count; i++)\n            m = [...m, { value: i, label: ((i <= 9) && (makeZeroBefore)) ? \"0\" + i : i }]\n        return m\n    }\n\n    let groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n    //debugger\n    let places = props.places\n        .map(p => p.Name.length ? p : null)\n        .filter(p => p)\n        .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n    let teams = [{ value: 0, label: \"Не выбрано\" }]\n    let hours = [...optMaker(24)];\n    let minutes = [...optMaker(60)];\n    let teamGoals = [...optMaker(99, false)];\n\n    const [selectedTournamentGroup, setSelectedTournamentGroup] = React.useState((groups && Array.isArray(groups) && groups.length > 0) ? groups[0] : null);\n\n    const [selectedTournamentGroupTeamList, setSelectedTournamentGroupTeamList] = React.useState(teams);\n\n    const [selectedTeam1, setSelectedTeam1] = React.useState(0);\n    const [selectedTeam2, setSelectedTeam2] = React.useState(0);\n    const [selectedBidTeam1ToTournament, setSelectedBidTeam1ToTournament] = React.useState(0);\n    const [selectedBidTeam2ToTournament, setSelectedBidTeam2ToTournament] = React.useState(0);\n    const [selectedTeam1Goals, setTeam1Goals] = React.useState(0);\n    const [selectedTeam2Goals, setTeam2Goals] = React.useState(0);\n    const [selectedPlace, setSelectedPlace] = React.useState(0);\n    const [selectedDescription, setSelectedDescription] = React.useState(\"\");\n    const [selectedId, setSelectedId] = React.useState(0);\n    const [selectedPlayed, setSelectedPlayed] = React.useState(false);\n    const [selectedDate, setSelectedDate] = React.useState({ day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() });\n    const [selectedHour, setSelectedHour] = React.useState([hours[0].value]);\n    const [selectedMinute, setSelectedMinute] = React.useState(minutes[0].value);\n    const [timeIsNotAssigned, setTimeIsNotAssigned] = React.useState(false);\n    const [dateIsNotAssigned, setDateIsNotAssigned] = React.useState(false);\n    \n\n    let getGroup = (groupId) => {\n        return tournament.TournamentGroups.find(x => x.Id == groupId);\n    }\n\n    let changeGroup = (league_id) => {\n        setSelectedTournamentGroup(league_id);\n        setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n    }\n\n    // let changeGroup2 = (league_id) => {\n    //     setSelectedTournamentGroup(league_id);\n    //     setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n    // }\n\n    let allMatchesInAllGroups = []\n    props.tournaments.selected.TournamentGroups.forEach(tg => {\n\n        allMatchesInAllGroups.push({\n            TournamentGroup: { ...tg },\n            Matches: [...props.matches.filter(m => m.TournamentGroup.Id == tg.Id)]\n        })\n    })\n\n    let addMatch = (editId) => {\n\n        let match = (editId >= 0) ?\n            {\n                Id: editId,\n                When: !dateIsNotAssigned ? selectedDate : null,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                Description: selectedDescription,\n                // BidTeamToTournamentId1: selectedBidTeam1ToTournament,\n                // BidTeamToTournamentId2: selectedBidTeam2ToTournament,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            } :\n            {\n                When: !dateIsNotAssigned ? selectedDate : null,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                Description: selectedDescription,\n                // BidTeamToTournamentId1: selectedBidTeam1ToTournament,\n                // BidTeamToTournamentId2: selectedBidTeam2ToTournament,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            };\n\n            if (!timeIsNotAssigned)\n                props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n            else\n                props.addMatchToShedule(match, props.myProfile, 0, 0, 5);\n\n        props.setMode(\"list\")\n    }\n\n\n    let delCurrentMatch = () => {\n\n        let match = {\n            When: selectedDate,\n            Id: selectedId,\n            TournamentGroupId: selectedTournamentGroup,\n            // TournamentGroup: {\n            //     Id: selectedTournamentGroup,\n            //     Tournament: {...props.tournaments.selected}\n            // },\n            PlaceId: selectedPlace,\n            Team1Id: selectedTeam1,\n            Team2Id: selectedTeam2,\n            Played: selectedPlayed,\n        }\n\n        props.delMatchFromShedule(match, props.myProfile, selectedHour, selectedMinute)\n        props.setMode(\"list\")\n        //props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n    }\n\n    let goToEditMatch = (match) => {\n        debugger\n\n        groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n        //debugger\n        places = props.places\n            .map(p => p.Name.length ? p : null)\n            .filter(p => p)\n            .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n        teams = [{ value: 0, label: \"Не выбрано\" }]\n        hours = [...optMaker(24)];\n        minutes = [...optMaker(60)];\n        teamGoals = [...optMaker(99, false)];\n\n        let date = new Date(match.When);\n\n\n        //setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n        setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n        setSelectedTournamentGroup(match.TournamentGroupId);\n        setSelectedId(match.Id);\n        setSelectedDescription(match.Description);\n        setTeam1Goals(match.Team1Goals);\n        setTeam2Goals(match.Team2Goals);\n        setSelectedBidTeam1ToTournament(match.Team1BidId);\n        setSelectedBidTeam2ToTournament(match.Team2BidId);\n        setSelectedTeam1(match.Team1.Id)\n        setSelectedTeam2(match.Team2.Id)\n        setSelectedPlace(match.PlaceId)\n        setSelectedPlayed(match.Played)\n        setSelectedDate({ day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() })\n        setSelectedHour(date.getHours())\n        setSelectedMinute(date.getMinutes())\n\n        setDateIsNotAssigned(match.When == null ? true : false);\n        setTimeIsNotAssigned(TimeIsNotAssigned(date));\n\n        props.setMode(\"edit\")\n    }\n\n    let goToViewMatch = (match) => {\n\n\n        props.setSelectedMatch(match)\n\n        props.goToPanel(\"matchitem\", false)\n    }\n    \n\n    let changeTimeIsNotAssigned = (assigned) => {\n        setTimeIsNotAssigned(assigned);\n    }\n    \n\n    let changeDateIsNotAssigned = (assigned) => {\n        setDateIsNotAssigned(assigned);\n    }\n\n//debugger\n    // выводим список существующего расписания с кнопками редактирования, удаления, переноса\n    // группируем список по датам, сортируем от последних к первым (последние выше)\n    // сделать кнопку сортировки\\\n\n    switch (props.access) {\n        case \"admin\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n                                    return <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\n                                        {groupAndMatchesItem.Matches.length > 0 ?\n                                            <List>\n                                                {\n                                                groupAndMatchesItem.Matches\n                                                .sort((prev, next) => {\n                                                    let a = new Date(prev.When);\n                                                    let b = new Date(next.When);\n                                                    if (a < b) return 1\n                                                    else return -1;\n                                                })\n                                                .map(match => {\n                                                    let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                    let date = match.When != null ? new Date(match.When) : null;\n                                                    return <MatchListItem \n                                                        ClickHandler={() => goToEditMatch(match)}\n                                                        Match={match} Place={place}\n                                                        ></MatchListItem>\n                                                    // <RichCell\n                                                    //     caption={place.Name}\n                                                    //     text={\n                                                    //         match.Played ?\n                                                    //             <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                                    //             <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                                    //     }\n                                                        \n                                                    // >\n                                                    //     {match.Played ?\n                                                    //         `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\n                                                    //         `${match.Team1.Name} - ${match.Team2.Name}`\n                                                    //     }\n                                                    // </RichCell>\n                                                })}\n                                            </List>\n                                            :\n                                            <SimpleCell>Нет расписания в группе</SimpleCell>\n                                        }\n                                    </Group>\n                                }\n                                )}\n                            </List>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <Button>Назад</Button>\n                        </Group>\n                    )\n                }; break;\n                case \"add\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            \n                            <FormItem top=\"Дата\">\n                                <Checkbox checked={dateIsNotAssigned} onChange={() => changeDateIsNotAssigned(!dateIsNotAssigned)}>Дата не назначена</Checkbox>\n                                {!dateIsNotAssigned &&\n                                    <>\n                                        <DatePicker\n                                            min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                            max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                            defaultValue={selectedDate}\n                                            onDateChange={(value) => setSelectedDate(value)}\n                                        />\n                                        <FormItem top=\"Время\">\n                                        <Checkbox checked={timeIsNotAssigned} onChange={() => changeTimeIsNotAssigned(!timeIsNotAssigned)}>Время не назначено</Checkbox>\n                                            {!timeIsNotAssigned &&\n                                                <>\n                                                    <CustomSelect\n                                                        placeholder=\"Не выбрано\"\n\n                                                        options={hours}\n                                                        value={selectedHour}\n                                                        onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                                        renderOption={({ ...otherProps }) => {\n                                                            return (\n                                                                <CustomSelectOption\n\n                                                                    {...otherProps}\n                                                                />\n                                                            );\n                                                        }}\n                                                    />\n                                                    <CustomSelect\n                                                        placeholder=\"Не выбрано\"\n\n                                                        options={minutes}\n                                                        value={selectedMinute}\n                                                        onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                                        renderOption={({ ...otherProps }) => {\n                                                            return (\n                                                                <CustomSelectOption\n\n                                                                    {...otherProps}\n                                                                />\n                                                            );\n                                                        }}\n                                                    />\n                                                </>\n                                            }\n                                        </FormItem>\n                                    </>\n                                }\n                            </FormItem>\n\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Комментарий к матчу\">\n                                <Textarea onChange={(e) => setSelectedDescription(e.currentTarget.value)}>{selectedDescription}</Textarea>\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Добавить матч?\" Yes={() => addMatch(-1)}>Добавить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n                case \"edit\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n\n                            <FormItem top=\"Дата\">\n                                <Checkbox checked={dateIsNotAssigned} onChange={() => changeDateIsNotAssigned(!dateIsNotAssigned)}>Дата не назначена</Checkbox>\n                                {!dateIsNotAssigned &&\n                                    <>\n                                        <DatePicker\n                                            min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                            max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                            defaultValue={selectedDate}\n                                            onDateChange={(value) => setSelectedDate(value)}\n                                        />\n                                        <FormItem top=\"Время\">\n                                                <Checkbox checked={timeIsNotAssigned} onChange={() => changeTimeIsNotAssigned(!timeIsNotAssigned)}>Время не назначено</Checkbox>\n                                                    {!timeIsNotAssigned &&\n                                                        <>\n                                                    <CustomSelect\n                                                        placeholder=\"Не выбрано\"\n\n                                                        options={hours}\n                                                        value={selectedHour}\n                                                        onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                                        renderOption={({ ...otherProps }) => {\n                                                            return (\n                                                                <CustomSelectOption\n\n                                                                    {...otherProps}\n                                                                />\n                                                            );\n                                                        }}\n                                                    />\n                                                    <CustomSelect\n                                                        placeholder=\"Не выбрано\"\n\n                                                        options={minutes}\n                                                        value={selectedMinute}\n                                                        onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                                        renderOption={({ ...otherProps }) => {\n                                                            return (\n                                                                <CustomSelectOption\n\n                                                                    {...otherProps}\n                                                                />\n                                                            );\n                                                        }}\n                                                    />\n                                                </>\n                                            }\n                                        </FormItem>\n                                    </>\n                                }\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Комментарий к матчу\">\n                                <Textarea onChange={(e) => setSelectedDescription(e.currentTarget.value)} value={selectedDescription}></Textarea>\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Сохранить матч?\" Yes={() => addMatch(selectedId)}>Сохранить</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Удалить матч?\" Yes={() => delCurrentMatch()} align=\"right\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n            }\n        }; break;\n        case \"user\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <>\n                        {/* <Search></Search> */}\n                        <Group>\n                            <List>\n                                <FormItem></FormItem>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return (\n                                        <FormItem top={groupAndMatchesItem.TournamentGroup.Name}>\n                                            <Group \n                                        // header={<FormItem>\n                                        //     <Headline mode=\"\">{groupAndMatchesItem.TournamentGroup.Name}</Headline>\n                                        //     </FormItem>}\n                                            >\n                                            {\n                                                groupAndMatchesItem.Matches.length > 0\n                                                    ?\n                                                    <List>\n                                                        {\n                                                        groupAndMatchesItem.Matches\n                                                        .sort((prev, next) => {\n                                                            let a = new Date(prev.When);\n                                                            let b = new Date(next.When);\n                                                            if (a < b) return 1\n                                                            else return -1;\n                                                        })\n                                                        .map(match => {\n                                                            let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                            return <MatchListItem \n                                                            ClickHandler={() => goToViewMatch(match)}\n                                                            Match={match} Place={place}></MatchListItem>\n                                                        })}\n                                                    </List>\n                                                    :\n                                                    <SimpleCell>Нет расписания в группе</SimpleCell>\n                                            }\n                                        </Group>\n                                        </FormItem>\n                                    )\n                                }\n                                )}\n                            </List>\n                        </Group>\n                        </>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                {matches.selected.TournamentGroup.Name}\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                {matches.selected.Team1.Name} {matches.selected.Team1Goals} : {matches.selected.Team2Goals} {matches.selected.Team2.Name}\n                            </FormItem>\n                            \n                            <FormItem top=\"Дата\">\n                                {new Date(matches.selected.When).toLocaleDateString()}\n                            </FormItem>\n                            \n                            <FormItem top=\"Место\">\n                                {matches.selected.Place.Name}\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                {matches.selected.Played}\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Назад</Button>\n                        </Group>\n                    )    \n                }; break;\n                case \"add\": {  return <>add</>}; break;\n                case \"edit\": {  return <>edit</>}; break;\n            }\n        }; break;\n\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, { goToPanel,\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule, setSelectedMatch,\n})(Shedule)","import React, { useEffect, useState } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker,\n    Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel,\n    ActionSheet, ActionSheetItem, Gallery, Headline, Link, CardGrid, Card, Title, Caption, calcInitialsAvatarColor\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentMode, setTournamentWhenEnd, setTournamentName, setTournamentReglament, \n    setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, \n    acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, changeTournamentTeamBidTournamentGroup, \n    deleteTeamFromTournament, setTournamentMatchLength, getTournamentTablesByTournamentId,  setTournamentOrganizatorName, setTournamentLink, setTournamentLink2, \n    setTournamentOrganizatorNameShort, setTournamentLink2Name, \n} from '../../../../store/tournamentsReducer'\nimport {goToPanel} from '../../../../store/systemReducer'\nimport {\n    getTeamInfo, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidListItem from '../ListItem/BidListItem';\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory';\nimport Shedule from '../../Common/Shedule/Shedule';\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\nconst w7percent = { width: '7%', textAlign: 'center', padding: '5px 0 5px 0' }\nconst w8percent = { width: '8%', textAlign: 'center', padding: '5px 0 5px 0'  }\nconst w20percent = { \n    maxWidth: '100%', \n    textAlign: 'left', \n    padding: '5px 0 5px 3px', \n    overflow: 'hidden',\n    //whiteSpace: 'nowrap',\n    display: \"inline-block\",\n}\n\n\nconst TournamentItem = (props) => {\n    let currentDate = new Date();\n    let [tempGroupName, setTempGroupName] = useState(\"\");\n    let [currentTab, setCurrentTab] = useState(props.Tab ? props.Tab : \"info\");\n    let [activePopout, setActivePopout] = useState(null);\n    // let [slideIndex, setSlideIndex] = useState(0);\n    // let [isDraggable, setIsDraggable] = useState(true);\n    // let [showArrows, setShowArrows] = useState(true);\n\n    \n\n    const CardResultStyle = {\n        display: \"flex\", \n        height: \"100px\", \n        justifyContent: \"center\", \n        alignItems: \"center\",\n        overflow: \"hidden\",\n        flexWrap: \"wrap\",\n    }\n\n    const CardStyle = {\n        ...CardResultStyle,\n\n        flexWrap: \"no-wrap\",\n        alignSelf: \"center\",\n        alignContent: \"center\",\n    }\n\n    const subCardStyle = {\n        ...CardResultStyle,\n\n        height: 'auto',\n        flexDirection: \"column\",\n    }\n\n    const centering = {\n        textAlign: \"center\",\n    }\n\n\n    // это надо потом удалить. я вручную задал отображение вкладки расписания при открытии в режиме просмотра (для пользователей)\n\n    useEffect(() => {\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\n        props.getTournamentGroups(props.tournaments.selected)\n        props.getTournamentTablesByTournamentId(props.tournaments.selected.Id)\n\n    }, props.tournaments.selected)\n\n    \n    useEffect(() => {\n        props.mode == \"view\" ? setCurrentTab(\"shedule\") : setCurrentTab(\"info\")\n    }, props.mode)\n\n    useEffect(() => {\n        props.getTournamentTeams(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected.TournamentGroups)\n\n\n    const addToTournament = () => {\n\n        if (tempGroupName.trim() != \"\") {\n            //addGroupToTournament\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\n            setTempGroupName(\"\");\n        }\n    }\n\n    const DelGroupFromTournament = (keyId, groupId) => {\n        //props.tournaments.selected.Id, item.KeyId, item.Id\n\n        if (groupId < 0)\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\n        else\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\n    }\n\n    const AcceptBid = (item) => {\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\n\n    }\n\n    const DeclineBid = (item, text) => {\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\n\n    }\n\n    const CellClick = (item) => {\n\n        props.getTeamInfo(item);\n        props.setTeamMode(\"view\");\n    }\n\n    // удаление команды из турнира\n    const DeleteTeam = (team, tg) => {\n\n        props.deleteTeamFromTournament(team, tg, props.myProfile, \"Ваша команда удалена из турнира\")\n    }\n\n    const SelectTournamentGroup = (newGroup, oldGroup, team) => {\n        props.changeTournamentTeamBidTournamentGroup(team, newGroup, oldGroup, props.myProfile)\n    }\n\n\n    const SaveTournament = () => {\n        //props.resetTournament();\n//debugger\n        props.saveSelectedTournament(props.tournaments.selected, props.myProfile)\n        //props.goToPanel(\"tournamentadmin\", false); // закрываем текущий турнир и выводим все турниры\n        props.setTournamentMode(\"view\");\n    }\n\n\n    const SetPopup = (team, oldTg) => {\n\n        setActivePopout(\n            <ActionSheet\n                onClose={() => setActivePopout(null)}\n                iosCloseItem={<ActionSheetItem autoclose mode=\"cancel\">Отменить</ActionSheetItem>}\n            //toggleRef={this.baseTargetRef.current}\n            >\n                {\n                    props.tournaments.selected.TournamentGroups.map(newTg => {\n                        return (\n                            <ActionSheetItem\n                                onClick={() => {\n\n                                    SelectTournamentGroup(newTg, oldTg, team)\n                                }}\n                                autoclose\n                            >\n                                {newTg.Name}\n                            </ActionSheetItem>\n                        )\n                    })\n                }\n                <ActionSheetItem autoclose>Отмена</ActionSheetItem>\n            </ActionSheet>)\n\n    }\n\n\n    switch (props.mode) {\n        case \"view\": {\n\n            return (\n                <>\n                    <CardGrid size=\"l\">\n                        {/* <Card style={CardStyle}>\n                            <div  style={centering}>\n\n                            </div>\n                        </Card> */}\n                        <Card style={CardStyle} mode=\"shadow\">\n                            <div style={subCardStyle}>\n                                <Title level=\"2\" weight=\"semibold\">\n                                    {props.tournaments.selected.Name}\n                                </Title>\n                                <Caption level=\"3\" weight=\"bold\">\n                                    <Link target=\"blank\" href={props.tournaments.selected.Link}>{props.tournaments.selected.OrganizatorName}</Link> ({props.tournaments.selected.OrganizatorNameShort})\n                                </Caption>\n                                {props.tournaments.selected.Link2Name &&\n                                    <Caption level=\"4\" weight=\"regular\">\n                                        <Link href={props.tournaments.selected.Link2}>{props.tournaments.selected.Link2Name}</Link>\n                                    </Caption>\n                                }\n                            </div>\n                            \n                        </Card>\n                    </CardGrid>\n                    <FormItem></FormItem>\n                    <View popout={activePopout} activePanel={currentTab}>\n                        <Panel id=\"shedule\">\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}><Title level=\"3\" weight=\"bold\">Матчи</Title></TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}><Title level=\"3\" weight=\"regular\">Таблицы</Title></TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}><Title level=\"3\" weight=\"regular\">О турнире</Title></TabsItem>\n                            </Tabs>\n                            <Group>\n                                <Shedule access=\"user\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </Panel>\n                        <Panel id=\"info\">\n                            <Group>\n                                <Tabs mode=\"buttons\">\n                                    <TabsItem onClick={() => setCurrentTab(\"shedule\")}><Title level=\"3\" weight=\"regular\">Матчи</Title></TabsItem>\n                                    <TabsItem onClick={() => setCurrentTab(\"tables\")}><Title level=\"3\" weight=\"regular\">Таблицы</Title></TabsItem>\n                                    <TabsItem onClick={() => setCurrentTab(\"info\")}><Title level=\"3\" weight=\"bold\">О турнире</Title></TabsItem>\n                                </Tabs>\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Организатор\">\n                                    <InfoRow><Link href={props.tournaments.selected.Link}>{props.tournaments.selected.OrganizatorName}</Link> ({props.tournaments.selected.OrganizatorNameShort})</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Название турнира\">\n                                    <InfoRow>{props.tournaments.selected.Name}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Проводится\">\n                                    <InfoRow>с {new Date(\n                                        props.tournaments.selected.WhenBegin.year,\n                                        props.tournaments.selected.WhenBegin.month - 1,\n                                        props.tournaments.selected.WhenBegin.day).toLocaleDateString()} \n                                        <span> по </span>{new Date(\n                                        props.tournaments.selected.WhenEnd.year,\n                                        props.tournaments.selected.WhenEnd.month - 1,\n                                        props.tournaments.selected.WhenEnd.day).toLocaleDateString()}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Описание турнира\">\n                                    <InfoRow>{props.tournaments.selected.Details}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Регламент турнира\">\n                                    <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\n                                </FormItem>\n                                {props.tournaments.selected.Link2Name &&\n                                <FormItem top={props.tournaments.selected.Link2Name}>\n                                    <InfoRow><Link href={props.tournaments.selected.Link2}>{props.tournaments.selected.Link2}</Link></InfoRow>\n                                </FormItem>\n                                }\n                                    <FormItem top=\"Группы/лиги\">\n                                        <Group>\n                                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                                <List>\n                                                    {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                                                </List>\n                                                :\n                                                <FormItem>\n                                                    <InfoRow>Нет групп</InfoRow>\n                                                </FormItem>\n                                            }\n                                        </Group>\n                                    </FormItem>\n                                </Group>\n                        </Panel>\n                        <Panel id=\"tables\">\n                            <Group>\n                                <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}><Title level=\"3\" weight=\"regular\">Матчи</Title></TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}><Title level=\"3\" weight=\"bold\">Таблицы</Title></TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}><Title level=\"3\" weight=\"regular\">О турнире</Title></TabsItem>\n                                </Tabs>\n                                {/* <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem> */}\n                                <Group>\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                        \n                                            <List>\n                                                {props.tournaments.selected.TournamentGroups.map((item) => {\n                                                    if (item.Name != \"\") {\n                                                        let table = props.tournaments.selectedTables.filter(tT => tT.TournamentGroupId == item.Id);\n                                                        table.sort((firstItem, secondItem) => firstItem.Place - secondItem.Place);\n                                                        let chet = false;\n                                                        return (\n                                                            <>\n                                                                <FormItem top={item.Name}>\n                                                                    {/* <Headline>{}</Headline> */}\n                                                                <table style={{width: '100%'}}>\n                                                                    <tr>\n                                                                        <th style={w7percent}><Caption weight=\"bold\" level=\"3\">М</Caption></th>\n                                                                        <th style={w20percent}><Caption weight=\"bold\" level=\"3\">Команда</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">И</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">В</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">П</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">Н</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">МЗ</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">МП</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">МР</Caption></th>\n                                                                        <th style={w8percent}><Caption weight=\"bold\" level=\"3\">О</Caption></th>\n                                                                    </tr>\n                                                                    {\n                                                                        table.map((row) => {\n                                                                            chet = !chet;\n                                                                            return (\n                                                                                <tr style={chet ? {backgroundColor: 'lightgray', color: 'black'} : {backgroundColor: 'white', color: 'black'}}>\n                                                                                    <td style={w7percent}><Caption weight=\"regular\" level=\"1\">{row.Place}</Caption></td>\n                                                                                    <td style={w20percent}>\n                                                                                        <Caption weight=\"regular\" level=\"3\">\n                                                                                        {row.TeamName}\n                                                                                        </Caption>\n                                                                                    </td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.Games}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.Wins}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.Loses}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.Draws}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.GoalsScored}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.GoalsMissed}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.GoalsDifference}</Caption></td>\n                                                                                    <td style={w8percent}><Caption weight=\"regular\" level=\"1\">{row.Points}</Caption></td>\n                                                                                </tr>\n                                                                            )\n\n                                                                        }\n\n                                                                        )}\n                                                                </table>\n                                                                <br />\n                                                                <br />\n                                                                </FormItem>\n                                                            </>\n\n                                                        )\n                                                    }\n                                                    else\n                                                        return null;\n                                                })\n                                                }\n                                            </List>\n                                        \n                                        :\n                                        <FormItem>\n                                            <InfoRow>Нет групп</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                            </Group>\n                        </Panel>\n\n                    </View>\n                </>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новый турнир</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название турнира\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                        </FormItem>\n                        <FormItem top=\"Название организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorName} value={props.tournaments.selected.OrganizatorName} onChange={e => props.setTournamentOrganizatorName(e.currentTarget.value)} placeholder=\"Например, Федерация...\" />\n                        </FormItem>\n                        <FormItem top=\"Сокращенное название организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorNameShort} \n                            value={props.tournaments.selected.OrganizatorNameShort} \n                            onChange={e => props.setTournamentOrganizatorNameShort(e.currentTarget.value)} \n                            placeholder=\"Например, ФФК\" />\n                        </FormItem>\n                        <FormItem top=\"Ссылка на ресурс организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link} value={props.tournaments.selected.Link} onChange={e => props.setTournamentLink(e.currentTarget.value)} placeholder=\"Например, yandex.ru\" />\n                        </FormItem>\n                        <FormItem top=\"Дополнительная ссылка\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link2} value={props.tournaments.selected.Link2} onChange={e => props.setTournamentLink2(e.currentTarget.value)} placeholder=\"Например, info@mail.ru\" />\n                        </FormItem>\n                        <FormItem top=\"Название дополнительной ссылки\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link2Name} \n                            value={props.tournaments.selected.Link2Name} \n                            onChange={e => props.setTournamentLink2Name(e.currentTarget.value)} \n                            placeholder=\"Например, email\" />\n                        </FormItem>\n                        <FormItem top=\"Дата начала\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenBegin}\n                                //value={props.tournaments.selected.WhenBegin}\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Дата окончания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenEnd}\n                                //value={props.tournaments.selected.WhenEnd}\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                        </FormItem>\n                        <FormItem top=\"Регламент турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                        </FormItem>\n                        <FormItem top=\"Длительность матча, минут\">\n                            <Input type=\"Number\"\n                                defaultValue={props.tournaments.selected.MatchLength}\n                                value={props.tournaments.selected.MatchLength}\n                                placeholder=\"60\"\n                                onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                            ></Input>\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        \n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новый турнир?\" Yes={SaveTournament}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Не создавать турнир?\" Yes={props.resetTournament} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Header>Управление турниром</Header>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                            </Tabs>\n                            <FormLayout>\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Название турнира\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                                </FormItem>\n                                <FormItem top=\"Название организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorName} onChange={e => props.setTournamentOrganizatorName(e.currentTarget.value)} placeholder=\"Например, Федерация...\" />\n                                </FormItem>\n                                <FormItem top=\"Сокращенное название организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorNameShort} \n                                    value={props.tournaments.selected.OrganizatorNameShort} \n                                    onChange={e => props.setTournamentOrganizatorNameShort(e.currentTarget.value)} \n                                    placeholder=\"Например, ФФК\" />\n                                </FormItem>\n                                <FormItem top=\"Ссылка на ресурс организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link} onChange={e => props.setTournamentLink(e.currentTarget.value)} placeholder=\"Например, yandex.ru\" />\n                                </FormItem>\n                                <FormItem top=\"Дополнительная ссылка\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link2} onChange={e => props.setTournamentLink2(e.currentTarget.value)} placeholder=\"Например, info@mail.ru\" />\n                                </FormItem>\n                                <FormItem top=\"Название дополнительной ссылки\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link2Name} \n                                    onChange={e => props.setTournamentLink2Name(e.currentTarget.value)} \n                                    placeholder=\"Например, email\" />\n                                </FormItem>\n                                <FormItem top=\"Дата начала\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenBegin}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={(value) => props.setTournamentWhenBegin(value)}\n                                        //dayPlaceholder=\"ДД\"\n                                        //monthPlaceholder=\"ММММ\"\n                                        //yearPlaceholder=\"ГГГГ\"\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Дата окончания\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenEnd}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Описание турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                                </FormItem>\n                                <FormItem top=\"Регламент турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                                </FormItem>\n                                <FormItem top=\"Длительность матча, минут\">\n                                    <Input type=\"Number\"\n                                        defaultValue={props.tournaments.selected.MatchLength}\n                                        value={props.tournaments.selected.MatchLength}\n                                        placeholder=\"60\"\n                                        onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                                    ></Input>\n                                </FormItem>\n                                {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                        <List>\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\n                                        </List>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Нет групп</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                <FormItem top=\"Новая группа/лига\">\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\n                                </FormItem>\n                                <FormItem top=\"Подверждение\">\n                                    <ButtonWithNotify Message=\"Внести изменения в турнир?\" Yes={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</ButtonWithNotify>\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\n                                </FormItem>\n                            </FormLayout>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"bids\">\n                        <Header>Заявки от команд</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) =>\n                                            <BidListItem\n                                                KeyId={item.KeyId}\n                                                Accept={AcceptBid}\n                                                Decline={DeclineBid}\n                                                Item={item}\n                                            >\n\n                                            </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"teams\">\n                        <Header>Команды по группам</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {props.tournaments.selected.TournamentGroups.map(tg => {\n\n                                    return (\n                                        <Group header={<Header>{tg.Name}</Header>}>\n                                            <List>\n                                                {\n                                                    tg.Teams.map(team => {\n\n                                                        return (\n                                                            <RichCell\n                                                                caption={team.Details}\n                                                                after={<Icon24ChevronRightWithHistory\n                                                                    handleClick={() => CellClick(team)}\n                                                                    toMenuName=\"teamitem\"\n                                                                    data-story=\"teamitem\"\n                                                                ></Icon24ChevronRightWithHistory>\n                                                                }\n                                                                actions={\n                                                                    <>\n                                                                        <Button onClick={() => SetPopup(team, tg)} mode=\"primary\">Переместить</Button>\n                                                                        <ButtonWithNotify  Message=\"Удалить команду из турнира?\" Yes={() => DeleteTeam(team, tg)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                                                    </>\n                                                                }\n                                                            >{team.Name}</RichCell>\n                                                        )\n                                                    })\n                                                }\n                                            </List>\n                                        </Group>)\n\n                                })}\n\n                                {/* {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) => \n                                        <BidListItem\n                                            KeyId={item.KeyId} \n                                            Accept={AcceptBid}\n                                            Decline={DeclineBid}\n                                            Item={item}\n                                            >\n\n                                        </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                } */}\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"shedule\">\n                        <Header>Расписание</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\n                                <Shedule access=\"admin\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n\n                </View>\n                // <Tabs>\n                //     <TabsItem>\n\n                //     </TabsItem>\n                // </Tabs>\n\n            )\n        }; break;\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        SelectedName: state.tournamentsEntity.selected.Name,\n        TournamentTables: state.tournamentsEntity.selectedTables,\n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {setTournamentMode, goToPanel, setTournamentOrganizatorName, setTournamentLink, setTournamentLink2, \n    setTournamentOrganizatorNameShort, setTournamentLink2Name, \n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, getTeamInfo, setTeamMode, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength,\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, getTournamentTablesByTournamentId,\n})(TournamentItem)","import React, { Component } from 'react'\nimport {PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst BackButton = (props) => {\n  \n \n    return (\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\n        \n    )\n}\n\nexport default withHistorySave(BackButton)","import React, { useEffect } from 'react'\nimport { RichCell, InitialsAvatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, \n    DatePicker, CustomSelectOption, Header, SimpleCell, Div, calcInitialsAvatarColor } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport MatchListItem from '../../AdminPanel/Match/MatchListItem';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Hot = (props) => {\n    \n    return (\n        <FormItem>\n            <Group header={props.Name}>\n                <List>\n                    {props.Matches && props.Matches.map(match => {\n                        // match.Team1 = {Name: match.Team1Name}\n                        // match.Team2 = {Name: match.Team2Name}\n\n                        return (\n                            <MatchListItem \n                                ClickHandler={() => props.ClickHandler(match)}\n                                Match={match} Place={match.Place}\n                                ></MatchListItem>\n                        )\n                    }\n                    )}\n                </List>\n            </Group>\n        </FormItem>\n    )\n                \n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n})(Hot)","import React, { Component } from 'react'\nimport {Card, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CardWithHistory = (props) => {\n  \n \n    return (\n        <Card isBack={false} {...props}></Card>\n        \n    )\n}\n\nexport default withHistorySave(CardWithHistory)","import React, { Component } from 'react'\nimport { CellButton } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CellButtonWithHistory = (props) => {\n  //debugger\n \n    return (\n        <CellButton isBack={false} {...props}></CellButton>\n        \n    )\n}\n\nexport default withHistorySave(CellButtonWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst TabbarItemWithHistory = (props) => {\n  \n \n    return (\n        <TabbarItem isBack={false} {...props}></TabbarItem>\n        \n    )\n}\n\nexport default withHistorySave(TabbarItemWithHistory)","import React from 'react'\n\nconst ProfilePanel = (props) => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default ProfilePanel","export default __webpack_public_path__ + \"static/media/player300-s.5ad7daca.png\";","export default __webpack_public_path__ + \"static/media/stadium300-s.e5a62e23.png\";","export default __webpack_public_path__ + \"static/media/tournament300.b1f06d14.png\";","import {ampluaTypes, myProfile, users} from './constants/commonConstants'\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError, setTriedToLoadOblakoProfile,\n    setOblakoProfileLoaded, setVkProfileLoaded, setTriedToLoadVkProfile, \n    setVkProfileBirthDateLoaded, setVkProfileBirthYearLoaded, setVkProfileCityLoaded,\n} from \"./systemReducer\";\n\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\nconst PROFILE_SET_MY_TOTAL_EXP = \"PROFILE_SET_MY_TOTAL_EXP\";\nconst PROFILE_SET_MY_NAME = \"PROFILE_SET_MY_NAME\";\nconst PROFILE_SET_MY_BIRTH = \"PROFILE_SET_MY_BIRTH\";\nconst PROFILE_SET_MY_SURNAME = \"PROFILE_SET_MY_SURNAME\";\nconst PROFILE_SET_USER_IS_GROUP_ADMIN = \"PROFILE_SET_USER_IS_GROUP_ADMIN\";\nconst PROFILE_SET_USER_IS_FIRST_START = \"PROFILE_SET_USER_IS_FIRST_START\";\n\nlet demoUser = users[0];\n\nconst initState = {\n    myProfile: null,\n    vkProfile: null,\n    isGroupAdmin: false,\n    isFirstStart: false,\n     // level \n\n}\n\n\nexport let profileReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case PROFILE_SET_VK_PROFILE_INFO: {\n            return {...state,\n                vkProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_USER_PROFILE: {\n            let birth = action.user.Birth ? `${new Date(action.user.Birth).getDate()}.${new Date(action.user.Birth).getMonth()}.${new Date(action.user.Birth).getYear()}` : null;\n\n            return {...state,\n                myProfile: {...action.user},\n                vkProfile: {...state.vkProfile,\n                bdate: birth\n                }\n            };\n        }\n        case PROFILE_SET_USER_IS_GROUP_ADMIN: {\n            return {...state,\n                isGroupAdmin: action.isAdmin,\n            };\n        }\n        case PROFILE_SET_USER_IS_FIRST_START: {\n            return {...state,\n                isFirstStart: action.val,\n            };\n        }\n        case PROFILE_SET_MY_TOTAL_EXP: {\n\n            return {...state,\n                myProfile: {...state.myProfile,\n                    TotalExpirience: Math.round(action.exp),\n                }\n            };\n        }\n        case PROFILE_SET_MY_NAME: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Name: action.name,\n                }\n            };\n        }\n        case PROFILE_SET_MY_SURNAME: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Surname: action.surname,\n                }\n            };\n        }\n        case PROFILE_SET_MY_BIRTH: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Birth: new Date(action.birthDate.year, action.birthDate.month-1, action.birthDate.day+1),\n                }\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setVkProfileInfo = (user) => {\n    \n    return {\n        type: PROFILE_SET_VK_PROFILE_INFO,\n        user\n    }\n}\n\nexport const setUserProfile = (user) => {\n    return {\n        type: PROFILE_SET_USER_PROFILE,\n        user\n    }\n}\n\nexport const setUserIsGroupAdmin = (isAdmin) => {\n    return {\n        type: PROFILE_SET_USER_IS_GROUP_ADMIN,\n        isAdmin\n    }\n}\n\nexport const setIsFirstStart = (val) => {\n    return {\n        type: PROFILE_SET_USER_IS_FIRST_START,\n        val\n    }\n}\n\n// установка опыта\nexport const setMyTotalExpirience = (exp) => {\n    \n    //let exp = e.CurrentTarget.value\n    return {\n        type: PROFILE_SET_MY_TOTAL_EXP,\n        exp\n    }\n}\n\n// установка имени\nexport const setUserName = (e) => {\n\n    return {\n        type: PROFILE_SET_MY_NAME,\n        name: e.currentTarget.value\n    }\n}\n\n// установка фамилии\nexport const setUserSurName = (e) => {\n\n    return {\n        type: PROFILE_SET_MY_SURNAME,\n        surname: e.currentTarget.value\n    }\n}\n\n// установка даты рождения\nexport const setBirthDate = (birthDate) => {\n    return {\n        type: PROFILE_SET_MY_BIRTH,\n        birthDate\n    }\n}\n\n// получение данных профиля (без авторегистрации)\nexport const getUserProfile = (vkUserData) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getUserProfile(vkUserData)\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToLoadOblakoProfile(0));\n                        dispatch(setOblakoProfileLoaded(true));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setTriedToLoadOblakoProfile(1))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n// установка флагов загрузки пользователя ВК\nexport const setVkProfileInfoAndSetFlags = (userProfile) => {\n    return dispatch => {\n        debugger\n        dispatch(setVkProfileInfo(userProfile));\n\n        if (userProfile.bdate != undefined){\n            dispatch(setVkProfileBirthYearLoaded(true));\n            if (userProfile.bdate.split('.').length > 2)\n                dispatch(setVkProfileBirthDateLoaded(true));\n        }\n\n        if ((userProfile.city != null) && (userProfile.city.id != 0))\n            dispatch(setVkProfileCityLoaded(true));\n\n        dispatch(setVkProfileLoaded(true));\n        dispatch(setTriedToLoadVkProfile(0));\n    }\n}\n\n// установка нового города пользователю\nexport const setUserProfileCity = (userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.setUserProfileCity(userProfile).then()\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        if (pl.data.CityUmbracoId >= 0)\n                            dispatch(setOblakoProfileCityLoaded(true));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        //dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n// авторизация (со встроенной регистрацией)\n//export const getAuthInfo = (vkProfileInfo) => {\nexport const registerUser = (vkProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.registerUser(vkProfileInfo)\n                .then(pl => {\n                    debugger\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToLoadOblakoProfile(0));\n                        dispatch(setOblakoProfileLoaded(true));\n                        dispatch(setIsFirstStart(true)); // установить флаг зарегистрирован\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохранение профиля\nexport const saveUserProfile = (ProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.saveUserProfile(ProfileInfo)\n                .then(pl => {\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToLoadOblakoProfile(0));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при сохранении профиля\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\nexport default profileReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\n\n\nconst initState = {\n    cities: [],\n}\n\n\nlet cityReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getAllCitiesFromServer = () => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            CityAPI.getAll().then()\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default cityReducer;","import {ampluaTypes, users} from './constants/commonConstants'\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\n\nimport { authQueryString } from './../utils/api/server';\nimport { GroupAPI, errorObj } from './../utils/api/api.js'\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst GROUP_SET_GROUP_TEAM = \"GROUP_SET_GROUP_TEAM\";\nconst GROUP_SET_GROUP = \"GROUP_SET_GROUP\";\n\nconst initState = {\n    GroupId: null,\n    TeamId: null,\n    TeamName: null,\n    IsTournament: false,\n    TournamentId: -1,\n}\n\nexport let groupReducer = (state = initState, action) => \n{\n    \n    switch (action.type){\n        case GROUP_SET_GROUP_TEAM: {\n            return {\n                ...state,\n                GroupId: action.groupId,\n                TeamId: action.teamId,\n                TeamName: action.teamName,\n                IsOranizator: action.isOrg,\n                TournamentId: action.tournamentId,\n            }\n        }\n        case GROUP_SET_GROUP: {\n            return {\n                ...state,\n                GroupId: action.groupId,\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setGroupTeam = (groupId, teamId, teamName, isOrg, tournamentId) => {\n    return {\n        type: GROUP_SET_GROUP_TEAM,\n        groupId,\n        teamId,\n        teamName,\n        isOrg,\n        tournamentId\n    }\n}\n\nexport const setGroup = (groupId) => {\n    return {\n        type: GROUP_SET_GROUP,\n        groupId,\n    }\n}\n\n// проверка связи с сервисом\nexport const connectTeamWithGroup = (groupId, teamId = -1, userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if ((authQueryString && authQueryString.length > 0) && (groupId != \"\") && (userProfile != null))\n        GroupAPI.setTeamGroupToServer(groupId, teamId, userProfile)\n                .then(pl => {\n                    if (pl && pl.data) {\n                        dispatch(setGroupTeam(pl.data.GroupId, pl.data.TeamId, pl.data.TeamName, pl.data.IsOranizator, pl.data.TournamnentId));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при соединении с сервисом\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Ошибка запуска приложения\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// проверка связи с сервисом\nexport const getGroupTeamInfo = (groupId, userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if ((authQueryString && authQueryString.length > 0) && (groupId != \"\") && (userProfile != null))\n        GroupAPI.getTeamGroupFromServer(groupId, userProfile)\n                .then(pl => {\n                    if (pl && pl.data) {\n                        dispatch(setGroupTeam(pl.data.GroupId, pl.data.TeamId, pl.data.TeamName, pl.data.IsOranizator, pl.data.TournamnentId));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при соединении с сервисом\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Ошибка запуска приложения\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\nexport default groupReducer;","import { ProfileAPI, CityAPI, errorObj, VKAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\nconst VK_SET_SELECTED_USER = \"VK_SET_SELECTED_USER\";\n\n\nconst initState = {\n    selectedUser: {},\n    cities: [],\n}\n\n\nlet vkReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        case VK_SET_SELECTED_USER:{\n            return {...state,\n                selectedUser: {...action.user},\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n\nexport const setSelectedUser = (user) => {\n    return {\n        type: VK_SET_SELECTED_USER,\n        user\n    }\n}\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getUser = (id) => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            VKAPI.getUser(id)\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default vkReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Group, FormItem, Textarea, CardGrid, Card, Title, Caption } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport { dateToString, TimeIsNotAssigned, timeToString, dateIsMin, datesWithoutTimeIsSame, addToDate } from '../../../../utils/convertors/dateUtils';\n\nconst schet = {\n    fontWeight: 'bold', \n    color: 'yellow',\n    backgroundColor: 'gray',\n    padding: '1px 7px',\n    borderRadius: '10px',\n}\n\nconst win = {\n    fontWeight: 'bold',\n    //color: 'orange',\n}\n\nconst lose = {\n    color: 'darkgray',\n    //color: 'orange',\n}\n\n\nconst CardResultStyle = {\n    display: \"flex\", \n    height: \"100px\", \n    justifyContent: \"center\", \n    alignItems: \"center\",\n    overflow: \"hidden\",   \n    flexWrap: \"wrap\",\n}\n\nconst CardStyle = {\n        ...CardResultStyle,\n\n        flexWrap: \"no-wrap\",\n        alignSelf: \"center\",\n        alignContent: \"center\",\n    }\n\n\nconst MatchItem = (props) => {\n    \n    \n    let match=props.match;\n    let place=props.Place;\n    //let date = (match.When != null && !dateIsMin(match.When)) ? new Date(match.When) : null;\n    let date = (match.When != null && !dateIsMin(match.When)) \n        ? new Date(match.When) \n        : null;\n    let time = date != null \n    ? (TimeIsNotAssigned(date) ? \" время не указано\" : ` в ${timeToString(date.getHours(), date.getMinutes())}`)\n    : \"\";\n\n    const subCardStyle = {\n        ...CardResultStyle,\n\n        height: 'auto',\n        flexDirection: \"column\",\n        color: match.Played ? \"green\" : \"blue\",\n        flexWrap: \"no-wrap\",\n        alignSelf: \"center\",\n        alignContent: \"center\",\n    }\n\n    const centering = {\n        textAlign: \"center\",\n    }\n\n    return (\n        <Group>\n            \n            <FormItem>\n                <Caption level=\"4\" weight=\"regular\">\n                    {match.TournamentGroup.Tournament.OrganizatorName}\n                </Caption>\n                <Caption level=\"3\" weight=\"regular\">\n                    {match.TournamentGroup.Tournament.Name}\n                </Caption>\n                <Caption level=\"2\" weight=\"regular\">\n                    {match.TournamentGroup.Name}\n                </Caption>\n            </FormItem>\n            <FormItem>\n                <Caption level=\"1\" weight=\"bold\">\n                    {date != null\n                    ? <span>{`${dateToString(date, 0,0,0, true, true)}`}</span>\n                    : \"Дата не назначена\"\n                    }\n                </Caption>\n            </FormItem>\n            <FormItem></FormItem>\n            <CardGrid size=\"s\">\n                <Card style={CardStyle}>\n                    <div  style={centering}>\n                        {match.Team1Bid.TeamName} \n                    </div>\n                </Card>\n                <Card style={CardResultStyle} mode=\"shadow\">\n\n                    <div style={subCardStyle}>\n                        <Title level=\"1\" weight=\"bold\">\n                            {match && (match.Played ? `  ${match.Team1Goals} : ${match.Team2Goals}  ` : `    `)} \n                        </Title>\n                        <Caption level=\"4\" weight=\"bold\">\n                            {match.Place.Name}\n                        </Caption>\n                        <Caption level=\"1\" weight=\"bold\">\n                            {time}\n                        </Caption>\n                    </div>\n                     \n                </Card>\n                <Card style={CardStyle}>\n                <div  style={centering}>\n                    {match.Team2Bid.TeamName}\n                </div>\n                </Card>\n            </CardGrid>\n            <FormItem></FormItem>\n            <FormItem top=\"Комментарий к матчу\">\n                <Textarea \n                value={match.Description} \n                readOnly\n                style={{minHeight: '100px'}}\n                ></Textarea>\n            </FormItem>\n            \n        </Group>\n    ) \n }\n\nexport default MatchItem","import { Button, Cell, Footer, Group, PanelHeader, RichCell, Search } from '@vkontakte/vkui';\nimport React, { useState , useEffect } from 'react'\nimport { setSelectedTeam } from '../../../../store/teamsReducer';\n\n\n  let SimpleSearch = (props) => {\n    let [searchWord, setSearchWord] = useState(\"\")\n    let [resultArray, setResultArray] = useState([])\n\n    useEffect(() => {\n        setResultArray(props.List);\n    },[props.List])\n  \n    let onChange = (e) => {\n      setSearchWord( e.target.value );\n\n      let search = e.target.value.toLowerCase();\n      setResultArray(\n          props.List.filter(\n              (team) => team.Name.toLowerCase().indexOf(search) > -1\n              )\n      );\n    }\n\n    \n  \n\n      return (\n        <>\n          <>\n            <Search\n              value={searchWord}\n              onChange={onChange}\n              after={null}\n            />\n            {resultArray.length > 0 &&\n              resultArray.map((item) => (\n                <RichCell after={<Button onClick={() => props.ActionOnSelect(item.Id)}>Выбрать</Button>}>{item.Name}</RichCell>\n              ))}\n            {resultArray.length === 0 && <Footer>Ничего не найдено</Footer>}\n          </>\n        </>\n      );\n    \n  }\n  \n  \n//   const AdaptivitySearch = withPlatform(\n//     withAdaptivity(SearchExample, { sizeX: true })\n//   );\n  \nexport default SimpleSearch","import React, { useEffect, useState } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem, Group } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from './TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam, getTeamsInCity} from './../../../../store/teamsReducer'\nimport {connectTeamWithGroup} from './../../../../store/groupReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\nimport SimpleSearch from '../../Common/Search/SearchPanel';\nimport MatchListItem from '../Match/MatchListItem';\n\n\nconst GroupAdminPanel = (props) => {\n\n\tlet teams = props.team.teams;\n    let [showSearch, setShowSearch] = useState(false);\n\n    let SetOurTeam = (teamId) => {\n        props.connectTeamWithGroup(props.GroupId, teamId, props.myProfile);\n        setShowSearch(false);\n    }\n\nlet click = (match) => {\n\n    props.ClickHandler(match)\n}\n\n    useEffect(() =>{\n        \n        //props.getMyTeams(props.myProfile.UserProfileId);\n        props.getTeamsInCity(props.myProfile)\n        \n    }, props.myProfile)\n\n        return (\n            <>\n                {/* <FormItem>\n                    <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                </FormItem> */}\n                {\n                    props.UserIsGroupAdmin\n                    ?\n                    <>\n                    <FormItem top=\"Команда группы\">\n                        <RichCell\n                            after={props.TeamId \n                                ? <Button onClick={() => setShowSearch(true)}>Выбрать другую</Button> \n                                : <Button onClick={() => setShowSearch(true)}>Выбрать</Button>}\n                        >{props.TeamId \n                            ? teams.filter(x => x.Id == props.TeamId).length > 0 && teams.filter(x => x.Id == props.TeamId)[0].Name \n                            : \"Не выбрана\"}</RichCell>\n                        \n                    </FormItem>\n                    {showSearch && \n                        <FormItem top=\"Выбрать команду этой группы\">\n                            {/* <p>Команда: {props.TeamId ? \"\" : \"Не выбрана\"}</p> */}\n                            <SimpleSearch List={teams}\n                            ActionOnSelect={(teamId) => SetOurTeam(teamId)}\n                            >\n\n                            </SimpleSearch>\n                        </FormItem>\n                        }\n                    </>\n                    :\n                    <FormItem top=\"Команда группы\">\n                        <RichCell\n                        >{props.TeamName \n                            ? props.TeamName \n                            : \"Не выбрана админом группы\"}</RichCell>\n                        \n                    </FormItem>\n                }\n                <Group>\n                    {props.matchesByTeam\n                    .sort((a, b) => new Date(b.When).valueOf() - new Date(a.When).valueOf())\n                    .map(match => {\n                        return (\n                        <MatchListItem\n                            Match={match} Place={match.Place}\n                            ClickHandler={() => click(match)}\n                        ></MatchListItem>\n                        )\n\n                                \n\n                        //return \n                    })}\n                </Group>\n                {/* <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\n                </FormItem> */}\n                {/* <Group>\n                    <TeamAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTeam}\n                    Button2Handle = {DeleteTeam}\n                    List={props.team.myTeams}\n                    >\n                        \n                    </TeamAdminList>\n                </Group> */}\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tGroupId: state.groupEntity.GroupId,\n\t\tTeamId: state.groupEntity.TeamId,\n\t\tTeamName: state.groupEntity.TeamName,\n\t\tUserIsGroupAdmin: state.profileEntity.isGroupAdmin,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n\t\tmatchesByTeam: state.matches.matchesBySelectedTeam,\n        team: state.teamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam, connectTeamWithGroup, getTeamsInCity,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(GroupAdminPanel);","import bridge from '@vkontakte/vk-bridge';\nimport { Avatar, Button, calcInitialsAvatarColor, Caption, Card, CardGrid, Cell, DatePicker, Div, Epic, FormItem, Group, Header, InfoRow, InitialsAvatar, Input, List, Panel, PanelHeader, PullToRefresh, ScreenSpinner, Slider, Snackbar, Tabbar, Title, View } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport {getCurrentExpirienceName, useIsConnected} from './store/selectors/selectors'\nimport request from 'request'\nimport { connect } from 'react-redux';\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\nimport SimpleCollectItem from './components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem';\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\nimport Hot from './components/Panels/Common/Hot/Hot';\nimport CardWithHistory from './components/Panels/Common/WithHistory/CardWithHistory';\nimport CellButtonWithHistory from './components/Panels/Common/WithHistory/CellButtonWithHistory';\nimport RichCellWithHistory from './components/Panels/Common/WithHistory/RichCellWithHistory';\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\nimport ButtonWithNotify from './components/Panels/Common/WithNotify/ButtonWithNotify';\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\nimport player from './img/common/player300-s.png';\nimport stadium from './img/common/stadium300-s.png';\nimport tournament from './img/common/tournament300.png';\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity } from './store/bidTeamsReducer';\nimport { getAllCitiesFromServer } from './store/cityReducer';\nimport { getAllSimpleCollectsInCityByCityUmbracoId, selectSimpleCollect, setCollectItemMode } from './store/collectReducer';\nimport { setActiveMenuItem } from './store/mainMenuReducer';\nimport { getMatchesInCurrentCity, setHotPanel, setSelectedMatch, getTeamSheduleByTeamId } from './store/matchReducer';\nimport { registerUser, getUserProfile, setUserProfileCity, setBirthDate,\n\tsaveUserProfile, setVkProfileInfo, setVkProfileInfoAndSetFlags, setUserName, setUserSurName, setMyTotalExpirience, setUserIsGroupAdmin } from './store/profileReducer';\nimport { getAllRentsInCityByCityId } from './store/rentReducer';\nimport { connectTeamWithGroup, getGroupTeamInfo, setGroup } from './store/groupReducer';\nimport { getAllSimplePlacesInCityByCityId } from './store/simplePlaceReducer';\nimport { goToPanel, resetError, setCurrentModalWindow, checkConnection, setGlobalPopout, \n\tsetLoading, setShowAdminTourneyTab, updateLoading, setShowGroupTab, \n\tsetTriedToLoadOblakoProfile, setTriedToLoadVkProfile,  } from './store/systemReducer';\nimport { addTournamentGroup, getAllCityTournamentAdminsByCityId, getTournamentsByCityId, setSelectedTournament, setTournamentMode } from './store/tournamentsReducer';\nimport { getUser, setSelectedUser } from './store/vkReducer';\nimport { addToTime, dateToString, jSDateValueToDateSelectorValue } from './utils/convertors/dateUtils';\nimport MatchItem from './components/Panels/AdminPanel/Match/MatchItem';\nimport { useDispatch } from 'react-redux';\nimport GroupAdminPanel from './components/Panels/AdminPanel/Team/GroupAdminPanel';\nimport { myProfile } from './store/constants/commonConstants';\nimport { Icon16Done, Icon56GestureOutline } from '@vkontakte/icons';\nimport { Icon28CloudOutline } from '@vkontakte/icons';\n\n\n\nconst App = (props) => {\n\tconst [launchParams, setLaunchParams] = useState(null);\n\tconst [groupInfo, setGroupInfo] = useState(null);\n\tconst [isFetching, setIsFetching] = useState(false);\n\tconst [snackBar, setSnackBar] = useState(null);\n\t\n\tconst debugModeOn = false; // флаг показа логов\n\t//const [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t//const [modalWindow, setModalWindow] = useState(null);\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\n\tconst [timerStarts, setTimerStarts] = useState(false);\n\tlet connectionTimer = null;\n\n\tconst cardStyle = {\n\t\tposition: 'absolute', \n\t\tbottom: '0px', \n\t\tleft:'0px',  \n\t\twidth: '100%', \n\t\theight: '20%',\n\t\tbackground: 'white', \n\t\tpadding: '15px 0',\n\t\ttextAlign: 'center',\n\t\tfontSize: document.documentElement.clientWidth <= 460 ? '9px' : (document.documentElement.clientWidth <= 500 ? '12px' : '13px'),\n\t\topacity: '0.91',\n\t\tborderRadius: '10px',\n\t\tcolor: 'black',\n\t} \n\t\n\tlet addToCommunity =() => {\n\t\tbridge.send(\"VKWebAppJoinGroup\", {\"group_id\": +209616079}).then(() => {\n\t\t\tsetSnackBar(<Snackbar\n\t\t\t\tlayout=\"vertical\"\n\t\t\t\tonClose={() => setSnackBar(null)}\n\t\t\t\t// action=\"Подписаться на сообщество «Облако спорта\"\n\t\t\t\t// onActionClick={() =>\n\t\t\t\t//   this.setState({ text: \"Открыта подробная информация.\" })\n\t\t\t\t// }\n\t\t\t\tbefore={\n\t\t\t\t  <Avatar size={24} style={{ background: \"var(--accent)\" }}>\n\t\t\t\t\t<Icon16Done fill=\"#fff\" width={14} height={14} />\n\t\t\t\t  </Avatar>\n\t\t\t\t}\n\t\t\t>\n\t\t\t\tУспешная подписка на сообщество \"Облако спорта\"\n\t\t\t\t</Snackbar>)\n\t\t})\n\t\t;\n\t}\n\n\t// функция вывода на консоль. легко отключается флагом\n\tconst consoleLog = (message) => {\n\t\tif (debugModeOn)\n\t\t\tconsole.log(message);\n\t}\n\n// интервальная проверка новых мест, сборов и аренд\n\tconst checkMovings = () => {\n\t\t//alert('Привет');\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\t\t\t{\n\t\t\t\t// получаем список простых мест по umbId города\n\t\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых сборов\n\t\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\t\n\t\t\t\t// получаем список аренд\n\t\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n// интервальная проверка соединения\n\tconst CheckConnection = () => {\n\t\tlet ii = store.getState();\n\n\t\tif (ii.system.Connected) {\n\t\t\tconsoleLog(\"timer stopped in CheckConnection\");\n\t\t\tclearInterval(connectionTimer);\n\t\t}\n\t\telse{\n\t\t\tconsoleLog(\"timer fires in CheckConnection, props.Connected=\" + ii.system.Connected);\n\t\t\tprops.checkConnection();\n\t\t}\n\t}\n\n\n\tconst CloseModal = () => {\n\t\tprops.resetError()\n\t\tprops.setCurrentModalWindow(null)\n\t}\n\n\n\t// !! ================ useffects загрузка приложения ================== !!\n\n\t// загрузка информации о пользователе ВК (внутри первого useffect с пустыми параметрами)\n\tasync function fetchData() {\n\n\t\tbridge.send('VKWebAppGetUserInfo').then((user) => {\n\t\t\tprops.setVkProfileInfoAndSetFlags(user);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tprops.setTriedToLoadVkProfile(1);\n\t\t});\n\n\n\t\tbridge.send(\"VKWebAppGetLaunchParams\").then((data) => {\n\n\t\t\tsetLaunchParams(data);\n\t\t\tif (data.vk_viewer_group_role == \"admin\"){\n\t\t\t\tprops.setShowGroupTab(true);\n\t\t\t\tprops.setUserIsGroupAdmin(true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprops.setShowGroupTab(false);\n\t\t\t\tprops.setUserIsGroupAdmin(false);\n\t\t\t}\n\n\t\t\tif (+data.vk_group_id > 0){\n\t\t\t\tbridge.send(\"VKWebAppGetGroupInfo\", {\"group_id\": +data.vk_group_id}).then((info) => {\n\t\t\t\t\tdebugger\n\t\t\t\t\tprops.setGroup(info.id);\n\t\t\t\t\tsetGroupInfo(info);\n\t\t\t\t\t// получаем информацию о команде, связанной с группой\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t// 1 это системное, загрузка приложения вк\n\tuseEffect(() => {\n\t\tif (props.myProfile && props.myProfile.CityUmbracoId != undefined){\n\t\t\tprops.setLoading(true);\n\t\t}\n\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\n\t\tfetchData();\n\t\tconsoleLog(\"1 start fetchData()\")\n\n\t}, []);\n\n\t// 2 после загрузки профиля ВК\n\tuseEffect(() => {\n\n\t\tif (props.VkProfileLoaded){\n\t\t\tif (!props.Connected) {\n\n\t\t\t\tconsoleLog(\"2 start checkConnection()\")\n\t\t\t\tprops.checkConnection();\n\t\t\t\tconnectionTimer = setInterval(() => {\n\t\t\t\t\tCheckConnection()\n\t\t\t\t}, 5000)\n\t\t\t}\n\t\t}\n\t}, [props.VkProfileLoaded])\n\n\t// 3 после загрузки профиля вк и соединения с сервером пытаемся загрузить профиль пользователя облака\n\tuseEffect(() => {\n\t\tconsoleLog(\"3 check if. Connected=\" + (props.Connected) + \" , vkProfile=\" + (props.vkProfile!=null) + \", myProfile=\" + (props.myProfile==null))\n\t\t\n\t\tif (props.Connected && !props.OblakoProfileLoaded) {\n\t\t\tconsoleLog(\"3 start getUserProfile()\")\n\t\t\tprops.getAllCitiesFromServer();\n\t\t\tprops.getUserProfile(props.vkProfile);\n\t\t}\n\n\t}, [props.Connected])\n\t\n\t// 5 регистрация пользователя\n\tuseEffect(() => {\n\n\t\t// корректируем дату рождения если данные с вк загружены, а с облака нет\n\t\tif ((props.VkProfileLoaded) && ((!props.VkProfileBirthYearLoaded) || (!props.VkProfileBirthDateLoaded)) && (!props.OblakoProfileLoaded))\n\t\t{\n\t\t\tif ((props.vkProfile) && (props.vkProfile.bdate == undefined))\n\t\t\t{\n\t\t\t\tconsoleLog(\"5 selectBirth\")\n\n\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} action2={props.setTriedToLoadOblakoProfile} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t}\n\t\t\telse if ((props.vkProfile) && (props.vkProfile.bdate.split('.').length == 2)) \n\t\t\t{\n\t\t\t\tconsoleLog(\"5 selectBirthYear\")\n\t\t\t\t\n\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirthYear\" data={props.vkProfile} action={props.setVkProfileInfo} action2={props.setTriedToLoadOblakoProfile} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t}\n\t\t}\n\n\t\tdebugger\n\t\t// если данные вк загружены, нет проблем с датой и профиль облака не загружен\n\t\tif ((props.VkProfileLoaded) \n\t\t\t&& (props.TriedToLoadOblakoProfile > 0) \n\t\t\t&& (!props.OblakoProfileLoaded)\n\t\t\t&& (props.vkProfile.bdate != undefined) \n\t\t\t&& (props.vkProfile.bdate.split('.').length > 2)\n\t\t\t) \n\t\t{\n\t\t\tprops.registerUser(props.vkProfile); // регаем\n\t\t\tconsoleLog(\"5 start getAuthInfo() - register\")\t\n\t\t}\n\t}, [props.TriedToLoadOblakoProfile, props.VkProfileBirthYearLoaded, props.VkProfileBirthDateLoaded])\n\t\n\t// проверка указан ли город\n\tuseEffect(() => {\n\t\tif (props.OblakoProfileLoaded) {\n\t\t\tconsoleLog(\"4 error in userprofile city\")\n\n\t\t\t\tif (!props.OblakoProfileCityLoaded){\n\t\t\t\t\t// предлагаем выбрать город\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" \n\t\t\t\t\t\tdata={{ profile: props.myProfile, cities: props.cities }} \n\t\t\t\t\t\taction={props.setUserProfileCity} \n\t\t\t\t\t\tClose={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t}\n\t}, [props.OblakoProfileLoaded, props.OblakoProfileBirthDateLoaded, props.OblakoProfileCityLoaded])\n\n\n\t// 6 загрузка мест, админов города, текущих турниров\n\tuseEffect(() => {\n\t\t//consoleLog(\"6 cities fire\")\n\t\t// а это уже когда прогрузился и выбран город профиля\n\t\tif (props.OblakoProfileLoaded && props.OblakoProfileCityLoaded)\n\t\t{\n\t\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t\t\n\t\t\t\tconsoleLog(\"6 start loadAll()\")\n\t\t\t\t// props.setGlobalPopout(false);\n\t\t\t\t// props.setCurrentModalWindow(null);\n\n\t\t\t\t// загружаем места этого города\n\t\t\t\tprops.goToPanel(\"hot\", false)\n\n\t\t\t\t// получаем список админов турниров города по umbId города\n\t\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список активных турниров города по umbId города и текущей дате\n\t\t\t\tprops.getTournamentsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых мест по umbId города\n\t\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых сборов\n\t\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список аренд\n\t\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\n\n\t\t\t\tif (!timerStarts)\n\t\t\t\t{\n\t\t\t\t\tsetTimerStarts(true);\n\t\t\t\t\tsetTimeout(() => setInterval(() => checkMovings(), 20000), 20000)\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\t// это пока не прогрузился город профиля (не выбран)\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\n\t\t{\n\n\t\t\t// предлагаем выбрать город\n\t\t\tprops.setGlobalPopout(false);\n\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t}\n\n\n\t}, [ props.cities, props.OblakoProfileLoaded, props.OblakoProfileCityLoaded]) //props.myProfile, props.vkProfile,\n\n\t// 7 загрузка матчей в выбранном городе\n\tuseEffect(() => {\n\t\tif (props.places && props.places.length > 0) {\n\n\t\t\tprops.getMatchesInCurrentCity(props.myProfile);\n\t\t\tconsoleLog(\"7 start getMatchesInCurrentCity()\")\n\t\t\t\n\t\t\t// завершили загрузку\n\t\t\tif (props.Loading){\n\t\t\t\tprops.setLoading(false);\n\n\t\t\t\tif (props.appIsFirstStart)\n\t\t\t\t{\n\t\t\t\t\tprops.setCurrentModalWindow(\n\t\t\t\t\t\t<ModalCommon modalName=\"Info\" \n\t\t\t\t\t\tdata={\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: props.myProfile.Name + \", добро пожаловать в Облако спорта!\",\n\t\t\t\t\t\t\t\tMessage: <>\n\t\t\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\tПоздравляем! Вы стали частью большого проекта по созданию единого пространства любительского спорта России.\n                                </Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"bold\">\n\t\t\t\t\t\t\t\tЧто это?\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\tЭто сервис, где вы можете следить за статистикой сразу всех спортивных турниров вашего города. \n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"bold\">\n\t\t\t\t\t\t\t\tЗачем это?\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\tЭто удобство и экономия вашего времени. Добавьте приложение в избранное или установите в сообщество вашей команды.\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"bold\">\n\t\t\t\t\t\t\t\tЭто всё?\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\tНет. Сейчас мы активно работаем над расширением функционала приложение.\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"bold\">\n\t\t\t\t\t\t\t\tПодписывайтесь на сообщество \"Облако спорта\"\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\t\tчтобы узнать о всех возможностях сервиса и быть в курсе новых функций\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\t\t<Button mode=\"commerce\" onClick={addToCommunity}>Подписаться</Button>\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tClose={() => props.setCurrentModalWindow(null)\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tIcon={<Icon56GestureOutline></Icon56GestureOutline>}\n\t\t\t\t\t\t>\n\t\n\t\t\t\t\t\t</ModalCommon>\n\t\t\t\t\t)\n\t\t\t\t\t// отобразить окно первого запуска\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [props.places])\n\n\t// 8 загрузка команды, связанной с группой\n\tuseEffect(() => {\n\t\tif (props.groupId && props.myProfile)\n\t\t{\n\t\t\tprops.getGroupTeamInfo(props.groupId, props.myProfile);\n\t\t}\n\t\t\n\t}, [props.groupId, props.myProfile])\n\t\n\t// 9 загрузка расписания игр команды, связанной с группой\n\tuseEffect(() => {\n\t\t\n\t\tif (props.teamId && props.myProfile)\n\t\t{\n\t\t\t// переадресовываем на вкладку команды\n\t\t\t// показываем вкладку Моя команда\n\t\t\tprops.setShowGroupTab(true);\n\t\t\tprops.getTeamSheduleByTeamId(props.teamId, props.myProfile, props.groupId);\n\t\t}\n\t}, [props.teamId])\n\t\n\n\t// при смене глобального Popout и возникновении ошибки\n\tuseEffect(() => {\n\t\tif (props.errorObject && props.errorObject != \"\") {\n\t\t}\n\t\telse {\n\t\t}\n\t}, [props.errorObject])\n\n    // отобразить панель админа турниров\n\tuseEffect(() => {\n\t\t// если загрузились админы города\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\n\t\t\t// отображаем пункт меню администрирование турниров\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\n\t\t\t\tprops.setShowAdminTourneyTab(true)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.setShowAdminTourneyTab(false)\n\t\t\t}\n\t\t}\n\t}, [props.tournamentAdmins])\n\n\tuseEffect(() => {\n\n\t\tif (props.IsOranizator == true && props.TournamentId != null && props.tournament != null && props.tournament.tournaments != null && props.tournament.tournaments.length > 0)\n\t\t{\n\t\t\tlet filtredTournaments = props.tournament.tournaments.filter(t => t.Id == props.TournamentId);\n\t\t\tif (filtredTournaments != null && filtredTournaments.length > 0){\n\t\t\t\tTournamentSelect(filtredTournaments[0]);\n\t\t\t}\n\t\t}\n\t}, [props.TournamentId, props.IsOranizator, props.tournament.tournaments])\n\n\t// !! ================ useffects загрузка приложения ================== !!\n\n\tconst onRefresh = () => {\n\t\twindow.location.reload(true);\n\t\tsetIsFetching(false);\n\t}\n\n\tconst TournamentSelect = (item) => {\n\t\t//debugger\n\t\tprops.goToPanel(\"tournamentitem\", false)\n\t\tprops.setTournamentMode(\"view\");\n\t\tprops.setSelectedTournament(item);\n\t\t// надо заполнять TournamentGroups!\n\t\t//props.setActiveMenuItem(\"tournamentitem\"); // отключил, тк установил компонент hoc withHistory\n\t\t//toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\"\n\t}\n\n\tconst CollectSelect = (item) => {\n\t\t//debugger\n\t\tprops.selectSimpleCollect(item);\n\t\tprops.setCollectItemMode(\"view\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил тк использовал компонент с hoc withHistory\n\t}\n\n\tconst CollectAdd = () => {\n\t\t//debugger\n\t\tprops.setCollectItemMode(\"add\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил, тк сделал кнопку через hoc withHistory\n\t}\n\n\tconst UpdateFromServer = () => {\n\t\twindow.location.reload(true);\n\t}\n\n\tlet goToViewMatch = (match) => {\n\n        props.setSelectedMatch(match)\n\n        props.goToPanel(\"matchitem\", false)\n    }\n\n\tlet test = () => {\n\t\t\n\t\t\n\t}\n\n\tlet addToGroup = () => {\n\t\tbridge.send(\"VKWebAppAddToCommunity\")\n\t\t\t.then(dat => {\n\n\t\t\t\tbridge.send(\"VKWebAppGetGroupInfo\", {\"group_id\": Number(dat.group_id)})\n\t\t\t\t.then(group => \n\t\t\t\t\tprops.setCurrentModalWindow(\n\t\t\t\t\t\t<ModalCommon modalName=\"Info\" \n\t\t\t\t\t\tdata={\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tName: \"Приложение добавлено успешно\",\n\t\t\t\t\t\t\t\tMessage:`Вы успешно добавили приложение в группу ${group.name}.\n\t\t\t\t\t\t\t\tТеперь для того чтобы настроить свою команду запустите приложение из сообщества от имени администратора сообщества и настройте параметры на вкладке Моя Команда`\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tClose={() => props.setCurrentModalWindow(null)\n\t\t\t\t\t\t}>\n\t\n\t\t\t\t\t\t</ModalCommon>\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t.catch(error => {\n\t\t\t\t\t//debugger\n\t\t\t\t\t//log_error(error)\n\t\t\t\t\t//alert(error.error_data)})\n\t\t\t\t})\n\n\t\t\t\t// первоначально прописываем установку в группу на сервере\n\t\t\t\tprops.connectTeamWithGroup(dat.group_id, -1, props.myProfile);\n\t\t\t})\n\t}\n\n\tlet previewWidgetGroup = () => {\n\t\t// bridge.send(\"VKWebAppShowCommunityWidgetPreviewBox\", \n\t\t// {\"group_id\": 178163868, \"type\": \"text\", \"code\": \n\t\t// \"return {\\\"title\\\": \\\"Цитата\\\",\\\"text\\\": \\\"Текст цитаты\\\"};\"})\n\t\t// .then(null, (data) => {\n\t\t// \tdebugger\n\t\t// \talert(data.error_data);\n\t\t// })\n\t\t\n\t\t//.then((data) => addToGroup(data.group_id))\n\t\t;\n\t}\n\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\n\t\tif (menuItem.enabled && menuItem.show)\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\n\t\telse\n\t\t\treturn null\n\t}\n\t).filter(i => i);\n\n\t//if ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\n\n\n\n\treturn (\n\t\t<PullToRefresh\n            onRefresh={onRefresh}\n            isFetching={isFetching}\n          >\n\t\t\t  <PanelHeader left={<BackButton isBack={true} />}>\n\t\t\t\t  <h6>потяните вниз для обновления</h6>\n\t\t\t  </PanelHeader>\n\t\t\t<Epic\n\t\t\t\tactiveStory={props.mainMenu.activeItem.name}\n\t\t\t\ttabbar={props.Connected ? \n\t\t\t\t\t<Tabbar>\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\n\t\t\t\t\t\t{/* <TabbarItemWithHistory toMenuName=\"collectslist\" selected={\"collectslist\" === props.mainMenu.activeItem.name} data-story=\"collectslist\" text=\"Сборы\"></TabbarItemWithHistory> */}\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\n\t\t\t\t\t\t{props.ShowGroupTab && <TabbarItemWithHistory toMenuName=\"groupadmin\" selected={\"groupadmin\" === props.mainMenu.activeItem.name} data-story=\"groupadmin\" text={props.teamName ? props.teamName : \"Команда группы\"}></TabbarItemWithHistory>}\n\t\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\n\t\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\n\t\t\t\t\t</Tabbar>\n\t\t\t\t: null\t\n\t\t\t\t}>\n\n\t\t\t\t<View id=\"hot\" \n\t\t\t\t//activePanel={props.matches.hotPanel} \n\t\t\t\tactivePanel=\"main\" \n\t\t\t\tmodal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t{/* <PanelHeader >Горячее в городе</PanelHeader> */}\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сервисы</Header>}>\n\t\t\t\t\t\t\t<CardGrid size=\"s\">\n\t\t\t\t\t\t\t\t<CardWithHistory\n\t\t\t\t\t\t\t\t\tdata-story=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\ttext=\"Перейти к турнирам\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\ttoMenuName=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\t//handleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={tournament}></img>\n\t\t\t\t\t\t\t\t\t<span \n\t\t\t\t\t\t\t\t\tstyle={cardStyle}\n\t\t\t\t\t\t\t\t\t>Городские турниры<br />Костромы</span>\n\t\t\t\t\t\t\t\t</CardWithHistory>\n\t\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={player}></img>\n\t\t\t\t\t\t\t\t\t<span \n\t\t\t\t\t\t\t\t\tstyle={cardStyle}\n\t\t\t\t\t\t\t\t\t>Сборы на тренировку<br /><span style={{color: \"red\"}}>[скоро запуск]</span></span>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t<Card onClick={test}>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={stadium}></img>\n\t\t\t\t\t\t\t\t\t<span \n\t\t\t\t\t\t\t\t\tstyle={cardStyle}\n\t\t\t\t\t\t\t\t\t>Бронирование площадки<br /><span style={{color: \"red\"}}>[скоро запуск]</span></span>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Предстоящие матчи</Header>}>\n\t\t\t\t\t\t\t<Hot Name=\"Сегодня\" ClickHandler={goToViewMatch} Matches={props.matches.hot.today}></Hot>\n\t\t\t\t\t\t\t<Hot Name=\"Завтра\" ClickHandler={goToViewMatch} Matches={props.matches.hot.tomorrow}></Hot>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сыграны вчера</Header>}>\n\t\t\t\t\t\t\t<Hot ClickHandler={goToViewMatch} Matches={props.matches.hot.yesterday}></Hot>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t\n\t\t\t\t</View>\n\t\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<Group header={<Header>Текущие турниры города</Header>}>\n\t\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.tournament.tournaments.map(t => {\n\n\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\tcaption={<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p style={{lineHeight: '7px', fontSize: '12px', color: 'gray'}}>Организатор: {t.OrganizatorName}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t{/* <p style={{lineHeight: '7px', fontSize: '12px', color: 'gray'}}>Админ: {t.Founder.Name} {t.Founder.Surname}</p> */}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>}\n\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.WhenBegin) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t`Стартует \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.WhenBegin).getDate() <= 9 ? \"0\" + (new Date(t.WhenBegin).getDate()) : (new Date(t.WhenBegin).getDate())}.${new Date(t.WhenBegin).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.WhenBegin).getMonth() + 1) : (new Date(t.WhenBegin).getMonth() + 1)}.${new Date(t.WhenBegin).getFullYear()}`\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"}\n\t\t\t\t\t\t\t\t\t\t\thandleClick={() => TournamentSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\t\tbefore={<InitialsAvatar\n\t\t\t\t\t\t\t\t\t\t\t\tgradientColor={calcInitialsAvatarColor(t.Id)}\n\t\t\t\t\t\t\t\t\t\t\t\tsize={56}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h6>{t.OrganizatorNameShort}</h6>\n\t\t\t\t\t\t\t\t\t\t\t</InitialsAvatar>}\n\t\t\t\t\t\t\t\t\t\t>{t.Name}</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</List>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group hidden header={<Header>Архивные турниры города</Header>}>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"collectslist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Все сборы</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t<CellButtonWithHistory\n\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttext=\"Создать сбор\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\thandleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tАрендовать площадку и собрать людей</CellButtonWithHistory>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t<Group header={<Header>Текущие сборы города</Header>}>\n\t\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tprops.collect.collects.sort((a, b) => new Date(a.When).getTime() - new Date(b.When).getTime())\n\t\t\t\t\t\t\t\t\t\t.map(t => {\n\t\t\t\t\t\t\t\t\t\t\tlet timeEnding = addToTime(new Date(t.When), 0, t.DurationMinutes);\n\n\t\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Creator.Name} ${t.Creator.Surname}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.When) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Начало \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getDate() <= 9 ? \"0\" + (new Date(t.When).getDate()) : (new Date(t.When).getDate())}.${new Date(t.When).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.When).getMonth() + 1) : (new Date(t.When).getMonth() + 1)}.${new Date(t.When).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tв \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getHours() <= 9 ? \"0\" + (new Date(t.When).getHours()) : (new Date(t.When).getHours())}:${new Date(t.When).getMinutes() <= 9 ? \"0\" + (new Date(t.When).getMinutes()) : (new Date(t.When).getMinutes())}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t((timeEnding > new Date())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Закончен\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick={() => CollectSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\t\tafter={`${t.Cost} руб.`}\n\t\t\t\t\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"\n\t\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"\n\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t({t.Members.length}/{t.NeedMembers}) - {t.Name}\n\t\t\t\t\t\t\t\t\t\t\t</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</List>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group hidden header={<Header>Архивные сборы</Header>}>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"collectadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Управление сборами</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<SimpleCollectItem></SimpleCollectItem>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"profile\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Мой профиль</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <FormItem>\n\n\t\t\t\t\t\t\t<FormItem top=\"Установка приложения для вашего сообщества ВК\">\n\t\t\t\t\t\t\t\t<Caption weight=\"medium\" level=\"2\">\n\t\t\t\t\t\t\t\tВы можете установить приложение к себе в группу и настроить отображение расписания игр вашей команды во всех турнирах сразу.\n\t\t\t\t\t\t\t\tДля этого нажимайте на кнопку \"Установить в сообщество\", выбирайте сообщество, жмите добавить. После установки зайдите в сообщество от имени администратора,\n\t\t\t\t\t\t\t\tзапустите приложение и на вкладке \"Команда группы\" выберите команду, расписание которой хотите видеть.\n\t\t\t\t\t\t\t\tПосле выбора команды все, кто запустит приложение из вашего сообщества, увидят вкладку с вашей командой и ваше расписание игр.\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t{/* <Button onClick={() => previewWidgetGroup()}>Предспросмотр виджета в сообществе</Button> */}\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<Button onClick={() => addToGroup()}>Установить в сообщество</Button>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"medium\">\n\t\t\t\t\t\t\t\tПодписывайтесь на сообщество \"Облако спорта\"\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"regular\">\n\t\t\t\t\t\t\t\t\tчтобы узнать о всех возможностях сервиса и быть в курсе новых функций\n\t\t\t\t\t\t\t\t</Caption>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<Button mode=\"commerce\" onClick={addToCommunity}>Подписаться на \"Облако спорта\"</Button>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem top=\"Имя\">\n\t\t\t\t\t\t\t\t<Input value={props.myProfile && props.myProfile.Name} onChange={props.setUserName}></Input>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem top=\"Фамилия\">\n\t\t\t\t\t\t\t\t<Input value={props.myProfile && props.myProfile.Surname} onChange={props.setUserSurName}></Input>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<FormItem top=\"Уровень игры\">\n\t\t\t\t\t\t\t\t<Caption level=\"2\">Указанное здесь значение будет влиять на подбор партнеров по игре. Указав наиболее правдивое значение, вам будет удобнее пользоваться сервисом</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\">Для изменения уровня перетягивайте ползунок влево и вправо. После выбора уровня нажмите на кнопку \"Сохранить\"</Caption>\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\t\t\t\tvalue={props.myProfile && Number(props.myProfile.TotalExpirience)}\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.setMyTotalExpirience(e)}\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</Slider>\n\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"semibold\">Выбранный уровень: {getCurrentExpirienceName(props.myProfile.TotalExpirience)}</Caption>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<FormItem top=\"Дата рождения\">\n\t\t\t\t\t\t\t\t<DatePicker\n\t\t\t\t\t\t\t\tmin={{ day: 1, \n\t\t\t\t\t\t\t\t\tmonth: 0, \n\t\t\t\t\t\t\t\t\tyear: new Date().getFullYear()-100 }}\n\t\t\t\t\t\t\t\tmax={{ day: 31, \n\t\t\t\t\t\t\t\t\tmonth: 12, \n\t\t\t\t\t\t\t\t\tyear: new Date().getFullYear() }}\n\t\t\t\t\t\t\t\t//defaultValue={new Date(props.myProfile.Birth)}\n\t\t\t\t\t\t\t\tdefaultValue={{\n\t\t\t\t\t\t\t\t\tday: new Date(props.myProfile.Birth).getDate(), \n\t\t\t\t\t\t\t\t\tmonth: new Date(props.myProfile.Birth).getMonth()+1, \n\t\t\t\t\t\t\t\t\tyear: new Date(props.myProfile.Birth).getFullYear()}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tonDateChange={(value) => { props.setBirthDate(value) }}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t{/* <DatePicker\n\t\t\t\t\t\t\t\t\t\tmin={{ day: 1, month: 1, year: 1901 }}\n\t\t\t\t\t\t\t\t\t\tmax={{ day: 1, month: 1, year: new Date().getFullYear() - 10 }}\n\t\t\t\t\t\t\t\t\t\t// dayPlaceholder=\"ДД\"\n\t\t\t\t\t\t\t\t\t\t// monthPlaceholder=\"ММММ\"\n\t\t\t\t\t\t\t\t\t\t// yearPlaceholder=\"ГГГГ\" \n\t\t\t\t\t\t\t\t\t\tdefaultValue={{\n\t\t\t\t\t\t\t\t\t\t\tday: new Date(props.myProfile.Birth).getDate(), \n\t\t\t\t\t\t\t\t\t\t\tmonth: new Date(props.myProfile.Birth).getMonth(), \n\t\t\t\t\t\t\t\t\t\t\tyear: new Date(props.myProfile.Birth).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t\t}/> */}\n\t\t\t\t\t\t\t</FormItem>\n\n\t\t\t\t\t\t\t<FormItem top=\"Город из профиля ВК\">{props.myProfile && props.myProfile.CityName}</FormItem>\n\t\t\t\t\t\t\t<FormItem top=\"Город привязки турниров и сборов\">{props.myProfile && props.myProfile.CityUmbracoName}</FormItem>\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<Button onClick={() => props.saveUserProfile(props.myProfile)}>Сохранить данные профиля</Button>\n\t\t\t\t\t\t\t</FormItem>\n\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t{/* <Group hidden>\n\t\t\t\t\t\t\tОписание проекта, возможность написать автору, выбор амплуа, выбор уровня (не играл, новичек, город и тд)\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\tСсылка на сайт и на канал на ютубе, где документация есть по проекту\n\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\tсделать кнопку \"подписаться на уведомления\"\n\t\t\t\t\t\t\tзапросить разрешение на отправку сообщения от имени приложения (или сообщества?)\n\t\t\t\t\t\t</Group> */}\n\t\t\t\t\t\t{/* <Group header=\"Опции\" hidden>\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<ButtonWithNotify Message=\"Подписаться на уведомления от сервиса?\" mode=\"primary\" Yes={() => bridge.send(\"VKWebAppAllowNotifications\")}>Подписаться на события</ButtonWithNotify>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Group> */}\n\t\t\t\t\t\t<ProfilePanel></ProfilePanel>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Управление турнирами</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Мои команды</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"groupadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<GroupAdminPanel ClickHandler={goToViewMatch}></GroupAdminPanel>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<Group\n\t\t\t\t\t\t\t\t// header={<Header>\n\t\t\t\t\t\t\t\t// \t<h4>{props.tournament.selected.Name}</h4>\n\t\t\t\t\t\t\t\t// \t</Header>}\n\t\t\t\t\t\t\t>\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<TournamentItem\n\t\t\t\t\t\t\t\t\tmode={props.tournament.mode}\n\t\t\t\t\t\t\t\t//Tab=\"shedule\"\n\t\t\t\t\t\t\t\t//mode=\"view\"\n\t\t\t\t\t\t\t\t></TournamentItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Команда</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"matchitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\t// header={<Header>Матч</Header>}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MatchItem match={props.matches.selected}></MatchItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Доступно для заявки</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\n\t\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\n\t\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\n\t\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \n\t\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \n\t\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \n\t\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\n\t\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Игрок</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"notauthorized\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<CardGrid size=\"l\">\n\t\t\t\t\t\t\t<Card style={{height: '100%'}}>\n\t\t\t\t\t\t\t\t<FormItem style={{height: '100px'}}>\n\t\t\t\t\t\t\t\t\t<span style={cardStyle}><Title>{!props.Connected ? 'Соединение...' : 'Авторизация...'}</Title></span>\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t\t\n\t\t\t\t\t</Panel>\n\t\t\t\t\t\n\t\t\t\t</View>\n\n\n\t\t\t</Epic>\n\t\t\t{snackBar && snackBar}\n\t\t</PullToRefresh>\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\n\t\tShowGroupTab: state.system.ShowGroupTab,\n\t\tCurrentModalWindow: state.system.CurrentModalWindow,\n\t\t\n\t\terrorObject: state.system.ErrorObject,\n\t\tglobalPopout: state.system.GlobalPopout,\n\t\tLoading: state.system.Loading,\n\t\tCheckLoading: state.system.CheckLoading,\n\t\t\n\t\tConnected: state.system.Connected,\n\t\tVkProfileLoaded: state.system.VkProfileLoaded,\n\t\tVkProfileBirthDateLoaded: state.system.VkProfileBirthDateLoaded,\n\t\tVkProfileBirthYearLoaded: state.system.VkProfileBirthYearLoaded,\n\t\tVkProfileCityLoaded: state.system.VkProfileCityLoaded,\n\t\tOblakoProfileLoaded: state.system.OblakoProfileLoaded,\n\t\tOblakoProfileBirthDateLoaded: state.profileEntity.myProfile ? new Date(state.profileEntity.myProfile.Birth).getFullYear() > 1920 : false,\n\t\tOblakoProfileCityLoaded: state.profileEntity.myProfile && (state.profileEntity.myProfile.CityUmbracoId >= 0 && state.profileEntity.myProfile.CityUmbracoId != 1267),\n    \tTriedToLoadVkProfile: state.system.TriedToLoadVkProfile,\n    \tTriedToLoadOblakoProfile: state.system.TriedToLoadOblakoProfile,\n\t\t\n\t\tvkProfile: state.profileEntity.vkProfile,\n\t\tmyProfile: state.profileEntity.myProfile,\n\t\t\n\t\tcities: state.cityEntity.cities,\n\t\t//places: state.placeEntity.places,\n\t\tplaces: state.simplePlaceEntity.places,\n\t\tappIsFirstStart: state.profileEntity.isFirstStart,\n\t\t//`errorMessage: state.system.ErrorObject.message,\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\n\t\ttournament: state.tournamentsEntity,\n\t\tcollect: state.collectEntity,\n\t\tteam: state.teamsEntity,\n\t\tbidTeams: state.bidTeamsEntity,\n\t\tmatches: state.matches,\n\t\tmatchesByTeam: state.matches.matchesBySelectedTeam,\n\t\tgroupId: state.groupEntity.GroupId, // идентификатор группы, из которой запущен инстанс\n\t\tteamId: state.groupEntity.TeamId, // идентификатор связанной с группой команды\n\t\tteamName: state.groupEntity.TeamName, // идентификатор связанной с группой команды\n\t\tIsOranizator: state.groupEntity.IsOranizator, // \n\t\tTournamentId: state.groupEntity.TournamentId, // \n\t\ttournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, { \n\tsetGroup, setTriedToLoadOblakoProfile, setTriedToLoadVkProfile, \n\tsetBirthDate, setSelectedMatch, setShowGroupTab, connectTeamWithGroup, getGroupTeamInfo, setUserIsGroupAdmin, getTeamSheduleByTeamId,\n\tsetCurrentModalWindow, setLoading, goToPanel, checkConnection, updateLoading, saveUserProfile, setUserName, setUserSurName, setMyTotalExpirience, \n\tgetAllSimpleCollectsInCityByCityUmbracoId, getAllSimplePlacesInCityByCityId, getAllRentsInCityByCityId, getUser, setSelectedUser,\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity, getTournamentsByCityId, setSelectedTournament, setTournamentMode, setCollectItemMode,\n\tsetActiveMenuItem, setVkProfileInfo, setVkProfileInfoAndSetFlags, setGlobalPopout, getUserProfile, registerUser, setHotPanel, resetError, selectSimpleCollect,\n\tgetAllCitiesFromServer, setUserProfileCity, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab, getMatchesInCurrentCity,\n})(App);\n","import { users } from \"./constants/commonConstants\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\n\nconst initState = {\n    users: [\n        users[0],\n        users[1],\n    ]\n}\n\n\nlet userReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\nexport const ampluaCathegoryTypes = [\n    {id: 0, name: \"Вратарь\"},\n    {id: 1, name: \"Защитник\"},\n    {id: 2, name: \"Полузащитник\"},\n    {id: 3, name: \"Нападающий\"},\n    {id: 4, name: \"Тренер\"},\n    {id: 5, name: \"Административный персонал\"},\n]\n\nexport const ampluaTypes = [\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n]\n\nconst initState = {\n\n}\n\n\nlet ampluaReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport profileReducer from './profileReducer.js'\nimport collectReducer from './collectReducer.js'\nimport userReducer from './userReducer.js'\nimport hot from './hotReducer.js'\nimport tournaments from './tournamentsReducer.js'\nimport teams from './teamsReducer.js'\nimport bidTeams from './bidTeamsReducer.js'\nimport ampluaReducer from './ampluaReducer.js'\n//import placeReducer from './placeReducer.js'\nimport rentReducer from './rentReducer.js'\nimport simplePlaceReducer from './simplePlaceReducer.js'\nimport paymentReducer from './paymentReducer.js'\nimport mainMenuReducer from './mainMenuReducer.js'\nimport systemReducer from './systemReducer.js'\nimport groupReducer from './groupReducer.js'\nimport cityReducer from './cityReducer.js'\nimport matchReducer from './matchReducer.js'\nimport vkReducer from './vkReducer.js'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\n    }) : compose;\n\n\nlet reducers = combineReducers({\n    profileEntity: profileReducer,\n    collectEntity: collectReducer,\n    hotEntity: hot,\n    tournamentsEntity: tournaments,\n    teamsEntity: teams,\n    teamsEntity: teams,\n    bidTeamsEntity: bidTeams,\n    matches: matchReducer,\n    userEntity: userReducer,\n    cityEntity: cityReducer,\n    groupEntity: groupReducer,\n    ampluaEntity: ampluaReducer,\n    //placeEntity: placeReducer,\n    rentEntity: rentReducer,\n    vkcom: vkReducer,\n    simplePlaceEntity: simplePlaceReducer,\n    paymentEntity: paymentReducer,\n    mainMenu: mainMenuReducer,\n    system: systemReducer,\n})\n\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\n// composeEnhancers(\n//     applyMiddleware(thunk))\n\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\nwindow.store = store;\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport store from './store/store'\nimport { Provider } from \"react-redux\";\nimport { AdaptivityProvider, AppRoot, ConfigProvider, usePlatform } from \"@vkontakte/vkui\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConfigProvider appearance=\"light\">\n      <AdaptivityProvider>\n        <AppRoot>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  </Provider>, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => { }); //runtime download\n}\n"],"sourceRoot":""}