{"version":3,"sources":["store/mainMenuReducer.js","store/constants/commonConstants.js","store/systemReducer.js","utils/api/server.js","utils/api/api.js","store/simplePlaceReducer.js","utils/convertors/dateUtils.js","store/rentReducer.js","store/profileReducer.js","store/collectReducer.js","store/tournamentsReducer.js","store/matchReducer.js","store/bidTeamsReducer.js","store/cityReducer.js","store/vkReducer.js","components/Panels/ProfilePanel/ProfilePanel.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Modals/ModalCommon/ModalCommon.jsx","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","img/common/defaultPlace.jpg","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","components/Panels/Common/WithNotify/ButtonWithNotify.jsx","components/Panels/Common/HOCs/withNotify.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/teamsReducer.js","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","components/Panels/Common/Shedule/Shedule.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","components/Panels/Common/Hot/Hot.jsx","components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem.jsx","components/Panels/Common/WithHistory/CellButtonWithHistory.jsx","components/Panels/Common/WithHistory/CardWithHistory.jsx","img/common/player300-s.png","img/common/stadium300-s.png","img/common/tournament300.png","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","id","name","title","position","enabled","show","activeItem","setActiveMenuItem","menuName","type","mainMenuReducer","state","action","find","it","currentDate","Date","BidTeam","Id","AdminTournamentComment","TeamName","When","day","getDay","month","getMonth","year","getFullYear","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Name","Year","WhenBegin","WhenEnd","Details","Reglament","MatchLength","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Photo","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","undefined","keys","length","map","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","City","Address","Stages","Parking","Worktime","BreakTimes","DressingRooms","Areas","Price","Enabled","Access","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","ANY_ACTION_TYPE","SYSTEM_SET_LOADING","SYSTEM_PUSH_TO_HISTORY","SYSTEM_SET_CURRENT_MODAL_WINDOW","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","currentMenu","history","GlobalPopout","CurrentModalWindow","ErrorObject","ShowAdminTourneyTab","ShowAdminTeamTab","Loading","setGlobalPopout","on","setCurrentModalWindow","modal","setErrorMessage","errorMessage","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","item","val","pushToHistory","systemReducer","loading","slice","showAdminTourneyTab","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","resultcode","result","data","message","okObj","dat","VKAPI","get","then","ErrorMessage","catch","error","CityAPI","post","SimplePlaceAPI","cityId","startindex","formData","FormData","append","RentAPI","CollectAPI","userProfileId","simpleCollect","userProfile","JSON","stringify","simpleMember","reason","TeamAPI","teamId","ProfileAPI","vkUserData","vkUser","bdate","split","UTC","city","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","team","newgroup","oldgroup","userprofile","teamToSend","newgroupToSend","TournamentId","oldgroupToSend","newGroup","oldGroup","tournamentToSend","CityUmbracoId","publish","tg","admintext","tournamentGroupToSend","tournamentGroup","tournamentGroupId","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllByAdminProfileId","saveTeam","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","tournamentgroup","teamName","bidTeamToTournament","MatchAPI","matchInfo","hours","minutes","match","TournamentAPI","tournamentId","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","PLACES_SET_SELECTED_PLACE","places","selectedPlace","setPlaces","simplePlaceReducer","x","placeId","timeToString","seconds","h","toString","m","s","dateTimeToTimeString","datetime","getHours","getMinutes","dateToString","date","newDate","dateOptions","weekday","getDate","toLocaleString","addToTime","getSeconds","datesWithoutTimeIsSame","date1","date2","dateSelectorValueToJSDateValue","dsValue","jSDateValueToDateSelectorValue","jsDate","demoRents","RENTS_SET_RENTS","RENTS_SET_SELECTED_RENT","rents","selectedRent","selectedDayRents","setRents","rentReducer","filter","r","From","rentDate","SimplePlaceId","simplePlaceId","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_TRIED_TO_GET_PROFILE","myProfile","vkProfile","triedToGetProfile","setUserProfile","setTriedToGetProfile","tried","profileReducer","COLLECTS_SET_ALL_SIMPLE_COLLECTS","COLLECTS_SELECT_SIMPLE_COLLECT","COLLECTS_SET_COLLECT_ITEM_MODE","COLLECTS_DEL_SIMPLE_COLLECT","COLLECTS_ADD_SIMPLE_COLLECT","COLLECTS_SET_SIMPLE_COLLECT","COLLECTS_SET_SELECTED_COLLECT_MEMBERS","COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS","COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT","prototype","addDays","days","this","setDate","collects","selected","mode","setAllSimpleCollects","simplecollects","deleteMemberFromSimpleCollect","member","addMemberToSelectedSimpleCollect","setCollectItemMode","delSimpleCollect","collect","addSimpleCollect","setSimpleCollect","collectReducer","simplecollect","Members","members","col","res","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_MY_ADD_OR_EDIT","TOURNAMENT_SET_TOURNAMENTGROUPS","TOURNAMENT_SET_TOURNAMENTTEAMS","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_MATCH_LENGTH","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES","emptyTournament","tournaments","bidsNew","selectedForView","selectedTables","myTournaments","cityTournamentAdmins","setTournaments","setTournamentTables","tables","setMyTournament","mytournament","addOrEditTournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","value","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","setSelectedTournamentGroups","groups","setTournamentTeams","bidsWithTeamsAndGroups","delGroupFromTournamentByKeyId","groupId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","pl","deleteTournament","getTournamentTeams","getMyTournaments","tournamentReducer","tour","max","forEach","KeyId","newTourn","t","newTGroups","Teams","MATCH_SET_ALL_MATCHES","MATCH_DEL_MATCH","MATCH_ADD_MATCH","MATCH_SET_HOT_MATCHES","MATCH_SET_ACCESS","MATCH_SET_MODE","MATCH_SET_PLAYED","MATCH_SET_HOT_PANEL","matches","hot","yesterday","today","tomorrow","hotPanel","access","setAllMatches","setHotMatches","delMatch","addMatch","setAccess","setMode","getAllMatchesByTournament","addMatchToShedule","Number","delMatchFromShedule","matchReducer","tomorrow_begin","tomorrow_end","st","played","panelName","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","CITY_GET_ALL_FROM_SERVER","cities","cityReducer","VK_SET_SELECTED_USER","selectedUser","vkReducer","ProfilePanel","props","withHistorySave","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","evt","handleClick","toMenuName","isBack","prevProps","prevState","onClick","React","Component","connect","ModalCommon","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","bidCity","setBidCity","useEffect","activeModal","modalName","header","top","placeholder","onClose","Close","actions","size","Accept","Surname","Birth","Register","isNaN","onChange","e","currentTarget","options","start","count","current","push","label","renderOption","option","restProps","profile","style","color","CityName","CityUmbracoName","withNotify","AcceptAndClose","Yes","Message","TournamentAdminList","List","multiline","Button1Handle","Button2Handle","caption","after","CellClick","data-story","mainMenu","profileEntity","tournamentsEntity","TeamAdminList","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","teamsEntity","publishTeam","ListItem","removable","onRemove","Delete","BidListItem","adminText","setAdminText","Item","Decline","simplePlaceEntity","optMaker","todayIs","makeZeroBefore","g","p","UmbracoId","teamGoals","Array","isArray","selectedTournamentGroup","setSelectedTournamentGroup","selectedTournamentGroupTeamList","setSelectedTournamentGroupTeamList","selectedTeam1","setSelectedTeam1","selectedTeam2","setSelectedTeam2","selectedTeam1Goals","setTeam1Goals","selectedTeam2Goals","setTeam2Goals","setSelectedPlace","selectedId","setSelectedId","selectedPlayed","setSelectedPlayed","selectedDate","setSelectedDate","selectedHour","setSelectedHour","selectedMinute","setSelectedMinute","getGroup","changeGroup","league_id","allMatchesInAllGroups","editId","PlaceId","Team1Id","Team2Id","BidTeamToTournamentId1","BidTeamToTournamentId2","Team1Goals","Team2Goals","Played","groupAndMatchesItem","place","toLocaleDateString","toLocaleTimeString","Team1","Team2","goToEditMatch","otherProps","min","defaultValue","onDateChange","Checkbox","checked","delCurrentMatch","align","SelectedName","TournamentTables","cityEntity","getTournamentGroups","replaceTeam","tOldGoup","tNewGroup","tGoup","getTeamInfo","changeTournamentTeamBidTournamentGroup","deleteTeamFromTournament","setTournamentMatchLength","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","getTournamentTablesByTournamentId","tempGroupName","setTempGroupName","Tab","currentTab","setCurrentTab","activePopout","setActivePopout","AcceptBid","DeclineBid","SetPopup","oldTg","iosCloseItem","autoclose","newTg","SelectTournamentGroup","popout","activePanel","bottom","table","tT","sort","firstItem","secondItem","row","Games","Wins","Loses","Draws","GoalsScored","GoalsMissed","GoalsDifference","Points","keyId","trim","before","DeleteTeam","BidList","Tournament","Founder","BidTeamTournamentList","Bids","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","bidSelectMode","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","SaveTeam","Team1Name","Team2Name","collectEntity","simplePlace","rentEntity","rent","DeleteMemberFromCollect","setSelectedSimplePlace","setSelectedRent","AddSimpleCollect","registerMemberToSimpleCollect","DelSimpleCollect","EditSimpleCollect","setSelectedMembers","workoutSelector","ranges","minutesOneSlot","workoutColNumber","useAdaptivity","viewWidth","acceptBeMember","setAcceptBeMember","showPanelBeMember","setShowPanelBeMember","showCancelMemberForm","setShowCancelMemberForm","cancelReason","setCancelReason","details","setDetails","collectType","setCollectType","needMembers","setNeedMembers","costMembers","setCostMembers","costAll","setCostAll","plus","setPlus","selectedSlots","setSelectedSlots","selectedTimeRanges","vkids","UserVkId","photo","bridge","send","access_token","us","response","PhotoPath","youAreMember","youAreOrganizer","CreatorId","simplePlaces","changeCollectType","selectSlot","tmpSelectedSlot","ss","Hours","Minutes","a","b","gotoProfile","profileId","open","calculateNeedMembers","need","Math","round","calculateCostMembers","membercost","worktimeSlots","wt","selectedDT","from","FromTime","ToTime","valueOf","fromTmp","slotsNumber","numberOfCols","numberOfRows","trunc","slots","slotsInHour","startHour","oneSlotMinutes","SlotMinutes","PricePerSlot","Selected","Rented","timeSlotsForSimpleCollects","iButtons","slot","slotCurrentIndex","worktimeSlot","curentWorktimeSlotFromTime","curentWorktimeSlotToTime","currentSlotTime","Breaks","brek","to","brekTime","rnt","rentTime","slt","selectedTime","CostPerHour","reduce","acc","cur","costall","costMem","calculateCostAll","splitCols","sCol","j","width","tr","until","disabled","NeedMembers","Cost","Creator","src","memberUserProfile","SimpleCollectId","deleteMember","FullPrice","changePlace","changeDate","description","globalPopout","errorObject","tournamentAdmins","setLoading","getAllSimpleCollectsInCityByCityUmbracoId","getAllSimplePlacesInCityByCityId","getAllRentsInCityByCityId","getUser","setSelectedUser","getTournamentsByCityId","cityUmbId","setVkProfileInfo","getUserProfile","getAuthInfo","vkProfileInfo","setHotPanel","selectSimpleCollect","getAllCitiesFromServer","setUserProfileCity","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","getMatchesInCurrentCity","setUser","timerStarts","setTimerStarts","cardStyle","left","height","background","padding","textAlign","opacity","borderRadius","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","setTimeout","setInterval","menuItem","activeStory","tabbar","player","stadium","hidden","getTime","timeEnding","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","hotEntity","paymentReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d711b674.chunk.js","sourcesContent":["const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\n\n\n\nconst initState = {\n    menuItems: [{\n        id: 0,\n        name: \"hot\",\n        title: \"Горячее\",\n        position: 0,\n        enabled: true,\n        show: true,\n    },{\n        id: 1,\n        name: \"allTournaments\",\n        title: \"Турниры\",\n        position: 1,\n        enabled: true,\n        show: true,\n    },{\n        id: 2,\n        name: \"profile\",\n        title: \"Профиль\",\n        position: 3,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 3,\n        name: \"tournamentadmin\",\n        title: \"Управление турнирами\",\n        position: 4,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"tournamentitem\",\n        title: \"Турнир\",\n        position: 5,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 3,\n        name: \"teamadmin\",\n        title: \"Управление командами\",\n        position: 6,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"teamitem\",\n        title: \"Команда\",\n        position: 7,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 5,\n        name: \"addcollect\",\n        title: \"Новый сбор\",\n        position: 8,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 6,\n        name: \"viewcollect\",\n        title: \"Сбор\",\n        position: 9,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 7,\n        name: \"viewuser\",\n        title: \"Игрок\",\n        position: 10,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 8,\n        name: \"bidlist\",\n        title: \"Доступно для заявки\",\n        position: 11,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 9,\n        name: \"collectslist\",\n        title: \"Все сборы\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 10,\n        name: \"collectadmin\",\n        title: \"Сбор\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    \n],\n    activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\n}\n\n\nlet mainMenuReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\n            \n            return {...state,\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setActiveMenuItem = (menuName) => {\n    \n    return {\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\n        menuName\n    }\n}\n\n\nexport default mainMenuReducer;","const currentDate = new Date();\n\n\n// таймслотов в одном часе\nexport const timeSlotsInOneHour = () => {\n    return +2\n}\n\nexport const getMaxNumberOfMembersInCollect = () => {\n    return +30\n}\n\nexport const getMinNumberOfMembersInCollect = () => {\n    return +2\n}\n\nexport const accessTypes = [\n    {Id: 0, Name: \"public\"},\n    {Id: 1, Name: \"private\"},\n    {Id: 2, Name: \"moderate\"},\n]\n\n// тип участия в сборе\nexport const memberingCollectTypes = {\n    Invite: 0, // приглашен\n    Member: 1, // уже подтвержден (участник)\n    Organizator: 2, // организатор\n    Participate: 3, // попросился\n    All: 4, // без фильтрации, все сборы\n}\n\nexport const cityTournamentAdmins = \n[\n    {\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \n    },\n]\n\nexport const Collect = {\n    collects: [],\n    selected: {\n        selected: {\n            Id: 6,\n            Name: 'Тестовый сбор',\n            When: '2021-09-09T17:40:00',\n            DurationMinutes: 90,\n            Details: 'Сбор в 10:30',\n            Comment: 'Верхнее поле',\n            Cost: 2500,\n            NeedMembers: 15,\n            PlaceId: 1,\n            Place: {\n              Id: 1,\n              Name: 'Стадион Динамо верхнее поле',\n              Info: 'Половина поля',\n              SimpleCityId: 3,\n              City: null,\n              Address: 'бульвар Петрковский',\n              Geo: '57.754071, 40.963803',\n              MainPicture: null,\n              Parking: true,\n              BicycleParking: false,\n              Enabled: true,\n              UmbracoId: 0,\n              Worktime: [],\n              ErrorMessage: null,\n              Published: true,\n              Deleted: false\n            },\n            CreatorId: 63,\n            Creator: {\n              CityUmbracoName: 'Кострома',\n              Name: 'Даниил',\n              Surname: 'Каверзин',\n              CityVkId: 1809,\n              UserProfileId: 63,\n              UserVkId: 'id136649652',\n              LastOnline: '2021-05-25T10:35:25',\n              Birth: '2001-06-04T00:00:00',\n              PhotoPath: ''\n            },\n            Members: [\n              {\n                Id: 1,\n                SimpleCollect: {\n                  Id: 6,\n                  Name: 'Тестовый сбор',\n                  When: '2021-09-09T17:40:00',\n                  DurationMinutes: 90,\n                  Details: 'Сбор в 10:30',\n                  Comment: 'Верхнее поле',\n                  Cost: 2500,\n                  NeedMembers: 15,\n                  SimplePlaceId: 1,\n                  SimplePlace: {\n                    Id: 1,\n                    Name: 'Стадион Динамо верхнее поле',\n                    Info: 'Половина поля',\n                    SimpleCityId: 3,\n                    City: null,\n                    Address: 'бульвар Петрковский',\n                    Geo: '57.754071, 40.963803',\n                    MainPicture: null,\n                    Parking: true,\n                    BicycleParking: false,\n                    Enabled: true,\n                    UmbracoId: 0,\n                    Worktime: [],\n                    ErrorMessage: null,\n                    Published: true,\n                    Deleted: false\n                  },\n                  CreatorId: 63,\n                  Creator: {\n                    UserProfileId: 63,\n                    UserVkId: 'id136649652',\n                    Name: 'Даниил',\n                    Surname: 'Каверзин',\n                    Fathername: null,\n                    Birth: '2001-06-04T00:00:00',\n                    Register: '2021-05-25T10:02:38',\n                    LastOnline: '2021-05-25T10:35:25',\n                    Height: 0,\n                    Weight: 0,\n                    PhotoPath: '',\n                    CityVkId: 1809,\n                    CityName: 'Ленинск-Кузнецкий',\n                    CityUmbracoId: 1080,\n                    CityUmbracoName: 'Кострома',\n                    LegId: -1,\n                    AmpluaId: -1,\n                    LastIp: '81.177.24.37',\n                    SimpleCollects: [],\n                    SimpleUserMessages: [],\n                    SimpleMembers: [],\n                    Citys: null,\n                    Tournaments: [],\n                    Ampluas: null,\n                    Legs: null,\n                    Admins: [],\n                    CityTournamentAdmins: [],\n                    ErrorMessage: '',\n                    Published: false,\n                    Deleted: false\n                  },\n                  SimpleMembers: [],\n                  ErrorMessage: null,\n                  Published: false,\n                  Deleted: false\n                },\n                SimpleCollectId: 6,\n                UserProfile: {\n                  UserProfileId: 63,\n                  UserVkId: 'id136649652',\n                  Name: 'Даниил',\n                  Surname: 'Каверзин',\n                  Fathername: null,\n                  Birth: '2001-06-04T00:00:00',\n                  Register: '2021-05-25T10:02:38',\n                  LastOnline: '2021-05-25T10:35:25',\n                  Height: 0,\n                  Weight: 0,\n                  PhotoPath: '',\n                  CityVkId: 1809,\n                  CityName: 'Ленинск-Кузнецкий',\n                  CityUmbracoId: 1080,\n                  CityUmbracoName: 'Кострома',\n                  LegId: -1,\n                  AmpluaId: -1,\n                  LastIp: '81.177.24.37',\n                  SimpleCollects: [],\n                  SimpleUserMessages: [],\n                  SimpleMembers: [],\n                  Citys: null,\n                  Tournaments: [],\n                  Ampluas: null,\n                  Legs: null,\n                  Admins: [],\n                  CityTournamentAdmins: [],\n                  ErrorMessage: '',\n                  Published: false,\n                  Deleted: false\n                },\n                UserProfileId: 63\n              },\n            ]\n          }\n    }\n}\n\nexport const TeamAdmins = \n[\n    {\n        Id : 0,\n        Name: \"Тестовая команда\",\n        Year: 2021,\n        WhenBorn: {day: 1, month: 2, year: 2021},\n        Details: \"Системная\",\n        Logo: \"\",\n        CityId: -1,\n        TournamentGroups: [], \n        Admins: [],\n        Matches: [],\n        Players: [],\n        Published: true,\n        Deleted: false,\n    },\n]\n\nexport const BidTeam = {\n    Id: -1,\n    AdminTournamentComment: \"\",\n    TeamName: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TeamId: -1, \n    Team: [],\n    TournamentGroupId: -1,\n    TournamentGroup: [],\n    UserProfileId: -1,\n    UserProfile: {},\n    Approved: false,\n    Deleted: false,\n    Published: false,\n\n}\n\nexport const Match = {\n    Id: -1,\n    Name: \"Матч\",\n    Description: \"Описание матча\",\n    Picture: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TournamentGroup: {},\n    TournamentGroupId: -1,\n    Place: {},\n    PlaceId: -1,\n    Team1: {},\n    Team1Id: -1,\n    Team2: {},\n    Team2Id: -1,\n    Team1Bid: {},\n    Team1BidId: -1,\n    Team2Bid: {},\n    Team2BidId: -1,\n    Team1Goals: 0,\n    Team2Goals: 0,\n    MatchEvents: [],\n    Deleted: false,\n    Published: false,\n    ErrorMessage: \"\",\n\n}\n\nexport const EmptyTournament = {\n    Id : -1,\n    Name: \"\",\n    Year: 0,\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    Details: \"\",\n    Reglament: \"\", \n    MatchLength: 60,\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [], \n    Admins: [],\n    Published: false,\n    Deleted: false,\n}\n\n\nexport const geo = {\n    Cities: [\n        {\n            Id: 0,\n            Name: \"Кострома\",\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\n            Population: 250000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n        {\n            Id: 1,\n            Name: \"Иваново\",\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\n            Population: 800000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n    ],\n    Owners: [\n        {\n            Id: 0, \n            Name: \"Владелец 1\",\n        },\n        {\n            Id: 1, \n            Name: \"Владелец 2\",\n        }\n    ],\n}\n\nexport const simplePlaces =  []\n\nexport const rents =  []\n\n\nexport const places =  [\n        {\n            PlaceId: 0,\n            Name: \"Динамо\", /* placename*/\n            get Owner() { return geo.Owners[0]},\n            set Owner(val) { geo.Owners[0] = val},\n            get City() { return geo.Cities[0]},\n            set City(val) { geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\n            Geo: \"\",\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\n            DressingRooms: [\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\n            ],\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\n            Enabled: true,\n            Access: {},\n            \n        },\n        {\n            PlaceId: 1,\n            Name: \"МЧС\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        },\n        {   \n            PlaceId: 2,\n            Name: \"КГТУ\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        }\n    ]\n\n    export const ampluaCathegoryTypes = [\n        {Id: 0, Name: \"Вратарь\"},\n        {Id: 1, Name: \"Защитник\"},\n        {Id: 2, Name: \"Полузащитник\"},\n        {Id: 3, Name: \"Нападающий\"},\n        {Id: 4, Name: \"Тренер\"},\n        {Id: 5, Name: \"Административный персонал\"},\n        {Id: 6, Name: \"Игрок\"},\n    ]\n     \n    export const ampluaTypes = [\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\n    ]\n\n\nexport const users = [\n    {\n        Id: 0,\n        FirstName: \"Александр\",\n        SurName: \"Смирнов\",\n        FatherName: \"Евгеньевич\",\n        NickName: \"easports\",\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\n        Datebirth: new Date(\"05.29.1987\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n                Stamina: 100, // выносливость\n                Feints: 100, // финты\n                Reaction: 100, // реакция\n                ScoringFlair: 100, // голевое чутье\n                Intellect: 100, // ум\n                Rejection: 100, // отбор мяча\n                SlideEffect: 100, // игра в подкате\n                Header: 100, // игра головой\n                Creativity: 100, // креативность\n                Dribble: 100, // дрибблинг\n                Opening: 100, // открывание под пас\n                Charisma: 100, // харизма\n                BallTaking: 100, // прием мяча\n                FieldVision: 100, // видение поля\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n        },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 1,\n        FirstName: \"Евгений\",\n        SurName: \"Иванов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"eivanov\",\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\n        Datebirth: new Date(\"28.02.1983\"),\n        Leg: 1, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 2,\n        FirstName: \"Фёдор\",\n        SurName: \"Смолов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"fsmolov\",\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\n        Datebirth: new Date(\"01.01.1989\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n]\n\nexport const myProfile = {\n    myProfile: users[0],\n}\n\n\nexport class commonUtils  {\n\n    static deepClone = (obj) => {\n        const clObj = {};\n        for(const i in obj) {\n            if (obj[i] instanceof Object) {\n                clObj[i] = this.deepClone(obj[i]);\n                continue;\n            }\n            clObj[i] = obj[i];\n        }\n        return clObj;\n    }\n\n    static copyCity = (city_source) => {\n        return city_source;\n    }\n\n    static copyAmplua = (amplua_source) => {\n        return amplua_source\n    }\n\n    static copyKeyFunction = (keyFunction_source) => {\n        return keyFunction_source\n    }\n\n    static copyUser = (user_source) => {\n        if (user_source == undefined || Object.keys(user_source).length === 0)\n            return undefined\n\n        return {\n            Id: user_source.Id,\n            FirstName: user_source.FirstName,\n            SurName: user_source.SurName,\n            FatherName: user_source.FatherName,\n            NickName: user_source.NickName,\n            Datebirth: user_source.Datebirth,\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\n            CityNow: { ...this.copyCity(user_source.CityNow) },\n            Level: {...user_source.Level\n            },\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\n            Injury: {...user_source.Injury},\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n        }\n            \n    }\n\n    static copyOwner = (owner_source) => {\n        return {...owner_source}\n    }\n    \n    static copyAccess = (access_source) => {\n        return {...access_source}\n    }\n\n    static copyPlace = (place_source) => {\n        \n        if (place_source == undefined || Object.keys(place_source).length === 0)\n            return undefined\n\n        return {\n            Id: place_source.Id,\n            Name: place_source.Name,\n            Owner: {...this.copyOwner(place_source.Owner)},\n            City: {...this.copyCity(place_source.City)},\n            Address: {...place_source.Address},\n            Geo: {...place_source.Geo},\n            Photo: [...place_source.Photo],\n            Stages: place_source.Stages,\n            Parking: place_source.Parking,\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\n            DressingRooms: [...place_source.DressingRooms],\n            Areas: [...place_source.Areas],\n            Price: place_source.Price, // цена за час занятий\n            Enabled: place_source.Enabled,\n            Access: {...this.copyAccess(place_source.Access)},\n        }\n    }\n\n    static copyCollect = (collect_source) => {\n        \n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \n            return undefined\n\n        return {\n            Id: collect_source.Id,\n            Place: this.copyPlace(collect_source.Place),\n            Date: collect_source.Date,\n            Hour: collect_source.Hour,\n            Minute: collect_source.Minute,\n            DurationMinutes: collect_source.DurationMinutes,\n            Price: collect_source.Price, // цена за весь период\n            Options: [...collect_source.Options],\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\n            /*\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\n\n            */\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\n            return {\n                Id: uGroup.Id,\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\n                NumberOf: uGroup.NumberOf,  // количество участников \n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \n                    {\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\n                    }): \n                [{}])],\n                Price: uGroup.Price,\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\n            }\n        })],\n            UsersInvited: [\n                ...collect_source.UsersInvited.map(uInvited => {\n                    \n                    return {\n                        Id: uInvited.Id,\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \n                        User: {...this.copyUser(uInvited.User)},\n                    }\n                })\n            ],\n            UsersWantsToParticipate: [\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\n                    \n                    return {\n                        \n                        Id: uWP.Id,\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \n                        User: {...this.copyUser(uWP.User)},\n                    }\n                })\n            ],\n            Access: { ...this.copyAccess(collect_source.Access) },\n            Permanent: collect_source.Permanent,\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \n            Organizer: {...this.copyUser(collect_source.Organizer)}\n        }\n    }\n\n}","import {ampluaTypes, users} from './constants/commonConstants'\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst SYSTEM_SET_LOADING = \"SYSTEM_SET_LOADING\";\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\nconst SYSTEM_SET_CURRENT_MODAL_WINDOW = \"SYSTEM_SET_CURRENT_MODAL_WINDOW\";\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\n\n\nconst initState = {\n    currentMenu: {},\n    history: [\"hot\"],\n    GlobalPopout: false,\n    CurrentModalWindow: null,\n    //ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\n    ErrorObject: \"\",\n    ShowAdminTourneyTab: false,\n    ShowAdminTeamTab: true,\n    Loading: true,\n     // level \n\n}\n\n\nexport let systemReducer = (state = initState, action) => \n{\n    \n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        case SYSTEM_PUSH_TO_HISTORY: {\n            return {...state,\n                history: [...state.history, action.item]\n            };\n        }\n        case SYSTEM_SET_GLOBAL_POPOUT: {\n            return {...state,\n                GlobalPopout: action.on,\n            };\n        }\n        case SYSTEM_SET_CURRENT_MODAL_WINDOW: {\n            return {...state,\n                CurrentModalWindow: action.modal,\n            };\n        }\n        case SYSTEM_SET_LOADING: {\n            return {...state,\n                Loading: action.loading,\n                GlobalPopout: action.loading,\n            };\n        }\n        case SYSTEM_SET_ERROR_MESSAGE: {\n            \n            return {...state,\n                ErrorObject: {...action.errorMessage},\n                // че-то ошибочки начинают какие-то левые вылезать, если делать все как тут нужно\n                // ErrorObject: {...state.ErrorObject,\n                //     message: action.errorMessage,\n                //     resultcode: -1, \n                //     result: \"\",\n                // }\n            };\n        }\n        case SYSTEM_RESET_ERROR: {\n            \n            return {...state,\n                ErrorObject: {...initState.ErrorObject},\n            };\n        }\n        case SYSTEM_POP_FROM_HISTORY: {\n            \n            return {...state,\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\n            };\n        }\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\n            \n            return {...state,\n                ShowAdminTourneyTab: action.showAdminTourneyTab\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\nexport const setLoading = (loading) => {\n    return {\n        type: SYSTEM_SET_LOADING,\n        loading\n    }\n}\n\nexport const pushToHistory = (val) => {\n    return {\n        type: SYSTEM_PUSH_TO_HISTORY,\n        item: val\n    }\n}\n\nexport const setShowAdminTourneyTab = (val) => {\n    return {\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\n        showAdminTourneyTab: val\n    }\n}\n\nexport const popFromHistory = (val) => {\n    return {\n        type: SYSTEM_POP_FROM_HISTORY,\n        item: val\n    }\n}\n\nexport const setGlobalPopout = (on) => {\n    return {\n        type: SYSTEM_SET_GLOBAL_POPOUT,\n        on\n    }\n}\n\nexport const setCurrentModalWindow = (modal) => {\n    return {\n        type: SYSTEM_SET_CURRENT_MODAL_WINDOW,\n        modal\n    }\n}\n\nexport const setErrorMessage = (errorMessage) => {\n    return {\n        type: SYSTEM_SET_ERROR_MESSAGE,\n        errorMessage\n    }\n}\n\nexport const resetError = () => {\n    return {\n        type: SYSTEM_RESET_ERROR\n    }\n}\n\n// export const setLastFromHistoryMenuItem = (val) => {\n//     return {\n//         type: POP_FROM_HISTORY,\n//         item: val\n//     }\n// }\n\nexport const goToPanel = (nextPanel, back) => {\n    return (dispatch, getState) => {\n        \n        if (back){\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\n            dispatch(setActiveMenuItem(preLast));\n            dispatch(popFromHistory(nextPanel));\n        }\n        else{\n            dispatch(pushToHistory(nextPanel));\n            dispatch(setActiveMenuItem(nextPanel));\n        }\n        \n    }\n}\n\nexport default systemReducer;","import Axios from 'axios'\n\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\";\nexport const backserver = \"https://oblakosporta.ru\";\n//export const backserver = \"https://localhost:44325\";\n//export const backserver = \"https://192.168.56.101:44325\";\nexport const URL = backserver + \"/umbraco/api/\";\nexport const authQueryString = window.location.search;\n\n\nexport\tconst PostJsonInstance = Axios.create(\n\t\t{\n\t\t\tbaseURL: URL,\n\t\t\ttimeout: 15000,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"}\n\t\t}\n\t)","import { PostJsonInstance, authQueryString } from './server';\n\nexport let errorObj = (text) => {\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\n}\n\nexport let okObj = (dat) => {\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\n}\n\n\n// export let ApiSendInfo =\n// {\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \n//     system: {},\n//     addRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return false;\n//         }\n//         let currentDT = new Date();\n//         this.requests.push({name, time: currentDT});\n//         return {name, time: currentDT};\n//     },\n//     checkRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return true;\n//         }\n//         return false;\n//     },\n//     check: function(){\n//         ////debugger\n//         this_.requests = this_.requests ? this_.requests.map(req => {\n//             let now = new Date();\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\n//                 return req;\n//             }\n//         }) : []\n//     },\n// }\n\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\n\nexport const VKAPI = {\n    getUser(id) {\n        debugger\n        return PostJsonInstance.get(\"https://api.vk.com/method/users.get?user_id=\" + id + \"&v=5.52\").then(data => {\ndebugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n        \n    }\n}\n\nexport const CityAPI = {\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const PlaceAPI = {\n\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n\n\n    // запрос места по его Id\n    // placeId - Id места\n    getById(placeId) {\n        let formData = new FormData();\n        formData.append(\"placeid\", placeId);\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n\n}\n\nexport const SimplePlaceAPI = {\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"SimplePlace/GetSimplePlacesInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    \n\n}\n\nexport const RentAPI = {\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    getAllRentsInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"Rents/GetRentsInCityByCityId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n}\n\nexport const CollectAPI = {\n\n    getAll() {\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"placeid\", placeId);\n\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityId(cityId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityid\", cityId);\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n    \n    \n    addSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/AddCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    editSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/EditCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    delSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DelCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    registerSimpleMemberToSimpleCollect(userProfileId, simpleCollect) {\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/RegisterMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    deleteMemberFromSimpleCollect(userProfileId, simpleCollect, simpleMember, reason=\"\") {\n        debugger\n        //simpleCollectUserProfile\n        simpleMember.Comment=reason;\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DeleteMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile }, simpleMember: {...simpleMember} })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllSimpleByCityUmbracoId(cityId, startindex = 0) {\n        //debugger\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityId\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"SimpleCollect/GetSimpleCollectsInCityByCityId\" + authQueryString, formData).then(data => {\n            //return okObj(data.data);\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n}\n\n\nexport const TeamAPI = {\n\n    // getAll() {\n    //     return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n    //         return okObj(data.data);\n    //     })\n    //         .catch(error => {\n    //             return errorObj(error)\n    //         })\n    // },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getTeamInfoByTeamId(teamId) {\n        let formData = new FormData();\n        formData.append(\"teamid\", teamId);\n\n        return PostJsonInstance.post(\"SimpleTeam/GetById\" + authQueryString, formData).then(data => {\n            //debugger\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const ProfileAPI = {\n    // запрос информации о пользователе\n    getUserProfile(vkUserData) {\n\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\n    getAuthInfo_old(formData) {\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // регистрация/обновление даты рождения + получение данных о профиле\n    getAuthInfo(vkUser) {\n\n        let [day, month, year] = vkUser.bdate.split('.');\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\n\n        let vkUserData = {\n            'bdate': bDate,\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\n            'first_name': vkUser.first_name,\n            'id': vkUser.id,\n            'last_name': vkUser.last_name,\n            'photo_100': vkUser.photo_100,\n            'photo_200': vkUser.photo_200,\n            'photo_max_orig': vkUser.photo_max_orig,\n            'sex': vkUser.sex,\n            'timezone': vkUser.timezone,\n        }\n\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // изменение города привязки пользователя\n    setUserProfileCity(userData) {\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    }\n}\n\nexport const CityTournamentAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    // возвращает всех админов города\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    /// запрос групп турнира\n    getTournamentGroups(tournament, startindex) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"tournamentId\", tournament.Id);\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    changeTeamTournamentGroup(team, newgroup, oldgroup,  userprofile){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let newgroupToSend = {\n            Id: newgroup.Id,\n            TournamentId: newgroup.TournamentId,\n        }\n        let oldgroupToSend = {\n            Id: oldgroup.Id,\n            TournamentId: oldgroup.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/SetTeamTournamentGroup\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            newGroup: { ...newgroupToSend }, oldGroup: { ...oldgroupToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    \n    // возвращает заявки по турниру (для админа турнира)\n    getTournamentTeamsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpleTournament/GetTeamsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTournament(tournament, userprofile) {\n        ////debugger\n        \n\n        if (tournament.Id < 0){\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\n                    return {\n                        Name: item.Name,\n                        Id: item.Id != undefined ? item.Id : -1,\n                    }\n                })],\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTournament(tournament, userprofile) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    // удаление команды (отклонение заявки от команды) из турнира\n    deleteTeamFromTournamentByTeam(team, tg, userprofile, admintext){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let tournamentGroupToSend = {\n            Id: tg.Id,\n            TournamentId: tg.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeleteTeamFromTournament\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            tournamentGroup: { ...tournamentGroupToSend }, userProfile: { ...userprofile }, admintext: admintext })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    /// удаление группы турнира\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tournamentGroupId,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n   \n    /// добавление группы турнира\n    addTournamentGroup(tournament, userprofile, tGroup) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tGroup.Id,\n            Name: tGroup.Name,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n\n    // AddContact(contact){\n    //     ////debugger\n    //     //return instace.get('/contacts/getcontacts');\n    //     let Contact= contact;\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\n    //         ////debugger\n    //         return x.data;\n    //     }).catch(y => {\n    //         ////debugger\n    //         console.log(y)\n    //     });\n    // },\n}\n\nexport const TeamAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTeam(team, userprofile) {\n        \n        if (team.Id < 0){\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTeam(team, userprofile) {\n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n}\n\nexport const BidTeamAPI = {\n    \n    getActualTournaments(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // возвращает заявки по турниру (для админа турнира)\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    // согласовывает заявку (для админа турнира)\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    \n    // отклоняет заявку (для админа турнира)\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        let bid = {\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \n                    When: new Date(),\n                    TournamentGroupId: tournamentgroup.Id,\n                    UserProfileId: userprofile.UserProfileId,\n                    TeamId: team.Id,\n                    Team: null,\n                    Approved: false,\n                    UserProfile: null,\n                    ErrorMessage: \"\",\n                    AdminTournamentComment : \"\",\n                    TournamentGroup: null,\n                }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delBidTeamToTournament(bid, userprofile, team) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n    \n    /// допуск комады к турниру\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\n        ////debugger \n        let bidToSend = {...bid,\n            AdminTournamentComment: admincomment,\n            Approve: approve,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const MatchAPI = {\n    addMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Add2\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Del\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    getAllMatchesByTournament(tournament, userprofile) {\n        \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n        //new Date()\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        //return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tourn }, userProfile: { ...userprofile } })).then(data => {\n        return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n    getCurrentMatchesByCity(userProfile) {\n        let formData = new FormData();\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\n        return PostJsonInstance.post(\"Match/GetByCity\" + authQueryString, formData).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n\n}\n\nexport const TournamentAPI = {\n    getAllTournamentsInCityByCityUmbracoId(cityUmbracoId) {\n        \n        let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllCurrentInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n    \n    \n    getTournamentTablesByTournamentId(tournamentId) {\n        \n        let formData = new FormData();\n        formData.append(\"tournamentId\", tournamentId);\n        return PostJsonInstance.post(\"Tables/GetByTournamentId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    }\n}","import { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { simplePlaces } from './constants/commonConstants'\nimport { SimplePlaceAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\n\nconst demoPlaces = simplePlaces;\n\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\nconst PLACES_SET_SELECTED_PLACE = \"PLACES_SET_SELECTED_PLACE\";\n\n\n\nconst initState = {\n    places: [],\n    selectedPlace: {},\n}\n\n\nlet simplePlaceReducer = (state = initState, action) => {\n    switch (action.type) {\n        case PLACES_SET_ALL_PLACES: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        case PLACES_SET_SELECTED_PLACE: {\n            return {\n                ...state,\n                selectedPlace: state.places.find(x => x.Id == action.placeId),\n            };\n        }\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setPlaces = (places) => {\n    return {\n        type: PLACES_SET_ALL_PLACES,\n        places\n    }\n}\n\nexport const setSelectedSimplePlace = (placeId) => {\n    return {\n        type: PLACES_SET_SELECTED_PLACE,\n        placeId\n    }\n}\n\n\nexport const setPlace = (placeId, placeData) => {\n    return {\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\n        placeId,\n        placeData\n    }\n}\n\n\n// все места с сервера по UmbracoId города\nexport const getAllSimplePlacesInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            SimplePlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setPlaces(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setPlaces(demoPlaces))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setPlaces(demoPlaces))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default simplePlaceReducer;","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\n\nexport function isDate(str) {\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\n  }\n \nexport const getAge = (date) => {\n    if (date != undefined) \n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\n    else\n        return 0;\n    \n}\n\nexport const timeToString = (hours, minutes, seconds) => {\n    \n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\n    let res = \"\";\n\n    if (h.length > 0 && m.length > 0 && s.length > 0)\n        res = h + \":\" + m + \":\" + s;\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\n        res = h + \":\" + m;\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\n        res = h;\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\n        res = m + \":\" + s;\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\n        res = s;\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\n        res = m;\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\n        res = h + \":\" + s;\n    else\n        res = \"\";\n    return res;\n}\n\nexport const dateTimeToTimeString = (datetime) => {\n    return timeToString(new Date(datetime).getHours(), new Date(datetime).getMinutes())\n}\n\nexport const dateToString = (date, ...args) => {\n    \n    if (typeof date == \"string\")\n        date = new Date(date);\n\n    let newDate = date;\n    let dateOptions = {\n        // era: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'long',\n        // timezone: 'UTC',\n        // hour: 'numeric',\n        // minute: 'numeric',\n        // second: 'numeric'\n    };\n\n    if (args[0])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2])\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate.toLocaleString(\"ru\", dateOptions)\n}\n\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\nexport const addToDate = (date, ...args) => {\n        \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить дни\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1]) // добавить месяцы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2]) // добавить годы\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate;\n}\n\n// прибавляет к дате переданное в параметрах количество часов, минут, секунд. первый параметр -часы, второй- минуты и т.д.\nexport const addToTime = (date, ...args) => {\n     \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить часы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours() + args[0])\n\n    if (args[1]) // добавить минуты\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes() + args[1])\n\n    if (args[2]) // добавить секунды\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes(), newDate.getSeconds() + args[2])\n\n    return newDate;\n}\n\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\nexport const datesWithoutTimeIsSame = (date1, date2) => {\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\n}\n\n// сравнение двух дат только по времени (часы и минуты) без даты. true - равны, false- не равны\nexport const timesWithoutDateHourMinuteIsSame = (date1, date2) => {\n    return (date1.getHours() == date2.getHours() && date1.getMinutes() == date2.getMinutes())\n}\n\n// преобразование значения dateSelector из пакета vk ui в нативную дату JS\nexport const dateSelectorValueToJSDateValue = (dsValue) => {\n    //{day: currentDate.getDate(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()}\n    return new Date(dsValue.year, dsValue.month-1, dsValue.day)\n}\n\n// преобразование нативной даты JS в значение dateSelector из пакета vk ui\nexport const jSDateValueToDateSelectorValue = (jsDate) => {\n    \n    return {day: jsDate.getDate(), month: jsDate.getMonth()+1, year: jsDate.getFullYear()}\n}\n\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    \n    for (let i = 0; i < slotsNumber; i++){\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\n    }\n    \n    return slots\n}\n\nexport const timeSlotsForSimpleCollects = (slotsNumber, slotsInHour=timeSlotsInOneHour(), startHour) => {\n    \n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    for (let i = 0; i < slotsNumber; i++)\n    {\n        slots.push({\n            Hours: Math.trunc(i / slotsInHour) + startHour, \n            Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), \n            SlotMinutes: oneSlotMinutes,\n            PricePerSlot: 0,\n            Enabled: true,\n            Selected: false,\n            Rented: false,}\n            )\n    }\n    \n    return slots\n\n}","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { rents } from './constants/commonConstants'\nimport { RentAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { datesWithoutTimeIsSame } from './../utils/convertors/dateUtils'\n\nconst demoRents = rents;\n\nconst RENTS_SET_RENTS = \"RENTS_SET_RENTS\";\nconst RENTS_SET_SELECTED_RENT = \"RENTS_SET_SELECTED_RENT\";\n\n\n\nconst initState = {\n    rents: [],\n    selectedRent: {},\n    selectedDayRents: [],\n}\n\n\nlet rentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case RENTS_SET_RENTS: {\n            return {\n                ...state,\n                rents: [...action.rents],\n            };\n        }\n        case RENTS_SET_SELECTED_RENT: {\n            return {\n                ...state,\n                selectedDayRents: [...state.rents.filter(r => datesWithoutTimeIsSame(new Date(r.From),action.rentDate) && (r.SimplePlaceId == action.simplePlaceId))],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setRents = (rents) => {\n    return {\n        type: RENTS_SET_RENTS,\n        rents\n    }\n}\n\nexport const setSelectedRent = (simplePlaceId, rentDate) => {\n    return {\n        type: RENTS_SET_SELECTED_RENT,\n        simplePlaceId,\n        rentDate\n    }\n}\n\n\n// все аренды с сервера по UmbracoId города\nexport const getAllRentsInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            RentAPI.getAllRentsInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setRents(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setRents(demoRents))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setRents(demoRents))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default rentReducer;","import {ampluaTypes, users} from './constants/commonConstants'\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\n\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\n\nlet demoUser = users[0];\n\nconst initState = {\n    myProfile: null,\n    vkProfile: null,\n    triedToGetProfile: false,\n\n     // level \n\n}\n\n\nexport let profileReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case PROFILE_SET_VK_PROFILE_INFO: {\n            return {...state,\n                vkProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_USER_PROFILE: {\n            return {...state,\n                myProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_TRIED_TO_GET_PROFILE: {\n            return {...state,\n                triedToGetProfile: action.tried,\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setVkProfileInfo = (user) => {\n    return {\n        type: PROFILE_SET_VK_PROFILE_INFO,\n        user\n    }\n}\n\nexport const setUserProfile = (user) => {\n    return {\n        type: PROFILE_SET_USER_PROFILE,\n        user\n    }\n}\n\nexport const setTriedToGetProfile = (tried) => {\n    return {\n        type: PROFILE_SET_TRIED_TO_GET_PROFILE,\n        tried\n    }\n}\n\n\n\n// получение данных профиля (без авторегистрации)\nexport const getUserProfile = (vkUserData) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getUserProfile(vkUserData)\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(false));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setTriedToGetProfile(true))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n            //dispatch(setUserProfile(demoUser))\n            //dispatch(setTriedToGetProfile(true))\n\n        }\n    }\n}\n\n// установка нового города пользователю\nexport const setUserProfileCity = (userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n        debugger\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.setUserProfileCity(userProfile).then()\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        //dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n// авторизация (со встроенной регистрацией)\nexport const getAuthInfo = (vkProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getAuthInfo(vkProfileInfo)\n                .then(pl => {\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(false));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\nexport default profileReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CollectAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\n\nconst COLLECTS_SET_ALL_SIMPLE_COLLECTS = \"COLLECTS_SET_ALL_SIMPLE_COLLECTS\";\nconst COLLECTS_SELECT_SIMPLE_COLLECT = \"COLLECTS_SELECT_SIMPLE_COLLECT\";\nconst COLLECTS_SET_COLLECT_ITEM_MODE = \"COLLECTS_SET_COLLECT_ITEM_MODE\";\nconst COLLECTS_DEL_SIMPLE_COLLECT = \"COLLECTS_DEL_SIMPLE_COLLECT\";\nconst COLLECTS_ADD_SIMPLE_COLLECT = \"COLLECTS_ADD_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SIMPLE_COLLECT = \"COLLECTS_SET_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SELECTED_COLLECT_MEMBERS = \"COLLECTS_SET_SELECTED_COLLECT_MEMBERS\";\nconst COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS = \"COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS\";\nconst COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT = \"COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\n\nconst initState = {\n    collects: [],\n    selected: {},\n    mode: \"view\",\n}\n\n\nlet collectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case COLLECTS_SET_ALL_SIMPLE_COLLECTS: {\n            return {\n                ...state,\n                collects: [...action.simplecollects],\n            };\n        }\n        case COLLECTS_SELECT_SIMPLE_COLLECT: {\n            return{\n                ...state,\n                selected: action.simplecollect,\n            }\n        }\n        case COLLECTS_SET_COLLECT_ITEM_MODE: {\n            return{\n                ...state,\n                mode: action.mode,\n            }\n        }\n        case COLLECTS_SET_SELECTED_COLLECT_MEMBERS: {\n            return{\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Members: [...action.members],\n                },\n            }\n        }\n        case COLLECTS_ADD_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects, action.collect],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_SET_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.map(col => {\n                    \n                    if (col.Id == action.collect.Id)\n                    {\n                        col = {...action.collect}\n                    }\n                    return col\n                })],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_DEL_SIMPLE_COLLECT: {\n            let res = {\n                ...state,\n                collects: [...state.collects.filter(col => col.Id != action.collect.Id) ],\n                selected: {...state.selected,\n                    Published: false,\n                    Deleted: true,\n            }\n            }\n            return res;\n        }\n        case COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                },\n            }\n        }\n        case COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT: {\n            debugger\n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members, action.member],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members, action.member],\n                },\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllSimpleCollects = (simplecollects) => {\n    return {\n        type: COLLECTS_SET_ALL_SIMPLE_COLLECTS,\n        simplecollects\n    }\n}\n\nexport const deleteMemberFromSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS,\n        member\n    }\n}\n\nexport const addMemberToSelectedSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT,\n        member\n    }\n}\n\nexport const selectSimpleCollect = (simplecollect) => {\n    return {\n        type: COLLECTS_SELECT_SIMPLE_COLLECT,\n        simplecollect\n    }\n}\n\nexport const setCollectItemMode = (mode) => {\n    return {\n        type: COLLECTS_SET_COLLECT_ITEM_MODE,\n        mode\n    }\n}\n\nexport const delSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_DEL_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const addSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_ADD_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_SET_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSelectedMembers = (members) => {\n    return {\n        type: COLLECTS_SET_SELECTED_COLLECT_MEMBERS,\n        members\n    }\n}\n\n\n\n\n// возвращает актуальные простые сборы города\nexport const getAllSimpleCollectsInCityByCityUmbracoId = (cityId = -1, userProfile = null) => {\n    return dispatch => {\n        if (cityId != -1) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    CollectAPI.getAllSimpleByCityUmbracoId(cityId)\n                        .then(pl => {\n                            //debugger\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setAllSimpleCollects(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные CollectAPI.getAllSimpleByCityUmbracoId\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отказ участника сбора\nexport const DeleteMemberFromCollect = (userProfileId = -1, collect = null, simpleMember=null, reason = \"\") => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null) &&  (simpleMember != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.deleteMemberFromSimpleCollect(userProfileId, collect, simpleMember, reason)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(deleteMemberFromSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.deleteMemberFromSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавление сбора\nexport const AddSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.addSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(addSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// изменение сбора\nexport const EditSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.editSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                \n                                if (pl && pl.data) {\n                                    \n                                    dispatch(setSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отмена сбора\nexport const DelSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.delSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(delSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.delSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// регистрация участника на сбор\nexport const registerMemberToSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.registerSimpleMemberToSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n\n                                    dispatch(addMemberToSelectedSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default collectReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, BidTeamAPI, TournamentAPI } from './../utils/api/api.js'\nimport { cityTournamentAdmins } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTournamentAdmins = cityTournamentAdmins;\n\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\nconst TOURNAMENT_MY_ADD_OR_EDIT = \"TOURNAMENT_MY_ADD_OR_EDIT\";\nconst TOURNAMENT_SET_TOURNAMENTGROUPS = \"TOURNAMENT_SET_TOURNAMENTGROUPS\";\nconst TOURNAMENT_SET_TOURNAMENTTEAMS = \"TOURNAMENT_SET_TOURNAMENTTEAMS\";\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\nconst TOURNAMENT_MATCH_LENGTH = \"TOURNAMENT_MATCH_LENGTH\";\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES = \"TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES\";\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    tournaments: [], // все турниры\n    bidsNew: [], // новые заявки на турниры\n    selectedForView: {}, // выбранный турнир для просмотра в пользовательском режиме (а надо ли?)\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\n    selectedTables: [],  // турнирные таблицы выбранного турнира для просмотра пользователями\n    myTournaments: [], // те, что я создал\n    cityTournamentAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet tournamentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\n            return {\n                ...state,\n                myTournaments: [...action.myTournaments],\n            };\n        }\n        case TOURNAMENT_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TOURNAMENT_SET_MYTOURNAMENT: {\n            \n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.map(tour => {\n                    \n                    if (tour.Id == action.mytournament.Id) {{\n                        tour = {...action.mytournament};\n                    }}\n                    return tour;\n                })],\n            };\n        }\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\n            \n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES: {\n            \n            return {\n                ...state,\n                selectedTables: [...action.tables],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\n            let index = -1;\n            let max = -1;\n            \n            \n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {...action.tournament,\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\n                        return {...item, KeyId: ++max}\n                    })]\n                },\n            };\n        }\n        case TOURNAMENT_RESET_TOURNAMENT: {\n            return {\n                ...state,\n                selected: {...emptyTournament},\n            };\n        }\n        case TOURNAMENT_MY_ADD_OR_EDIT: {\n            debugger\n            let newTourn = state.myTournaments.filter(t => t.Id == action.tournament.Id)\n            if (newTourn){\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments.map(t => {\n                            if (t.Id == action.tournament.Id){\n                                t = {...t.tournament}\n                            }\n                            return t;\n                        })\n                    ],\n                };\n            }\n            else{\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments, action.tournament\n                    ],\n                };\n            }\n        }\n        case TOURNAMENT_MATCH_LENGTH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                MatchLength: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\n            return {\n                ...state,\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\n            };\n        }\n        case TOURNAMENT_SET_NEW_BIDS: {\n            return {\n                ...state,\n                bidsNew: [...action.bids],\n            };\n        }\n        case TOURNAMENT_DEL_BID: {\n            return {\n                ...state,\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case TOURNAMENT_SET_WHEN_BEGIN: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenBegin: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_WHEN_END: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenEnd: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Reglament: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Details: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_PUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: true,\n                },\n            };\n        }\n        case TOURNAMENT_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: false,\n                },\n            };\n        }\n        case TOURNAMENT_ADD_GROUP: {\n            let max = -1;\n            debugger\n            \n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n            // if (action.group.Id < 0)\n            //     return {\n            //         ...state,\n            //         selected: {...state.selected, \n            //             TournamentGroups: [...state.selected.TournamentGroups, \n            //                 {\n            //                     KeyId: max + 1,    \n            //                     Name: action.group.Name\n            //                 }],\n            //         },\n            //     };\n            // else\n                return {\n                    ...state,\n                    selected: {...state.selected, \n                        TournamentGroups: [...state.selected.TournamentGroups, \n                            {\n                                ...action.group,\n                                KeyId: max + 1,    \n                                Id: action.group.Id,\n                                Name: action.group.Name\n                            }],\n                    },\n                };\n\n        }\n        case TOURNAMENT_SET_GROUP: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\n                        if (item.Id == action.groupId)\n                        {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTGROUPS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTTEAMS: {\n\n            let newTGroups = [];\n            \n\n            // clear tournament groups\n            state.selected.TournamentGroups.forEach(tg => {\n                tg.Teams = [];\n            })\n\n            // заполнение групп\n            action.bidsWithTeamsAndGroups.forEach(bid => {\n                \n                newTGroups = state.selected.TournamentGroups.map(tg => {\n                    \n                    if (tg.Id == bid.TournamentGroupId)\n                    {\n                        bid.Team.Name = bid.TeamName;\n                        tg.Teams = [...tg.Teams, bid.Team];\n                    }\n                    return tg;\n                })\n            });\n            \n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...newTGroups],\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\n            debugger\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setTournamentTables = (tables) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES,\n        tables\n    }\n}\n\nexport const setMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_SET_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const addOrEditTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_MY_ADD_OR_EDIT,\n        tournament\n    }\n}\n\nexport const setSelectedTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\n        tournament\n    }\n}\n\nexport const deleteMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const setMyTournaments = (myTournaments) => {\n    return {\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\n        myTournaments\n    }\n}\n\nexport const tournamentPublish = () => {\n    return {\n        type: TOURNAMENT_PUBLISH,\n    }\n}\n\nexport const tournamentUnpublish = () => {\n    return {\n        type: TOURNAMENT_UNPUBLISH,\n    }\n}\n\nexport const resetTournament = () => {\n    return {\n        type: TOURNAMENT_RESET_TOURNAMENT\n    }\n}\n\nexport const setTournamentWhenBegin = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_BEGIN,\n        when\n    }\n}\n\nexport const setTournamentWhenEnd = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_END,\n        when\n    }\n}\n\nexport const setTournamentMode = (mode) => {\n    return {\n        type: TOURNAMENT_SET_MODE,\n        mode\n    }\n}\n\nexport const setTournamentName = (value) => {\n    return {\n        type: TOURNAMENT_SET_NAME,\n        value\n    }\n}\n\nexport const setTournamentMatchLength = (value) => {\n    return {\n        type: TOURNAMENT_MATCH_LENGTH,\n        value\n    }\n}\n\nexport const setTournamentDetails = (value) => {\n    return {\n        type: TOURNAMENT_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTournamentReglament = (value) => {\n    return {\n        type: TOURNAMENT_SET_REGLAMENT,\n        value\n    }\n}\n\nexport const setTournamentNewBids = (bids) => {\n    return {\n        type: TOURNAMENT_SET_NEW_BIDS,\n        bids\n    }\n}\n\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\n    return {\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\n        cityTournamentAdmins\n    }\n}\n\nexport const setSelectedTournamentGroups = (groups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTGROUPS,\n        groups\n    }\n}\n\nexport const setTournamentTeams = (bidsWithTeamsAndGroups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTTEAMS,\n        bidsWithTeamsAndGroups\n    }\n}\n\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\n    debugger\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const addGroupToTournament = (group) => {\n    return {\n        type: TOURNAMENT_ADD_GROUP,\n        group\n    }\n}\n\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\n    return {\n        type: TOURNAMENT_SET_GROUP,\n        tournamentId,\n        groupId,\n        groupName\n    }\n}\n\nexport const deleteTournamentBid = (bid) => {\n    return {\n        type: TOURNAMENT_DEL_BID,\n        bid\n    }\n}\n\n// перемещение заявки от команды в другую группу по команде\nexport const replaceTeam = (team, tOldGoup, tNewGroup) => {\n    \n} \n\n// отмена заявки от команды (удаление из турнира) по команде\nexport const deleteTeam = (team, tGoup) => {\n\n}\n\n// все админы турниров города\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        \n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новый турнир\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\n                    .then(pl => {\n                        debugger\n                        if (pl && pl.data) {\n                            dispatch(addOrEditTournament(pl.data))\n                            //dispatch(resetTournament());\n                            //dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                            //dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        //dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\n                        //dispatch(setGlobalPopout(false))\n                    })\n            else {\n                //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                //dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            //dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\n            //dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\n    \n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет турнир\nexport const deleteTournament = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает новые заявки в турнир\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setTournamentNewBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает группы и заявленные команды турнира\nexport const getTournamentTeams = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.getTournamentTeamsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// изменяет группу команды в турнире\nexport const changeTournamentTeamBidTournamentGroup = (team = null, newgroup = null, oldgroup = null, userprofile = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (newgroup != null) && (oldgroup != null)) {\n            \n            if (authQueryString && authQueryString.length > 0)\n            \n                CityTournamentAdminAPI.changeTeamTournamentGroup(team, newgroup, oldgroup, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось сменить группу: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сменить группу, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Подтверждает заявку в турнир\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Отклоняет заявку в турнир\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Удаляет команду из турнира\nexport const deleteTeamFromTournament = (team = null, tournamentGroup = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournamentGroup != null) && (userprofile != null)  && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTeamFromTournamentByTeam(team, tournamentGroup, userprofile, admintext)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду из турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет группу турнира\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournamentGroupId < 0)\n                {\n                    debugger\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавляет группу турнира\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournament.Id < 0)\n                {\n                    debugger\n                    dispatch(addGroupToTournament(tournamentGroup));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(addGroupToTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTournaments = (userProfileId = -1) => {\n    return dispatch => {\n        if (userProfileId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setMyTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры города для пользователя\nexport const getTournamentsByCityId = (cityUmbId = -1) => {\n    return dispatch => {\n        if (cityUmbId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getAllTournamentsInCityByCityUmbracoId(cityUmbId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        debugger\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера турнирные таблицы групп/лиг выбранного турнира\nexport const getTournamentTablesByTournamentId = (tournamentId = -1) => {\n    return dispatch => {\n        if (tournamentId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getTournamentTablesByTournamentId(tournamentId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournamentTables(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, MatchAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoMatch = Match;\n\nconst MATCH_SET_ALL_MATCHES = \"MATCH_SET_ALL_MATCHES\";\nconst MATCH_DEL_MATCH = \"MATCH_DEL_MATCH\";\nconst MATCH_ADD_MATCH = \"MATCH_ADD_MATCH\";\nconst MATCH_SET_HOT_MATCHES = \"MATCH_SET_HOT_MATCHES\";\nconst MATCH_SET_ACCESS = \"MATCH_SET_ACCESS\";\nconst MATCH_SET_MODE = \"MATCH_SET_MODE\";\nconst MATCH_SET_PLAYED = \"MATCH_SET_PLAYED\";\nconst MATCH_SET_HOT_PANEL = \"MATCH_SET_HOT_PANEL\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    matches: [],\n    hot: {\n        yesterday: [],\n        today: [],\n        tomorrow: [],\n    },\n    hotPanel: \"today\", // \"yesterday\", \"tomorrow\"\n    selected: {},\n    access: \"user\",\n    mode: \"list\", // режим отображения турнира (\"list\" - список, \"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet matchReducer = (state = initState, action) => {\n    switch (action.type) {\n        case MATCH_SET_ALL_MATCHES: {\n            return {\n                ...state,\n                matches: [...action.matches],\n            };\n        }\n        case MATCH_DEL_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches.filter(m => m.Id != action.match.Id)],\n            };\n        }\n        case MATCH_ADD_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches, action.match],\n            };\n        }\n        case MATCH_SET_HOT_MATCHES: {\n            \n            let date = new Date();\n            let today = date.addDays(1).addDays(-1);\n            let yesterday = date.addDays(-1);\n            let tomorrow_begin = date.addDays(1);\n            let tomorrow_end = date.addDays(2);\n\n            let st = {\n                ...state,\n                hot: {\n                    yesterday: [...action.matches.filter(match => {\n                        \n                        return ((new Date(match.When) >= yesterday) && (new Date(match.When) < today))\n                    })],\n                    today: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= today) && (new Date(match.When) < tomorrow_begin))\n                    })],\n                    tomorrow: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= tomorrow_begin) && (new Date(match.When) < tomorrow_end))\n                    })],\n                },\n            };\n            \n            return st;\n        }\n        case MATCH_SET_ACCESS: {\n            return {\n                ...state,\n                access: action.access,\n            };\n        }\n        case MATCH_SET_PLAYED: {\n            return {\n                ...state,\n                access: action.played,\n            };\n        }\n        case MATCH_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case MATCH_SET_HOT_PANEL: {\n            return {\n                ...state,\n                hotPanel: action.panelName,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllMatches = (matches) => {\n    return {\n        type: MATCH_SET_ALL_MATCHES,\n        matches\n    }\n}\n\nexport const setHotMatches = (matches) => {\n    return {\n        type: MATCH_SET_HOT_MATCHES,\n        matches\n    }\n}\n\nexport const delMatch = (match) => {\n    return {\n        type: MATCH_DEL_MATCH,\n        match\n    }\n}\n\nexport const addMatch = (match) => {\n    return {\n        type: MATCH_ADD_MATCH,\n        match\n    }\n}\n\nexport const setAccess = (access) => {\n    return {\n        type: MATCH_SET_ACCESS,\n        access\n    }\n}\n\nexport const setPlayed = (played) => {\n    return {\n        type: MATCH_SET_PLAYED,\n        played\n    }\n}\n\nexport const setMode = (mode) => {\n    return {\n        type: MATCH_SET_MODE,\n        mode\n    }\n}\n\nexport const setHotPanel = (panelName) => {\n    return {\n        type: MATCH_SET_HOT_PANEL,\n        panelName\n    }\n}\n\n\n\n// все матчи турнира\nexport const getAllMatchesByTournament = (tournament = null, userProfile = null, startindex = 0) => {\n    return dispatch => {\n        if ((tournament != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0)\n                MatchAPI.getAllMatchesByTournament(tournament, userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data && pl.data.length > 0) {\n                                \n                                dispatch(setAllMatches(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавить матч в турнир\nexport const addMatchToShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.addMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                                dispatch(setErrorMessage(\"Успешно добавлено\"))\n\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n// удалить матч из турнира\nexport const delMatchFromShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.delMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(delMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// возвращает актуальные матчи города\nexport const getMatchesInCurrentCity = (userProfile = null) => {\n    return dispatch => {\n        if (userProfile != null) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.getCurrentMatchesByCity(userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data.length > 0) {\n                                dispatch(setHotMatches(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные MatchAPI.getCurrentMatchesByCity\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default matchReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { BidTeam } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoBidTeam = BidTeam;\n\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\n\n\nconst currentDate = new Date();\n\nconst emptyBidTeam = BidTeam\n\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\nexport const BID_TEAM_MODE_VIEW = \"view\"\n\nconst initState = {\n    tournaments: [], // все турниры\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\n    selectedTournament: {...EmptyTournament},\n    myBids: [], // те, что я создал\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\n}\n\n\nlet bidBidTeamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case BID_TEAM_SET_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\n            return {\n                ...state,\n                selectedTournament: {...state.selectedTournament, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case BID_TEAM_SET_SELECTED_MODE: {\n            return {\n                ...state,\n                selectMode: action.mode,\n            };\n        }\n        case BID_TEAM_SET_MY_BIDS: {\n            return {\n                ...state,\n                myBids: [...action.bids],\n            };\n        }\n        case BID_TEAM_ADD_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids, action.bid],\n            };\n        }\n        case BID_TEAM_DEL_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case BID_TEAM_APPROVE_BID: {\n            debugger\n            return {\n                ...state,\n                \n            };\n        }\n        \n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: BID_TEAM_SET_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setMyBids = (bids) => {\n    return {\n        type: BID_TEAM_SET_MY_BIDS,\n        bids\n    }\n}\n\nexport const approveBid = (bid) => {\n    return {\n        type: BID_TEAM_APPROVE_BID,\n        bid\n    }\n}\n\nexport const addMyBid = (bid) => {\n    return {\n        type: BID_TEAM_ADD_MY_BID,\n        bid\n    }\n}\n\nexport const delMyBid = (bid) => {\n    return {\n        type: BID_TEAM_DEL_MY_BID,\n        bid\n    }\n}\n\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\n        groups\n    }\n}\n\nexport const setBidTeamSelectedMode = (mode) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_MODE,\n        mode\n    }\n}\n\n// все админы турниров города\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        \n        if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getActualTournaments(userprofile, team)\n                .then(pl => {\n                    \n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setTournaments(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        //dispatch(setCityBidTeamAdmins(demoBidTeam))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос заявок команды\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (team.Id >= 0)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(setMyBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавление заявки от команды\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(addMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаление заявки от команды\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\n    \n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\n            .then(pl => {\n                        \n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\n                            dispatch(delMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                    else {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                        dispatch(setGlobalPopout(false))\n                        \n                    }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n            \n        }\n    }\n}\n\n\n// согласование/отмена заявки от команды\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(approveBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default bidBidTeamReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\n\n\nconst initState = {\n    cities: [],\n}\n\n\nlet cityReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getAllCitiesFromServer = () => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            CityAPI.getAll().then()\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default cityReducer;","import { ProfileAPI, CityAPI, errorObj, VKAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\nconst VK_SET_SELECTED_USER = \"VK_SET_SELECTED_USER\";\n\n\nconst initState = {\n    selectedUser: {},\n    cities: [],\n}\n\n\nlet vkReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        case VK_SET_SELECTED_USER:{\n            return {...state,\n                selectedUser: {...action.user},\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n\nexport const setSelectedUser = (user) => {\n    return {\n        type: VK_SET_SELECTED_USER,\n        user\n    }\n}\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getUser = (id) => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            VKAPI.getUser(id)\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default vkReducer;","import React from 'react'\n\nconst ProfilePanel = (props) => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default ProfilePanel","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withHistorySave = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n\n        }\n\n        clickEvent(evt){\n            \n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { Component } from 'react'\nimport {PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst BackButton = (props) => {\n  \n \n    return (\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\n        \n    )\n}\n\nexport default withHistorySave(BackButton)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst TabbarItemWithHistory = (props) => {\n  \n \n    return (\n        <TabbarItem isBack={false} {...props}></TabbarItem>\n        \n    )\n}\n\nexport default withHistorySave(TabbarItemWithHistory)","import React, { useState, useEffect } from 'react';\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input } from '@vkontakte/vkui'\n\n\n\nlet ModalCommon = (props) => {\n    // при первом запуске подгрузить города\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\n    let [bidCity, setBidCity] = useState(\"\")\n\n\tuseEffect(() => {\n\t\t// загрузка городов здесь\n\t\t\n    }, [])\n    \n\n\n    return (\n        <ModalRoot activeModal={props.modalName}>\n            <ModalPage id=\"CitySelect\"\n                header={\n                <ModalPageHeader>\n                \n              </ModalPageHeader>\n            }\n          >\n                <Group>\n                    <InfoRow>\n                        Ваш город определен как: {props.data.title}\n                    </InfoRow>\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\n                    <InfoRow top=\"Город\">            \n                        <SelectMimicry placeholder=\"Выбрать город\" />\n                    </InfoRow>\n                </Group>    \n            </ModalPage>\n\n            <ModalCard\n                id=\"Error\"\n                onClose={props.Close}\n                //header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\n                header={props.data ? props.data : \"Произошла неизвестная ошибка\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"AreYouSure\"\n                onClose={props.Close}\n                header={props.data.message ? props.data.message : \"Текст вопроса не передан\"}\n                actions={\n                    <>\n                    <Button size=\"l\" mode=\"destructive\" onClick={props.Accept}>Да</Button>\n                    <Button size=\"l\" mode=\"secondary\" onClick={props.Close}>Нет</Button>\n                </>\n            }\n                >\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"MyProfile\"\n                onClose={props.Close}\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n                    {\n                        (props.data.Name) ?\n                        `Имя: ${props.data.Name} \\r\\n\n                        Фамилия: ${props.data.Surname} \\r\\n\n                        Дата рождения: ${props.data.Birth} \\r\\n\n                        Зарегистрирован: ${props.data.Register} \\r\\n\n                        Город: ${props.data.City.Name}\n                        ` : \"\"\n                    }\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectBirth\"\n                // onClose={props.Close}\n                header=\"Укажите Ваш год рождения\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => props.action({...props.data, bdate: props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)})}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow header=\"Год рождения не определен\">\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Год рождения\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectCity\"\n                // onClose={props.Close}\n                header=\"Выберите город\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => {\n                        debugger\n                        props.action({...props.data.profile, CityUmbracoId: selectedCity})\n                        }\n                    }>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Город не найден\">\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \n                                Выберите из списка ближайший к вам город, в котором вы готовы участвовать в сборах.\n                            </InfoRow>\n                            <FormItem top=\"Город\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    debugger\n                                    setSelectedCity(+e.currentTarget.value)\n                                    }}\n                                options={props.data.cities && props.data.cities.map(city => {\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\n                                }\n                                )}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                        <InfoRow>или</InfoRow>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Укажите название вашего города\">\n                                Оставьте заявку администратору на добавление Вашего города в систему\n                                (После отправки сказать спасибо и перевести профиль в режим просмотра... Не нужно предлагать другой город, пожалуй)\n                            </InfoRow>\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n      </ModalRoot>\n    )\n}\n\n\nexport default ModalCommon","import React, { Component } from 'react'\nimport { RichCell } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst RichCellWithHistory = (props) => {\n  \n \n    return (\n        <RichCell isBack={false} {...props}></RichCell>\n        \n    )\n}\n\nexport default withHistorySave(RichCellWithHistory)","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\nimport { Icon24ChevronRight } from '@vkontakte/icons';\n\nconst Icon24ChevronRightWithHistory = (props) => {\n  \n \n    return (\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\n        \n    )\n}\n\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import React, { Component } from 'react'\nimport { Button } from '@vkontakte/vkui'\nimport { withNotify } from '../HOCs/withNotify'\n\nconst ButtonWithNotify = (props) => {\n  //debugger\n \n    return (\n        <Button Accept={null} Close={props.Close} Message={props.Message} {...props}></Button>\n        \n    )\n}\n\nexport default withNotify(ButtonWithNotify)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel, setCurrentModalWindow} from '../../../../store/systemReducer'\nimport ModalCommon from '../../../Modals/ModalCommon/ModalCommon'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withNotify = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel, setCurrentModalWindow\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n            this.AcceptAndClose = this.AcceptAndClose.bind(this);\n\n        }\n\n        AcceptAndClose(){\n            this.props.Yes();\n            this.props.setCurrentModalWindow(null);\n        }\n\n        clickEvent(evt){\n            // тут выводим окошко с вопросом (уверен?), если да, то делаем действие, переданное в хэндлере\n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n                \n            this.props.setCurrentModalWindow(<ModalCommon \n                modalName=\"AreYouSure\" \n                //Message={this.props.Message} \n                data={{ message: this.props.Message }}\n                Close={() => this.props.setCurrentModalWindow(null)}\n                Accept={this.AcceptAndClose}\n                ></ModalCommon>);\n            //this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport TournamentListItem from './TournamentListItem'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\nconst TournamentAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBegin);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {!item.Published ? \n                                        <ButtonWithNotify Message=\"Опубликовать турнир?\" Yes={() => props.Button1Handle(item, true)}>Опубликовать</ButtonWithNotify>\n                                        : \n                                        <ButtonWithNotify Message=\"Снять с публикации турнир?\" Yes={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</ButtonWithNotify>}\n                                        <ButtonWithNotify Message=\"Удалить турнир?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    caption={date && `Начало: ${dateToString(date)}`}\n                                    after={<Icon24ChevronRightWithHistory\n                                    handleClick={() => props.CellClick(item)} \n                                        toMenuName=\"tournamentitem\" \n                                        data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\n                                    }\n                                    text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : <FormItem><InfoRow>Нет турниров</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TournamentAdminList","import React, { Component } from 'react'\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst ButtonWithHistory = (props) => {\n  \n \n    return (\n        <Button isBack={false} {...props}></Button>\n        \n    )\n}\n\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TournamentAdminList from './TournamentAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, \n    setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TournamentAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTournament = (tour, publish) => {\n        \n        props.publishTournament(tour, props.myProfile, publish);\n    }\n   \n    const DeleteTournament = (tour) => {\n        props.deleteTournament(tour, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setSelectedTournament(item);\n        props.setTournamentMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTournament();\n        props.setTournamentMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTournaments(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\n                </FormItem>\n                <TournamentAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTournament}\n                    Button2Handle = {DeleteTournament}\n                    List={props.tournament.myTournaments}\n                >\n                    \n                </TournamentAdminList>\n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TournamentAdminPanel);","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\nconst TeamAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBorn);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {/* {!item.Published ? \n                                        <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\n                                        : \n                                        <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\n                                        <ButtonWithNotify Yes={() => props.Button2Handle(item)} Message=\"Удалить команду?\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    // caption={date && `Основана: ${dateToString(date)}`}\n                                    after={\n                                        <Icon24ChevronRightWithHistory\n                                            handleClick={() => props.CellClick(item)} \n                                            toMenuName=\"teamitem\" \n                                            data-story=\"teamitem\"\n                                        >\n\n                                        </Icon24ChevronRightWithHistory>\n                                    }\n                                    // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : \n                    <FormItem><InfoRow>Нет команд</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { TeamAdminAPI, TeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { TeamAdmins } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTeamAdmins = TeamAdmins;\n\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\n\nconst currentDate = new Date();\n\nconst emptyTeam = {\n    Id: -1,\n    Name: \"\",\n    Year: 0,\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    Details: \"\",\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [],\n    Admins: [],\n    Matches: [],\n    Players: [],\n    Published: false,\n    Deleted: false,\n}\n\nconst initState = {\n    teams: [], // все турниры\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\n    myTeams: [], // те, что я создал\n    cityTeamAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения команды (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet teamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TEAM_SET_ALL_TEAMS: {\n            return {\n                ...state,\n                teams: [...action.teams],\n            };\n        }\n        case TEAM_SET_MY_TEAMS: {\n           // debugger\n            return {\n                ...state,\n                myTeams: [...action.myTeams],\n            };\n        }\n        case TEAM_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TEAM_ADD_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams, { ...action.myteam }]\n            };\n        }\n        case TEAM_SET_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.map(tour => {\n\n                    if (tour.Id == action.myteam.Id) {\n                        {\n                            tour = { ...action.myteam, };\n                        }\n                    }\n                    return tour;\n                })],\n            };\n        }\n        case TEAM_DELETE_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\n            };\n        }\n        case TEAM_SET_SELECTED_TEAM: {\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\n            debugger\n\n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxT)\n                        maxT = item.KeyId;\n                }\n            });\n            state.selected.Admins.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxA)\n                        maxA = item.KeyId;\n                }\n            });\n            state.selected.Matches.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxM)\n                        maxM = item.KeyId;\n                }\n            });\n            state.selected.Players.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxP)\n                        maxP = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {\n                    ...action.team,\n                    WhenBorn: {\n                        day: new Date(action.team.WhenBorn).getDate(),\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\n                        year: new Date(action.team.WhenBorn).getFullYear()\n                    },\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\n                        return { ...item, KeyId: ++maxT }\n                    })],\n                    Admins: [...action.team.Admins.map(item => {\n                        return { ...item, KeyId: ++maxA }\n                    })],\n                    Matches: [...action.team.Matches.map(item => {\n                        return { ...item, KeyId: ++maxM }\n                    })],\n                    Players: [...action.team.Players.map(item => {\n                        return { ...item, KeyId: ++maxP }\n                    })],\n                },\n            };\n        }\n        case TEAM_RESET_TEAM: {\n            return {\n                ...state,\n                selected: { ...emptyTeam },\n            };\n        }\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\n            return {\n                ...state,\n                cityTeamAdmins: [...action.cityTeamAdmins],\n            };\n        }\n        case TEAM_SET_WHEN_BORN: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    WhenBorn: action.when,\n                },\n            };\n        }\n        case TEAM_SET_NAME: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Name: action.value,\n                },\n            };\n        }\n        case TEAM_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Reglament: action.value,\n                },\n            };\n        }\n        case TEAM_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Details: action.value,\n                },\n            };\n        }\n        case TEAM_PUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: true,\n                },\n            };\n        }\n        case TEAM_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: false,\n                },\n            };\n        }\n        case TEAM_ADD_GROUP: {\n            let max = -1;\n            state.selected.TeamGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: [...state.selected.TeamGroups,\n                    {\n                        KeyId: max + 1,\n                        Name: action.groupName\n                    }],\n                },\n            };\n        }\n        case TEAM_SET_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.map(item => {\n                        if (item.Id == action.groupId) {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TEAM_DEL_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTeams = (teams) => {\n    return {\n        type: TEAM_SET_ALL_TEAMS,\n        teams\n    }\n}\n\nexport const setMyTeam = (myteam) => {\n    return {\n        type: TEAM_SET_MYTEAM,\n        myteam\n    }\n}\n\nexport const addMyTeam = (myteam) => {\n    return {\n        type: TEAM_ADD_MYTEAM,\n        myteam\n    }\n}\n\nexport const setSelectedTeam = (team) => {\n    debugger\n    return {\n        type: TEAM_SET_SELECTED_TEAM,\n        team\n    }\n}\n\nexport const deleteMyTeam = (myteam) => {\n    return {\n        type: TEAM_DELETE_MYTEAM,\n        myteam\n    }\n}\n\nexport const setMyTeams = (myTeams) => {\n    return {\n        type: TEAM_SET_MY_TEAMS,\n        myTeams\n    }\n}\n\nexport const teamPublish = () => {\n    return {\n        type: TEAM_PUBLISH,\n    }\n}\n\nexport const teamUnpublish = () => {\n    return {\n        type: TEAM_UNPUBLISH,\n    }\n}\n\nexport const resetTeam = () => {\n    return {\n        type: TEAM_RESET_TEAM\n    }\n}\n\nexport const setTeamWhenBorn = (when) => {\n    return {\n        type: TEAM_SET_WHEN_BORN,\n        when\n    }\n}\n\n\nexport const setTeamMode = (mode) => {\n    return {\n        type: TEAM_SET_MODE,\n        mode\n    }\n}\n\nexport const setTeamName = (value) => {\n    return {\n        type: TEAM_SET_NAME,\n        value\n    }\n}\n\nexport const setTeamDetails = (value) => {\n    return {\n        type: TEAM_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTeamReglament = (value) => {\n    return {\n        type: TEAM_SET_REGLAMENT,\n        value\n    }\n}\n\n\n\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\n    return {\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\n        cityTeamAdmins\n    }\n}\n\nexport const delGroupFromTeam = (teamId, groupId) => {\n    return {\n        type: TEAM_DEL_GROUP,\n        teamId,\n        groupId\n    }\n}\n\nexport const addGroupToTeam = (teamId, groupName) => {\n    return {\n        type: TEAM_ADD_GROUP,\n        teamId,\n        groupName\n    }\n}\n\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\n    return {\n        type: TEAM_SET_GROUP,\n        teamId,\n        groupId,\n        groupName\n    }\n}\n\n\n// все админы турниров города\nexport const getAllCityTeamAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новую команду\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null && userprofile != null) {\n            if (authQueryString && authQueryString.length > 0)\n            {\n                if (team.Id < 0) // добавление\n                {\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n                else{ // изменение\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет команду\nexport const deleteTeam = (team = null, userprofile = null) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.deleteTeam(team, userprofile)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTeams = (userProfileId = -1) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (userProfileId != -1) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n\n                            dispatch(setMyTeams(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан userprofile = -1\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getTeamInfo = (team = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n            TeamAPI.getTeamInfoByTeamId(team.Id)\n                    .then(pl => {\n                        \n                        if (pl && pl.data) {\n                            \n                            dispatch(setSelectedTeam(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default teamReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem, Group } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from './TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setSelectedTeam(item);\n        props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTeam();\n        props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n        \n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                </FormItem>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\n                </FormItem>\n                <Group>\n                    <TeamAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTeam}\n                    Button2Handle = {DeleteTeam}\n                    List={props.team.myTeams}\n                    >\n                        \n                    </TeamAdminList>\n                </Group>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TeamAdminPanel);","import React from 'react'\nimport { Cell } from '@vkontakte/vkui'\n\n\n\n\nconst ListItem = (props) => {\n    return (\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \n            removable \n            onRemove={() => props.Delete(props.KeyId)}\n            >\n                {props.Name}\n            </Cell>\n    )\n\n}\n\n\nexport default ListItem","import React, {useState} from 'react'\nimport  ButtonWithNotify  from './../../Common/WithNotify/ButtonWithNotify'\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\n\n\n\n\nconst BidListItem = (props) => {\n\n    let [adminText, setAdminText] = useState(\"\");\n\n\n    return (\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \n            actions={\n                <>\n                    <ButtonWithNotify mode=\"primary\" Message=\"Принять заявку команды?\" Yes={() => props.Accept(props.Item)}>Принять</ButtonWithNotify>\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\n                    <ButtonWithNotify mode=\"destructive\" Message=\"Отклонить заявку команды?\" Yes={() => props.Decline(props.Item, adminText)}>Отклонить</ButtonWithNotify>\n                </>\n            }\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\n            >\n                Команда {props.Item.Team.Name}\n            </RichCell>\n    )\n\n}\n\n\nexport default BidListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport ButtonWithNotify from '../WithNotify/ButtonWithNotify';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Shedule = (props) => {\n\n    useEffect(() => {\n\n        props.getAllMatchesByTournament(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected)\n\n    let isAdminMode = props.mode == \"admin\" ? true : false;\n    let tournament = props.tournament;\n    let today = props.todayIs;\n\n    // создание объектов для заполнения выпадающих списков (count - сколько элементов, makeZeroBefore - дописывать ли нули впереди к цифрам от 0 до 9)\n    let optMaker = (count, makeZeroBefore = true) => {\n        let m = [];\n        for (let i = 0; i < count; i++)\n            m = [...m, { value: i, label: ((i <= 9) && (makeZeroBefore)) ? \"0\" + i : i }]\n        return m\n    }\n\n    let groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n    //debugger\n    let places = props.places\n        .map(p => p.Name.length ? p : null)\n        .filter(p => p)\n        .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n    let teams = [{ value: 0, label: \"Не выбрано\" }]\n    let hours = [...optMaker(24)];\n    let minutes = [...optMaker(60)];\n    let teamGoals = [...optMaker(99, false)];\n\n    const [selectedTournamentGroup, setSelectedTournamentGroup] = React.useState((groups && Array.isArray(groups) && groups.length > 0) ? groups[0] : null);\n\n    const [selectedTournamentGroupTeamList, setSelectedTournamentGroupTeamList] = React.useState(teams);\n\n    const [selectedTeam1, setSelectedTeam1] = React.useState(0);\n    const [selectedTeam2, setSelectedTeam2] = React.useState(0);\n    const [selectedTeam1Goals, setTeam1Goals] = React.useState(0);\n    const [selectedTeam2Goals, setTeam2Goals] = React.useState(0);\n    const [selectedPlace, setSelectedPlace] = React.useState(0);\n    const [selectedId, setSelectedId] = React.useState(0);\n    const [selectedPlayed, setSelectedPlayed] = React.useState(false);\n    const [selectedDate, setSelectedDate] = React.useState({ day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() });\n    const [selectedHour, setSelectedHour] = React.useState([hours[0].value]);\n    const [selectedMinute, setSelectedMinute] = React.useState(minutes[0].value);\n\n    let getGroup = (groupId) => {\n        return tournament.TournamentGroups.find(x => x.Id == groupId);\n    }\n\n    let changeGroup = (league_id) => {\n        setSelectedTournamentGroup(league_id);\n        setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n    }\n\n    let allMatchesInAllGroups = []\n    props.tournaments.selected.TournamentGroups.forEach(tg => {\n\n        allMatchesInAllGroups.push({\n            TournamentGroup: { ...tg },\n            Matches: [...props.matches.filter(m => m.TournamentGroup.Id == tg.Id)]\n        })\n    })\n\n    let addMatch = (editId) => {\n\n        let match = (editId >= 0) ?\n            {\n                Id: editId,\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            } :\n            {\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            };\n\n        props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n        props.setMode(\"list\")\n    }\n\n\n    let delCurrentMatch = () => {\n\n        let match = {\n            When: selectedDate,\n            Id: selectedId,\n            TournamentGroupId: selectedTournamentGroup,\n            // TournamentGroup: {\n            //     Id: selectedTournamentGroup,\n            //     Tournament: {...props.tournaments.selected}\n            // },\n            PlaceId: selectedPlace,\n            Team1Id: selectedTeam1,\n            Team2Id: selectedTeam2,\n            Played: selectedPlayed,\n        }\n\n        props.delMatchFromShedule(match, props.myProfile, selectedHour, selectedMinute)\n        props.setMode(\"list\")\n        //props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n    }\n\n    let goToEditMatch = (match) => {\n        debugger\n\n        groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n        //debugger\n        places = props.places\n            .map(p => p.Name.length ? p : null)\n            .filter(p => p)\n            .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n        teams = [{ value: 0, label: \"Не выбрано\" }]\n        hours = [...optMaker(24)];\n        minutes = [...optMaker(60)];\n        teamGoals = [...optMaker(99, false)];\n\n        let date = new Date(match.When);\n\n\n        setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n        setSelectedTournamentGroup(match.TournamentGroupId);\n        setSelectedId(match.Id);\n        setTeam1Goals(match.Team1Goals);\n        setTeam2Goals(match.Team2Goals);\n        setSelectedTeam1(match.Team1.Id)\n        setSelectedTeam2(match.Team2.Id)\n        setSelectedPlace(match.PlaceId)\n        setSelectedPlayed(match.Played)\n        setSelectedDate({ day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() })\n        setSelectedHour(date.getHours())\n        setSelectedMinute(date.getMinutes())\n\n        props.setMode(\"edit\")\n    }\n\n//debugger\n    // выводим список существующего расписания с кнопками редактирования, удаления, переноса\n    // группируем список по датам, сортируем от последних к первым (последние выше)\n    // сделать кнопку сортировки\\\n\n    switch (props.access) {\n        case \"admin\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\n                                        {groupAndMatchesItem.Matches.length > 0 ?\n                                            <List>\n                                                {groupAndMatchesItem.Matches.map(match => {\n                                                    \n                                                    let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                    let date = new Date(match.When);\n                                                    return <RichCell\n                                                        caption={place.Name}\n                                                        text={\n                                                            match.Played ?\n                                                                <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                                                <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                                        }\n                                                        onClick={() => goToEditMatch(match)}\n                                                    >\n                                                        {match.Played ?\n                                                            `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\n                                                            `${match.Team1.Name} - ${match.Team2.Name}`\n                                                        }\n                                                    </RichCell>\n                                                })}\n                                            </List>\n                                            :\n                                            <SimpleCell>Нет расписания в группе</SimpleCell>\n                                        }\n                                    </Group>\n                                }\n                                )}\n                            </List>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <Button>Назад</Button>\n                        </Group>\n                    )\n                }; break;\n                case \"add\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Добавить матч?\" Yes={() => addMatch(-1)}>Добавить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n                case \"edit\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Сохранить матч?\" Yes={() => addMatch(selectedId)}>Сохранить</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Удалить матч?\" Yes={() => delCurrentMatch()} align=\"right\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n            }\n        }; break;\n        case \"user\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return (\n                                        <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\n                                            {\n                                                groupAndMatchesItem.Matches.length > 0\n                                                    ?\n                                                    <List>\n                                                        {groupAndMatchesItem.Matches.map(match => {\n                                                            let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                            let date = new Date(match.When);\n                                                            return <RichCell\n                                                                caption={place ? place.Name : \"Ошибка загрузки данных о месте\"}\n                                                                text={\n                                                                    match.Played ?\n                                                                        <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                                                        <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                                                }\n                                                            >\n                                                                {match.Played ?\n                                                                    `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\n                                                                    `${match.Team1.Name} - ${match.Team2.Name}`\n                                                                }\n                                                            </RichCell>\n                                                        })}\n                                                    </List>\n                                                    :\n                                                    <SimpleCell>Нет расписания в группе</SimpleCell>\n                                            }\n                                        </Group>\n                                    )\n                                }\n                                )}\n                            </List>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": { }; break;\n                case \"add\": { }; break;\n                case \"edit\": { }; break;\n            }\n        }; break;\n\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n})(Shedule)","import React, { useEffect, useState } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker,\n    Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel,\n    ActionSheet, ActionSheetItem, Gallery\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentMode, setTournamentWhenEnd, setTournamentName, setTournamentReglament, \n    setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, \n    acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, changeTournamentTeamBidTournamentGroup, \n    deleteTeamFromTournament, setTournamentMatchLength, getTournamentTablesByTournamentId,\n} from '../../../../store/tournamentsReducer'\nimport {goToPanel} from '../../../../store/systemReducer'\nimport {\n    getTeamInfo, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidListItem from '../ListItem/BidListItem';\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory';\nimport Shedule from '../../Common/Shedule/Shedule';\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\nconst TournamentItem = (props) => {\n    let currentDate = new Date();\n    let [tempGroupName, setTempGroupName] = useState(\"\");\n    let [currentTab, setCurrentTab] = useState(props.Tab ? props.Tab : \"info\");\n    let [activePopout, setActivePopout] = useState(null);\n    // let [slideIndex, setSlideIndex] = useState(0);\n    // let [isDraggable, setIsDraggable] = useState(true);\n    // let [showArrows, setShowArrows] = useState(true);\n\n    // это надо потом удалить. я вручную задал отображение вкладки расписания при открытии в режиме просмотра (для пользователей)\n\n    useEffect(() => {\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\n        props.getTournamentGroups(props.tournaments.selected)\n        props.getTournamentTablesByTournamentId(props.tournaments.selected.Id)\n\n    }, props.tournaments.selected)\n\n    \n    useEffect(() => {\n        props.mode == \"view\" ? setCurrentTab(\"shedule\") : setCurrentTab(\"info\")\n    }, props.mode)\n\n    useEffect(() => {\n        props.getTournamentTeams(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected.TournamentGroups)\n\n\n    const addToTournament = () => {\n\n        if (tempGroupName.trim() != \"\") {\n            //addGroupToTournament\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\n            setTempGroupName(\"\");\n        }\n    }\n\n    const DelGroupFromTournament = (keyId, groupId) => {\n        //props.tournaments.selected.Id, item.KeyId, item.Id\n\n        if (groupId < 0)\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\n        else\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\n    }\n\n    const AcceptBid = (item) => {\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\n\n    }\n\n    const DeclineBid = (item, text) => {\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\n\n    }\n\n    const CellClick = (item) => {\n\n        props.getTeamInfo(item);\n        props.setTeamMode(\"view\");\n    }\n\n    // удаление команды из турнира\n    const DeleteTeam = (team, tg) => {\n\n        props.deleteTeamFromTournament(team, tg, props.myProfile, \"Ваша команда удалена из турнира\")\n    }\n\n    const SelectTournamentGroup = (newGroup, oldGroup, team) => {\n        props.changeTournamentTeamBidTournamentGroup(team, newGroup, oldGroup, props.myProfile)\n    }\n\n    const SaveTournament = () => {\n        //props.resetTournament();\n//debugger\n        props.saveSelectedTournament(props.tournaments.selected, props.myProfile)\n        //props.goToPanel(\"tournamentadmin\", false); // закрываем текущий турнир и выводим все турниры\n        props.setTournamentMode(\"view\");\n    }\n\n\n    const SetPopup = (team, oldTg) => {\n\n        setActivePopout(\n            <ActionSheet\n                onClose={() => setActivePopout(null)}\n                iosCloseItem={<ActionSheetItem autoclose mode=\"cancel\">Отменить</ActionSheetItem>}\n            //toggleRef={this.baseTargetRef.current}\n            >\n                {\n                    props.tournaments.selected.TournamentGroups.map(newTg => {\n                        return (\n                            <ActionSheetItem\n                                onClick={() => {\n\n                                    SelectTournamentGroup(newTg, oldTg, team)\n                                }}\n                                autoclose\n                            >\n                                {newTg.Name}\n                            </ActionSheetItem>\n                        )\n                    })\n                }\n                <ActionSheetItem autoclose>Отмена</ActionSheetItem>\n            </ActionSheet>)\n\n    }\n\n\n    switch (props.mode) {\n        case \"view\": {\n\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"shedule\">\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\n                                <Shedule access=\"user\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Название турнира\" bottom=\"Имя турнира должно быть уникальным\">\n                                <InfoRow>{props.tournaments.selected.Name}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Дата начала\">\n                                <InfoRow>{new Date(\n                                    props.tournaments.selected.WhenBegin.year,\n                                    props.tournaments.selected.WhenBegin.month - 1,\n                                    props.tournaments.selected.WhenBegin.day).toLocaleDateString()}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Дата окончания\">\n                                <InfoRow>{new Date(\n                                    props.tournaments.selected.WhenEnd.year,\n                                    props.tournaments.selected.WhenEnd.month - 1,\n                                    props.tournaments.selected.WhenEnd.day).toLocaleDateString()}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Описание турнира\">\n                                <InfoRow>{props.tournaments.selected.Details}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Регламент турнира\">\n                                <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                    <List>\n                                        {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет групп</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"tables\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                    <List>\n                                        {props.tournaments.selected.TournamentGroups.map((item) => {\n                                            if (item.Name != \"\") {\n                                                let table = props.tournaments.selectedTables.filter(tT => tT.TournamentGroupId == item.Id);\n                                                table.sort((firstItem, secondItem) => firstItem.Place - secondItem.Place);\n\n                                                return (\n                                                    <>\n                                                        <InfoRow>Группа/лига: {item.Name}</InfoRow>\n                                                        <table>\n                                                            <tr>\n                                                                <th>М</th>\n                                                                <th>Команда</th>\n                                                                <th>И</th>\n                                                                <th>В</th>\n                                                                <th>П</th>\n                                                                <th>Н</th>\n                                                                <th>МЗ</th>\n                                                                <th>МП</th>\n                                                                <th>МР</th>\n                                                                <th>О</th>\n                                                            </tr>\n                                                            {\n                                                                table.map((row) => {\n                                                                    return (\n                                                                        <tr>\n                                                                            <td>{row.Place}</td>\n                                                                            <td>{row.TeamName}</td>\n                                                                            <td>{row.Games}</td>\n                                                                            <td>{row.Wins}</td>\n                                                                            <td>{row.Loses}</td>\n                                                                            <td>{row.Draws}</td>\n                                                                            <td>{row.GoalsScored}</td>\n                                                                            <td>{row.GoalsMissed}</td>\n                                                                            <td>{row.GoalsDifference}</td>\n                                                                            <td>{row.Points}</td>\n                                                                        </tr>\n                                                                    )\n\n                                                                }\n\n                                                                )}\n                                                        </table>\n                                                    </>\n\n                                                )\n                                            }\n                                            else\n                                                return null;\n                                        })\n                                        }\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет групп</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </Group>\n                    </Panel>\n\n                </View>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новый турнир</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название турнира\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                        </FormItem>\n                        <FormItem top=\"Дата начала\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenBegin}\n                                value={props.tournaments.selected.WhenBegin}\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Дата окончания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenEnd}\n                                value={props.tournaments.selected.WhenEnd}\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                        </FormItem>\n                        <FormItem top=\"Регламент турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                        </FormItem>\n                        <FormItem top=\"Длительность матча, минут\">\n                            <Input type=\"Number\"\n                                defaultValue={props.tournaments.selected.MatchLength}\n                                value={props.tournaments.selected.MatchLength}\n                                placeholder=\"60\"\n                                onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                            ></Input>\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        \n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новый турнир?\" Yes={SaveTournament}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Не создавать турнир?\" Yes={props.resetTournament} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Header>Управление турниром</Header>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                            </Tabs>\n                            <FormLayout>\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Название турнира\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                                </FormItem>\n                                <FormItem top=\"Дата начала\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenBegin}\n                                        value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={value => props.setTournamentWhenBegin(value)}\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Дата окончания\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenEnd}\n                                        value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Описание турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                                </FormItem>\n                                <FormItem top=\"Регламент турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                                </FormItem>\n                                <FormItem top=\"Длительность матча, минут\">\n                                    <Input type=\"Number\"\n                                        defaultValue={props.tournaments.selected.MatchLength}\n                                        value={props.tournaments.selected.MatchLength}\n                                        placeholder=\"60\"\n                                        onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                                    ></Input>\n                                </FormItem>\n                                {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                        <List>\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\n                                        </List>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Нет групп</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                <FormItem top=\"Новая группа/лига\">\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\n                                </FormItem>\n                                <FormItem top=\"Подверждение\">\n                                    <ButtonWithNotify Message=\"Внести изменения в турнир?\" Yes={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</ButtonWithNotify>\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\n                                </FormItem>\n                            </FormLayout>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"bids\">\n                        <Header>Заявки от команд</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) =>\n                                            <BidListItem\n                                                KeyId={item.KeyId}\n                                                Accept={AcceptBid}\n                                                Decline={DeclineBid}\n                                                Item={item}\n                                            >\n\n                                            </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"teams\">\n                        <Header>Команды по группам</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {props.tournaments.selected.TournamentGroups.map(tg => {\n\n                                    return (\n                                        <Group header={<Header>{tg.Name}</Header>}>\n                                            <List>\n                                                {\n                                                    tg.Teams.map(team => {\n\n                                                        return (\n                                                            <RichCell\n                                                                caption={team.Details}\n                                                                after={<Icon24ChevronRightWithHistory\n                                                                    handleClick={() => CellClick(team)}\n                                                                    toMenuName=\"teamitem\"\n                                                                    data-story=\"teamitem\"\n                                                                ></Icon24ChevronRightWithHistory>\n                                                                }\n                                                                actions={\n                                                                    <>\n                                                                        <Button onClick={() => SetPopup(team, tg)} mode=\"primary\">Переместить</Button>\n                                                                        <ButtonWithNotify  Message=\"Удалить команду из турнира?\" Yes={() => DeleteTeam(team, tg)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                                                    </>\n                                                                }\n                                                            >{team.Name}</RichCell>\n                                                        )\n                                                    })\n                                                }\n                                            </List>\n                                        </Group>)\n\n                                })}\n\n                                {/* {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) => \n                                        <BidListItem\n                                            KeyId={item.KeyId} \n                                            Accept={AcceptBid}\n                                            Decline={DeclineBid}\n                                            Item={item}\n                                            >\n\n                                        </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                } */}\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"shedule\">\n                        <Header>Расписание</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\n                                <Shedule access=\"admin\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n\n                </View>\n                // <Tabs>\n                //     <TabsItem>\n\n                //     </TabsItem>\n                // </Tabs>\n\n            )\n        }; break;\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        SelectedName: state.tournamentsEntity.selected.Name,\n        TournamentTables: state.tournamentsEntity.selectedTables,\n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {setTournamentMode, goToPanel,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, getTeamInfo, setTeamMode, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength,\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, getTournamentTablesByTournamentId,\n})(TournamentItem)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        debugger\n                        if (item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else if (!item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    //onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else\n                            return (\n                                <RichCell\n                                    onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    actions={<ButtonWithNotify mode=\"destructive\" Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button1Handle(item)}>Отменить заявку</ButtonWithNotify>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                    })\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List } from '@vkontakte/vkui'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\n\n\nconst BidTeamTournamentList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        \n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\n                            //debugger\n                            return <>{props.Bids.map(bid => {\n                                debugger\n                                // просмотреть и вывести заявки\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\n                                    debugger\n                                    return (\n                                        <RichCell\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                            onClick={() => props.CellClick(item)}\n                                            \n                                        >\n                                            {item.Name}\n                                        </RichCell>\n                                    )}\n                                }\n                            )}</>\n                            \n\n\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                    onClick={() => props.CellClick(item)}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                    })\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Button, FormItem, Input } from '@vkontakte/vkui'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidTeamTournamentGroupsList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    //debugger\n\n    return (\n        <Group header=\"Выберите группу/лигу\">\n            <Group mode=\"plain\">\n                <FormItem>\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\n                </FormItem>\n                <FormItem top=\"Название команды на этот турнир\">\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\n                </FormItem>\n                <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        //debugger\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\n                        {\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\n                            // props.Bids.map\n\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Заявляем команду в эту группу?\" Yes={() => props.Button1Handle(item)}>Заявиться сюда</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        \n                    })\n                    : <InfoRow>Нет групп в турнире</InfoRow>\n                }\n\n            </List>\n            </Group>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from '../Team/TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\n\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\nimport BidList from './BidList';\n\n\n\nconst BidTeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        // props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        // props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        // props.setSelectedTeam(item);\n        // props.setTeamMode(\"edit\");\n    }\n\n    const CancelBid = (item) => {\n        \n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\n        // props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        // props.resetTeam();\n        // props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\n                <BidList\n                    CellClick={CellClick}\n                    Button1Handle = {CancelBid}\n                    //Button2Handle = {DeleteTeam}\n                    List={props.tournamentsForBids.myBids}\n                >\n                    \n                </BidList>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    cancelBidTeamToTournamentGroup, \n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\n} from '../../../../store/tournamentsReducer'\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\nimport {\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { goToPanel } from '../../../../store/systemReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidTeamList from '../BidTeam/BidList';\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\n\nconst TeamItem = (props) => {\n    let currentDate = new Date();\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\n\n    const teamDate = new Date(\n        props.teams.selected.WhenBorn.year,\n        props.teams.selected.WhenBorn.month-1,\n        props.teams.selected.WhenBorn.day\n        );\n\n    useEffect(() =>{\n        debugger\n        if ((props.teams.selected != null) && (props.teams.selected.Id >= 0)){\n            props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\n            props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\n        }\n    }, props.teams.selected)\n        \n    \n    const MakeBid = (tournamentgroup) => {\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n\n    const CancelBid = (tournamentgroup) => {\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n    \n    const SelectTournament = (tournament) => {\n        props.getTournamentGroups(tournament)\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"groups\")\n    }\n    \n    const BackToTournaments = () => {\n        props.setBidTeamSelectedMode(\"tournaments\")\n    }\n    \n    const CancelTeamCreate = () => {\n        props.goToPanel(\"teamadmin\", false);\n    }\n\n\n    const SaveTeam = () => {\n        props.saveSelectedTeam(props.teams.selected, props.myProfile);\n        props.goToPanel(\"teamadmin\", false);\n        //props.setTeamMode(\"view\");\n    }\n\n    \n\n    switch (props.mode) {\n        case \"view\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Название команды\">\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата основания\">\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Описание команды\">\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Логотип\">\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\n                    </FormItem>\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                            <List>\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                            </List>\n                            :\n                            <FormItem>\n                                <InfoRow>Нет групп</InfoRow>\n                            </FormItem>\n                        }\n                    </Group> */}\n                </>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новая команда</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новую команду?\" Yes={SaveTeam}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Отменить создание команды?\" Yes={CancelTeamCreate} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <Group>\n                    <Header>Управление командой</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Заявки на турнир\">\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\n                        </FormItem>\n                        <FormItem top=\"Куда можно заявиться\">\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\n                                <BidTeamTournamentList\n                                    CellClick={SelectTournament}\n                                    // Button1Handle = {MakeBid}\n                                    // Button2Handle = {CancelBid}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    List={props.tournamentsForBids.tournaments}\n                                ></BidTeamTournamentList>\n                        :\n                                <BidTeamTournamentGroupsList\n                                    CellClick={BackToTournaments}\n                                    Button1Handle = {MakeBid}\n                                    Button2Handle = {CancelBid}\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    TeamName={teamNameOnTournament}\n                                    SetTeamName={SetTeamNameOnTournament}\n                                ></BidTeamTournamentGroupsList>\n                        }\n                        </FormItem>\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Сохранить изменения?\" Yes={SaveTeam}>Внести изменения</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        };break;\n        default:{\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        };break;\n        \n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        teams: state.teamsEntity,\n        bidTeams: state.bidTeamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n        SelectedName: state.teamsEntity.selected.Name,\n        bidSelectMode: state.bidTeamsEntity.selectMode, \n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, { setTeamMode, goToPanel,\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \n})(TeamItem)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Hot = (props) => {\n    \n    return (\n        <FormItem>\n            <Group header={props.Name}>\n                <List>\n                    {props.Matches && props.Matches.map(match => {\n                        let date = new Date(match.When);\n                        return (\n                                <RichCell\n                                    text={\n                                        match.Played ?\n                                            <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                            <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                    }\n                                    caption={match && match.Place ? match.Place.Name : \"место не указано\"}\n                                >\n                                    {match.Played ?\n                                        `${match.Team1Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2Name}` :\n                                        `${match.Team1Name} - ${match.Team2Name}`\n                                    }\n                                </RichCell>\n                        )\n                    }\n                    )}\n                </List>\n            </Group>\n        </FormItem>\n    )\n                \n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n})(Hot)","import React, { useState, useEffect } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea,\n    File, CellButton, Button, Header, List, Cell, Select, CustomSelectOption, IconButton,\n    CardGrid, Card, SplitLayout, SplitCol, Div, Radio, RangeSlider, useAdaptivity, VKCOM\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from './../../../../../store/dataTypes/common'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n    dateToString, dateTimeToTimeString, datesWithoutTimeIsSame, timeSlotsForSimpleCollects, timeToString,\n    dateSelectorValueToJSDateValue, jSDateValueToDateSelectorValue, timeSlotsForCollects, addToTime\n} from './../../../../../utils/convertors/dateUtils';\nimport {\n    DeleteMemberFromCollect, AddSimpleCollect, setCollectItemMode, EditSimpleCollect,\n    registerMemberToSimpleCollect, DelSimpleCollect, setSelectedMembers\n} from './../../../../../store/collectReducer';\nimport { setSelectedRent } from './../../../../../store/rentReducer';\nimport { setSelectedSimplePlace } from './../../../../../store/simplePlaceReducer';\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport { myProfile } from '../../../../../store/constants/commonConstants';\nimport ButtonWithNotify from '../../../Common/WithNotify/ButtonWithNotify';\n\n\n// включить защиту от создания сбора на прошедшее время! \n\n\nconst SimpleCollectItem = (props) => {\n    let currentDate = new Date();\n    let maxCollectDate = new Date();\n    let workoutSelector = \"\";\n    let totalCost = 0;\n    let ranges = \"\";\n\n    let minutesOneSlot = 30; // количество минут в таймслоте\n    let minTimeSlotToRent = 2; // минимальный таймслот для аренды (в таймслотах, а не в минутах меряем)\n\n    let adapt = useAdaptivity();\n    let workoutColNumber = adapt.viewWidth+1; // количество столбцов. должно отличаться на разных разрешениях экрана\n    //adapt.viewWidth\n\n    let [acceptBeMember, setAcceptBeMember] = useState(false)\n    let [showPanelBeMember, setShowPanelBeMember] = useState(false)\n    let [showCancelMemberForm, setShowCancelMemberForm] = useState(false)\n    let [cancelReason, setCancelReason] = useState(\"\")\n    let [details, setDetails] = useState(\"\")\n    let [collectType, setCollectType] = useState(3)\n    let [needMembers, setNeedMembers] = useState(10)\n    let [selectedDate, setSelectedDate] = useState(jSDateValueToDateSelectorValue(currentDate))\n    let [costMembers, setCostMembers] = useState(200)\n    let [costAll, setCostAll] = useState(2000)\n    let [plus, setPlus] = useState(costAll - (costMembers * needMembers))\n    let [selectedSlots, setSelectedSlots] = useState(new Array()) //  тут отдельные выбранные ячейки\n    let selectedTimeRanges = new Array() // тут сгруппированные выбранные ячейки отдельными диапазонами\n\n\n    useEffect(() => {\n        if (props.collect.selected && props.collect.selected.Members && props.collect.selected.Members != undefined && props.collect.selected.Members.length > 0) {\n\n            let vkids = \"\";\n            let memberPhotos = props.collect.selected.Members.map(m => {\n                vkids += m.UserProfile.UserVkId.slice(2) + \",\"\n                return { id: m.UserProfile.UserVkId.slice(2), photo: \"\" }\n            });\n\n            //\n            const params = bridge.send(\"VKWebAppGetAuthToken\", { \"app_id\": 7161115, \"scope\": \"\" }).then(res => {\n                bridge.send(\"VKWebAppCallAPIMethod\",\n                    {\n                        \"method\": \"users.get\",\n                        \"request_id\": \"userphotorequest\",\n                        \"params\": {\n                            \"user_ids\": vkids,\n                            \"fields\": \"photo_100\",\n                            \"v\": \"5.131\",\n                            \"access_token\": res.access_token\n                        }\n                    })\n                    .then(us => {\n\n\n\n                        let members = props.collect.selected.Members.map(m => {\n                            let photo = us.response.filter(p => ((\"id\" + p.id) == m.UserProfile.UserVkId));\n                            if (photo && photo[0] != undefined) {\n                                m.UserProfile.PhotoPath = photo[0].photo_100;\n                            }\n                            return m;\n\n                        })\n\n                        props.setSelectedMembers(members);\n                        //m.UserProfile.PhotoPath = us.photo_100;\n                        //props.setSelectedUser(us);\n                    })\n\n                    // bridge.send(\"VKWebAppOpenPayForm\", {\n                    //     \"app_id\": 7161115, \n                    //     \"action\": \"pay-to-service\", \n                    //     \"params\": {\n                    //         \"amount\": 1.5,\n                    //         \"data\": {\n                    //                 \"currency\": \"RUB\",\n                    //                 \"merchant_data\": \"eyJvcmRlcl9pZCI6IjI1NTMxIiwidHMiOiIxNTM5MzI5NzcwIiwiYW1vdW50IjoxLjUsImN1cnJlbmN5IjoiUlVCIn0=\",\n                    //                 \"merchant_sign\": \"63d5dce9d2c9d29198ba12ba3f8e270e6606a221\",\n                    //                 \"order_id\": \"25531\",\n                    //                 \"ts\": \"1539329770\"\n                    //                 },\n                    //         \"description\": \"Test Payment\",\n                    //         \"action\": \"pay-to-service\",\n                    //         \"merchant_id\": 617001,\n                    //                 \"version\": 2,\n                    //         \"sign\": res.access_token\n                    //     }\n                    // });\n            })\n\n            \n        }\n\n    }, props.collect.selected.Id)\n\n    //debugger\n    let youAreMember = (props.collect.selected.Members && props.collect.selected.Members.length > 0)\n        ?\n        (props.collect.selected.Members.filter(m => m.UserProfileId == props.myProfile.UserProfileId).length > 0 ? true : false)\n        :\n        false;\n    let youAreOrganizer = (props.collect.selected && props.collect.selected != undefined && props.myProfile && props.myProfile != undefined) ?\n        props.collect.selected.CreatorId == props.myProfile.UserProfileId :\n        false;\n\n    //let [youAreMember, setYouAreMember] = useState(yam);\n\n    let simplePlaces = props.simplePlace.places;\n\n    let changePlace = (e) => {\n        props.setSelectedSimplePlace(+e.currentTarget.value);\n        props.setSelectedRent(+e.currentTarget.value, dateSelectorValueToJSDateValue(selectedDate));\n        setSelectedSlots([])\n    }\n\n    let changeDate = (value) => {\n        setSelectedDate(value);\n        setSelectedSlots([])\n\n    }\n\n    let changeCollectType = (type) => {\n        setCollectType(type)\n    }\n\n    let selectSlot = (value) => {\n        // взять минимальное количество слотов и сделать проверку на послеющие ячейки\n        // и это же самое нужно сделать на сервере! чтобы исключить двойную аренду\n        // проверить следующий слот (не конец смены, следующий не арендован, не перерыв)\n        let tmpSelectedSlot = [];\n\n        // выявили выбранное время\n        let res = selectedSlots.filter(ss => (ss.Hours == value.Hours && ss.Minutes == value.Minutes));\n        if (res.length != 0)\n            tmpSelectedSlot = selectedSlots.filter(ss => (ss.Hours != value.Hours || ss.Minutes != value.Minutes));\n        else\n            tmpSelectedSlot = [...selectedSlots, value];\n\n        // сортировка\n        tmpSelectedSlot.sort((a, b) => {\n            let i1 = a.Hours * (60 / minutesOneSlot * minutesOneSlot) + a.Minutes;\n            let i2 = b.Hours * (60 / minutesOneSlot * minutesOneSlot) + b.Minutes;\n\n            return (i1 - i2)\n        })\n\n\n\n        setSelectedSlots(tmpSelectedSlot);\n    }\n\n    let gotoCollect = (value) => {\n\n\n    }\n\n    let gotoProfile = (profileId) => {\n        window.open(\"https://vk.com/\" + profileId, '_blank');\n    }\n\n\n    const CancelMember = () => {\n        let member = {\n            UserProfileId: props.myProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const deleteMember = (memberUserProfile) => {\n        \n        let member = {\n            UserProfileId: memberUserProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"Удален организатором\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const AcceptRights = () => {\n        setAcceptBeMember(!acceptBeMember);\n    }\n\n    const calculateCostAll = (costall) => {\n        setCostAll(costall);\n        let costMem = Math.round(costall / needMembers);\n        setCostMembers(costMem);\n\n        setPlus((costMem * needMembers) - costall);\n    }\n\n    const calculateNeedMembers = (need) => {\n\n        \n            setNeedMembers(need);\n            setCostMembers(Math.round(costAll / need));\n            setPlus((Math.round(costAll / need) * need) - costAll);\n        \n    }\n\n    const calculateCostMembers = (membercost) => {\n        setCostMembers(membercost);\n        setPlus((membercost * needMembers) - costAll);\n    }\n\n    const registerToCollect = () => {\n\n        props.registerMemberToSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const createCollect = () => {\n\n        let collect = {\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: new Date(\n                selectedDate.year,\n                selectedDate.month - 1,\n                selectedDate.day,\n                selectedTimeRanges[0].Hours + 3, // прибавил 3 часа (разница от UTC)\n                selectedTimeRanges[0].Minutes),\n            DurationMinutes: selectedTimeRanges[0].SlotMinutes,\n            Details: details,\n            FullPrice: costAll,\n            Comment: \"\",\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.selectedPlace.Id,\n            CreatorId: props.myProfile.UserProfileId,\n        }\n        props.AddSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const saveChanges = () => {\n\n        let collect = {\n            Id: props.collect.selected.Id,\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: props.collect.selected.When,\n            DurationMinutes: props.collect.selected.DurationMinutes,\n            Details: details,\n            FullPrice: props.collect.selected.FullPrice,\n            Comment: props.collect.selected.Comment,\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.collect.selected.SimplePlaceId,\n            CreatorId: props.collect.selected.CreatorId,\n        }\n        props.EditSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const cancelCollect = () => {\n        props.DelSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const changeCollect = () => {\n\n        setDetails(props.collect.selected.Details);\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"edit\");\n    }\n\n    const cancelSave = () => {\n\n        setDetails(props.collect.selected.Details ? props.collect.selected.Details : \"\");\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"view\");\n    }\n\n    // строим контрол выбора времени\n    // если место и время выборано\n    if ((props.selectedPlace) && (props.selectedPlace.Worktime != null) && (props.selectedPlace.Worktime != undefined)) {\n        //debugger\n        // собираем все слоты из расписания, которые совпадают с выбранной датой\n        let worktimeSlots = props.selectedPlace.Worktime.filter(wt => {\n            //selectedDate, wt, rents\n            let selectedDT = new Date(dateSelectorValueToJSDateValue(selectedDate)) // selected in box\n            let from = new Date(wt.FromTime) // current item date and start time\n            let to = new Date(wt.ToTime) // current item date and end time\n            if (datesWithoutTimeIsSame(from, selectedDT))\n                return true;\n            else\n                return false;\n        }).sort((a, b) => new Date(a.FromTime).valueOf() - new Date(b.FromTime).valueOf())\n\n        // если выборка дала данные (слоты)\n        if (worktimeSlots && worktimeSlots != undefined && worktimeSlots.length > 0 && worktimeSlots[0] != undefined) {\n            // если верменной слот найден, производим с ним модификации по формированию и покраске кнопок, а также назначения им действий\n\n            let fromTmp = new Date(worktimeSlots[0].FromTime); // берем время ОТ первого слота\n            let toTmp = new Date(worktimeSlots[worktimeSlots.length - 1].ToTime);  // берем время ДО последнего слота\n            let slotsNumber = (toTmp.valueOf() - fromTmp.valueOf()) / (minutesOneSlot * 60 * 1000); // общее количество слотов\n            let numberOfCols = slotsNumber < workoutColNumber ? slotsNumber : workoutColNumber; // количество колонок\n            let numberOfRows = Math.trunc(slotsNumber / numberOfCols) == slotsNumber / numberOfCols ? slotsNumber / numberOfCols : Math.trunc(slotsNumber / numberOfCols) + 1; // количество строк\n\n            let slots = timeSlotsForSimpleCollects(slotsNumber, 60 / minutesOneSlot, fromTmp.getHours()); // получили общее время работы с разбивкой по диапазонам (обычно по 30 минут на каждую ячейку)\n\n            // бежим по массиву слотов расписаний\n            slots = slots.map((slot, slotCurrentIndex) => {\n\n                \n                worktimeSlots.forEach(worktimeSlot => {\n                    \n                    let curentWorktimeSlotFromTime = new Date(worktimeSlot.FromTime);\n                    let curentWorktimeSlotToTime = new Date(worktimeSlot.ToTime);\n                    let currentSlotTime = new Date(\n                        curentWorktimeSlotFromTime.getFullYear(), \n                        curentWorktimeSlotFromTime.getMonth(), \n                        curentWorktimeSlotFromTime.getDate(), \n                        slot.Hours, slot.Minutes);\n\n\n                    if ((worktimeSlot != null) \n                        && (worktimeSlot != undefined) \n                        && (curentWorktimeSlotFromTime <= currentSlotTime && curentWorktimeSlotToTime > currentSlotTime)\n                        ) {\n                        // расставляем перерывы. \n                        // пробегаем по массиву перерывов, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как недоступный\n                        if (worktimeSlot.Breaks && worktimeSlot.Breaks.length > 0) {\n                            worktimeSlot.Breaks.forEach(brek => {\n\n                                let from = new Date(brek.FromTime);\n                                let to = new Date(brek.ToTime);\n\n                                let brekTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= brekTime && (to > brekTime)) {\n                                    slot.Enabled = false;\n                                }\n                            });\n                        }\n\n                        // расставляем аренды\n                        // пробегаем по массиву арендованного времени, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как занятый\n                        props.rent.selectedDayRents.forEach(rnt => {\n\n                            let from = new Date(rnt.From);\n                            let to = addToTime(from, 0, rnt.DurationMinutes);\n\n                            let rentTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n                            \n\n                            if (from <= rentTime && (to > rentTime)) {\n\n                                if (rnt.Published)\n                                    slot.Rented = true;\n                            }\n                        });\n\n                        // расставляем выбранные слоты\n                        if (selectedSlots && Array.isArray(selectedSlots) && selectedSlots.length > 0) {\n\n                            selectedSlots.forEach(slt => {\n\n                                let from = new Date(`01/01/2000 ${slt.Hours}:${slt.Minutes}`);\n                                let to = addToTime(from, 0, minutesOneSlot);\n\n                                let selectedTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= selectedTime && (to > selectedTime)) {\n\n                                    slt.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.Selected = true;\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n                    }\n                });\n\n                return slot;\n            }\n            )\n\n\n            // маркируем доступное и недоступное время и создаем результирующий массив кнопок\n            let iButtons = slots.map(x => {\n                if (x.Enabled) {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button onClick={() => gotoCollect(x)} mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        if (x.Selected) {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"primary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                        else {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"commerce\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                    }\n\n                }\n                else {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        return <Div>\n                            <Button mode=\"secondary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                }\n            })\n\n            //selectedTimeRanges = new Array()\n            // вычисляем выбранные временные промежутки и выводим их в список\n            for (let i = 0; i < selectedSlots.length; i++) {\n                if (selectedSlots[i - 1] != null && selectedSlots[i - 1] != undefined) {\n\n                    let i1 = selectedSlots[i].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i].Minutes;\n                    let i2 = selectedSlots[i - 1].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i - 1].Minutes;\n\n                    if ((i1 - i2) <= minutesOneSlot) {\n                        selectedTimeRanges[selectedTimeRanges.length - 1].SlotMinutes += selectedSlots[i].SlotMinutes;\n                        selectedTimeRanges[selectedTimeRanges.length - 1].PricePerSlot += selectedSlots[i].PricePerSlot;\n                    }\n                    else {\n                        selectedTimeRanges.push(\n                            {\n                                Hours: selectedSlots[i].Hours,\n                                Minutes: selectedSlots[i].Minutes,\n                                SlotMinutes: selectedSlots[i].SlotMinutes,\n                                Enabled: selectedSlots[i].Enabled,\n                                Selected: selectedSlots[i].Selected,\n                                Rented: selectedSlots[i].Rented,\n                                PricePerSlot: selectedSlots[i].PricePerSlot,\n                            }\n                        )\n                    }\n                }\n                else {\n\n                    selectedTimeRanges.push(\n                        {\n                            Hours: selectedSlots[i].Hours,\n                            Minutes: selectedSlots[i].Minutes,\n                            SlotMinutes: selectedSlots[i].SlotMinutes,\n                            Enabled: selectedSlots[i].Enabled,\n                            Selected: selectedSlots[i].Selected,\n                            Rented: selectedSlots[i].Rented,\n                            PricePerSlot: selectedSlots[i].PricePerSlot,\n                        }\n                    )\n                }\n\n            }\n\n\n            // если изменилась цена, перезапишем ее в состоянии\n            totalCost = selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0);\n            if (totalCost != costAll)\n                calculateCostAll(selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0))\n\n            let splitCols = []\n\n            // разбиваем кнопки по колонкам для наиболее удобного отображения \n            for (let i = 0; i < numberOfCols; i++)//4\n            {\n                let sCol = []\n                for (let j = 0; j < numberOfRows; j++)//5\n                {\n                    sCol.push(iButtons[i * numberOfRows + j])\n                }\n                splitCols.push(<SplitCol width=\"25%\">{sCol}</SplitCol>)\n            }\n\n            ranges = (selectedTimeRanges && selectedTimeRanges.length > 0) ? selectedTimeRanges.map(tr => {\n                let until = addToTime(new Date(`01/01/2000 ${tr.Hours}:${tr.Minutes}`), 0, tr.SlotMinutes);\n                return <InfoRow>с {timeToString(tr.Hours, tr.Minutes)} до {timeToString(until.getHours(), until.getMinutes())}  ({tr.PricePerSlot} руб.) </InfoRow>\n\n\n            }) :\n                \"Время не выбрано\"\n\n\n            // записываем полученную иерархию контролов в единый селектор\n            workoutSelector =\n                <SplitLayout>\n                    {splitCols}\n                </SplitLayout>\n\n        }\n\n\n    }\n    else\n        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n\n\n\n\n\n\n    switch (props.collect.mode) {\n        case \"view\": {\n            if (props.collect.selected.Deleted != undefined && props.collect.selected.Deleted == true) {\n                return (\n                    <>\n                        <FormItem>\n                            <InfoRow><strong>Этот сбор был отменен</strong></InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Дата и время\">\n                            <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Место\">\n                            <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                        </FormItem>\n                        <FormItem top=\"Информация\" disabled>\n                            <InfoRow>{props.collect.selected.Details}</InfoRow>\n                        </FormItem>\n                    </>\n                )\n            }\n            else {\n                return (\n                    <>\n                        {props.collect.selected && props.collect.selected != undefined ?\n                            <>\n\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Дата и время\">\n                                    <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                        {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Место\">\n                                    <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                        {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                                </FormItem>\n                                <FormItem top=\"Информация\">\n                                    <InfoRow>{props.collect.selected.Details}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Сколько человек нужно\">\n                                    <InfoRow>{props.collect.selected.NeedMembers}\n                                        {(props.collect.selected.Members && props.collect.selected.Members.length > 0) &&\n                                            ` (нужно еще ${props.collect.selected.NeedMembers - props.collect.selected.Members.length} чел.)`\n                                        }\n                                    </InfoRow>\n\n                                </FormItem>\n                                <FormItem top=\"Стоимость на 1 человека\">\n                                    <InfoRow>{props.collect.selected.Cost}</InfoRow>\n                                </FormItem>\n                                <Group header={<Header mode=\"secondary\">Участники</Header>}>\n                                    {(props.collect.selected.Members && props.collect.selected.Members.length > 0) ?\n                                        <FormItem>\n                                            <List>\n                                                {props.collect.selected.Members.map((item) => {\n\n                                                    return <RichCell\n                                                    text={`${item.UserProfile.Name} ${item.UserProfile.Surname} ${item.UserProfileId == props.collect.selected.Creator.UserProfileId ? \" (Организатор)\" : \"\"}`}\n                                                        before={item.UserProfile.PhotoPath && item.UserProfile.PhotoPath != undefined ?\n                                                            <Avatar size={72} src={item.UserProfile.PhotoPath} />\n                                                            :\n                                                            null\n                                                        }\n                                                        actions={\n                                                        props.myProfile.UserProfileId == props.collect.selected.Creator.UserProfileId ? \n                                                            <Group>\n                                                                {item.UserProfile.UserProfileId != props.collect.selected.Creator.UserProfileId && \n                                                                    <ButtonWithNotify mode=\"destructive\" Message={`Уверены, что хотите исключить ${item.UserProfile.Name} ${item.UserProfile.Surname}?`} Yes={() => deleteMember(item.UserProfile)}>Исключить</ButtonWithNotify>}\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </Group>\n                                                            :\n                                                            <>\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </>\n\n                                                    }\n                                                    >\n                                                    </RichCell>\n                                                }\n\n                                                )\n\n                                                }\n                                            </List>\n                                        </FormItem>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Пока нет участников. Стань первым.</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                {\n                                    (!youAreMember) ?\n                                        (\n                                            (new Date(props.collect.selected.When) > new Date()) ?\n                                                (\n                                                    (props.collect.selected.Members.length < props.collect.selected.NeedMembers) ?\n                                                    ((!showPanelBeMember) ?\n                                                        <FormItem top=\"Участие\">\n                                                            <CellButton onClick={() => setShowPanelBeMember(!showPanelBeMember)}>Стать участником</CellButton>\n                                                        </FormItem>\n                                                        :\n                                                        <FormItem top=\"Стать участником\">\n                                                            {(acceptBeMember) &&\n                                                                <CellButton onClick={registerToCollect}>Зарегистрироваться на сбор</CellButton>\n                                                            }\n                                                            <Checkbox checked={acceptBeMember} onChange={AcceptRights}>\n                                                                {`Подтверждаю, что готов прибыть на сбор в ${props.collect.selected.Place.Name} в \n                                    ${dateToString(props.collect.selected.When)} к ${dateTimeToTimeString(props.collect.selected.When)}\n                                    и оплатить взнос в размере ${props.collect.selected.Cost} рублей`}\n                                                            </Checkbox>\n                                                        </FormItem>)\n                                                        :\n                                                        <FormItem top=\"Участие\">\n                                                            <InfoRow>Регистрация закончена. Народ набран.</InfoRow>\n                                                        </FormItem>\n                                                )\n                                                :\n                                                <FormItem top=\"Участие\">\n                                                    <InfoRow>Регистрация закончена</InfoRow>\n                                                </FormItem>\n                                        )\n                                        :\n                                        <FormItem top=\"Участие\">\n                                            {(new Date(props.collect.selected.When) > new Date()) ?\n                                                <>\n                                                    <InfoRow>{(!youAreOrganizer) ? `Вы подтвердили участие в сборе` : `Вы организатор сбора`}</InfoRow>\n                                                    {(!showCancelMemberForm) ?\n                                                        ((!youAreOrganizer) ?\n                                                            <RichCell actions={<ButtonWithNotify mode=\"destructive\" Message=\"Отказаться от участия?\" Yes={() => setShowCancelMemberForm(true)}>Отказаться от участия</ButtonWithNotify>}></RichCell> :\n                                                            <RichCell actions={\n                                                                <>\n                                                                    <Button mode=\"primary\"\n                                                                        onClick={changeCollect}\n                                                                    >Изменить сбор</Button>\n                                                                    <ButtonWithNotify mode=\"destructive\"\n                                                                        Message=\"Желаете отменить сбор?\"\n                                                                        Yes={cancelCollect}\n                                                                    >Отменить сбор</ButtonWithNotify>\n                                                                </>\n                                                            }></RichCell>\n\n                                                        )\n                                                        :\n                                                        <Group>\n                                                            <FormItem>\n                                                                <b>Вы хотите отказаться от участия? Укажите причину отказа</b>\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Input type=\"text\" value={cancelReason} onChange={(e) => setCancelReason(e.currentTarget.value)} defaultValue=\"\" />\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Button onClick={() => setShowCancelMemberForm(false)}>Не отказываться</Button>\n                                                                {cancelReason.length > 4 && <Button onClick={CancelMember} mode=\"destructive\">Отказаться</Button>}\n                                                            </FormItem>\n                                                        </Group>\n                                                    }\n                                                </>\n                                                :\n                                                <InfoRow>Вы участвовали в сборе</InfoRow>\n                                            }\n                                        </FormItem>\n                                }\n\n                            </>\n                            :\n                            <></>\n                        }\n                    </>\n                )\n            }\n        }; break;\n        case \"add\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <Select\n                            placeholder=\"Не выбрано\"\n                            value={(props.selectedPlace && props.selectedPlace.Id) ? props.selectedPlace.Id : null}\n                            onChange={e => changePlace(e)}\n                            options={simplePlaces.map(place => ({\n                                label: place.Name, value: place.Id\n                                // , avatar: user.photo_100 \n                            }))}\n                            renderOption={({ option, ...restProps }) => (\n                                <CustomSelectOption {...restProps}\n                                //   before={<Avatar size={24} src={option.avatar} />} \n                                />\n                            )}\n                        />\n                        {/* <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell> */}\n                    </FormItem>\n                    <FormItem top=\"Дата\">\n                        <DatePicker\n                            min={jSDateValueToDateSelectorValue(currentDate)}\n                            max={{ day: currentDate.getDate(), month: currentDate.getMonth() + 2, year: currentDate.getFullYear() }}\n                            defaultValue={selectedDate}\n                            onDateChange={(value) => { changeDate(value) }}\n                        />\n                        {/* <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow> */}\n                    </FormItem>\n                    <FormItem>\n                        {workoutSelector}\n\n                    </FormItem>\n                    <FormItem top=\"Выранное время\">\n                        {ranges}\n                    </FormItem>\n                    {selectedTimeRanges && selectedTimeRanges.length > 0 ?\n                        <Group>\n\n\n                            <FormItem>\n                                <InfoRow>\n                                    <br />\n                                    Вы можете сначала собрать людей и после оплатить. <br />\n                                    Либо вы можете сначала оплатить, а потом собирать людей. <br />\n                                    Аренда площадки гарантируется только после её оплаты.\n                                </InfoRow>\n                            </FormItem>\n\n                            <FormItem>\n                                <Group>\n                                    {\n                                        (selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                            <InfoRow style={{ \"color\": \"red\" }}>Вы отметили {selectedTimeRanges.length} диапазона(ов) времени: <br />\n                                                {ranges}\n                                                В таком режиме вы можете только арендовать всё выбранное время.\n                                                Чтобы создать сбор, необходимо выбрать только один диапазон подряд идущего времени, например,\n                                                18:00, 18:30 и 19:00 (с 18:00 до 19:30 - 1.5 часа)</InfoRow>\n                                            : <></>\n                                    }\n                                    {(selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Оплатить потом создать</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Создать потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n                                        :\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description=\"После оплаты аренда закреплена за вами\">Оплатить потом создать сбор</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description=\"Закрепление аренды будет только после оплаты\">Создать сбор потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n\n                                    }\n\n                                </Group>\n                            </FormItem>\n                            {collectType != 3 &&\n                                <>\n                                    <FormItem top=\"Информация по сбору\">\n                                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)}\n                                            placeholder=\"Укажите здесь важную информацию для участников сбора\" />\n                                    </FormItem>\n                                    <FormItem top=\"Сколько человек нужно\">\n                                        <Input type=\"Number\"\n                                            defaultValue={needMembers}\n                                            value={needMembers}\n                                            placeholder=\"10\"\n                                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                                        ></Input>\n\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                                        <InfoRow>{costAll}</InfoRow>\n                                        {/* <Input type=\"Number\"\n                                    defaultValue={costAll}\n                                    value={costAll}\n                                    placeholder=\"2000\"\n                                    onChange={e => calculateCostAll(e.currentTarget.value)}\n                                ></Input> */}\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                                        <Input type=\"Number\"\n                                            defaultValue={costMembers}\n                                            value={costMembers}\n                                            placeholder=\"200\"\n                                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                                        ></Input>\n                                    </FormItem>\n                                    <FormItem top=\"Остаток после оплаты\">\n                                        <InfoRow>{plus} руб</InfoRow>\n                                    </FormItem>\n                                </>\n                            }\n                            <FormItem top=\"Публикация\">\n                                {selectedTimeRanges && selectedTimeRanges.length > 0 ? (\n                                    collectType == 1 ? <RichCell\n                                        caption=\"Оплатить и создать сбор\"\n                                        actions={<Button>Оплатить и создать сбор</Button>}\n                                    >\n                                    </RichCell> :\n                                        (collectType == 2 ?\n                                            <RichCell\n                                                caption=\"Создать сбор и оплатить\"\n                                                actions={<Button onClick={createCollect}>Создать сбор</Button>}\n                                            >\n                                            </RichCell> :\n                                            <RichCell\n                                                caption=\"Оплатить выбранное время без создания сбора\"\n                                                actions={<Button>Оплатить</Button>}\n                                            >\n                                            </RichCell>)\n                                ) :\n                                    <RichCell\n                                        caption=\"Выберите место, дату и время занятий\">\n                                    </RichCell>}\n                            </FormItem>\n                        </Group>\n                        :\n                        <></>\n                    }\n                </>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата и время\">\n                        <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell>\n                    </FormItem>\n\n\n                    <FormItem top=\"Информация по сбору\">\n                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)} placeholder=\"Сделать чтобы можно было покупать аренду без сбора. сбор опционально делается\" />\n                    </FormItem>\n                    <FormItem top=\"Сколько человек нужно\"\n                    bottom={\n                        props.collect.mode == \"edit\" \n                    && props.collect.selected.Members \n                    && props.collect.selected.Members != undefined \n                    && props.collect.selected.Members.length > 0 \n                    && (needMembers < props.collect.selected.Members.length) ?\n                    <CellButton mode=\"danger\">Нельзя указывать меньше, чем зарегистрированных участников</CellButton>\n                    : \"\"\n                    }\n                    >\n                        <Input type=\"Number\"\n                            defaultValue={needMembers}\n                            value={needMembers}\n                            placeholder=\"10\"\n                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                        ></Input>\n\n                    </FormItem>\n                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                        <InfoRow>{costAll}</InfoRow>\n                        {/* <Input type=\"Number\"\n                                defaultValue={costAll}\n                                value={costAll}\n                                placeholder=\"2000\"\n                                onChange={e => calculateCostAll(e.currentTarget.value)}\n                            ></Input> */}\n                    </FormItem>\n                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                        <Input type=\"Number\"\n                            defaultValue={costMembers}\n                            value={costMembers}\n                            placeholder=\"200\"\n                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                        ></Input>\n                    </FormItem>\n                    <FormItem top=\"Остаток после оплаты\">\n                        <InfoRow>{plus} руб</InfoRow>\n                    </FormItem>\n\n                    <FormItem top=\"Сохранение\">\n                        <RichCell\n                            actions={\n                                <Group>\n                                    <Button\n                                        onClick={cancelSave}\n                                    >Отменить изменения</Button>\n                                    {\n                                        props.collect.mode == \"edit\" \n                                        && props.collect.selected.Members \n                                        && props.collect.selected.Members != undefined \n                                        && props.collect.selected.Members.length > 0 \n                                        && (needMembers >= props.collect.selected.Members.length) ?\n                                        <Button\n                                        Message = \"Сохранить внесенные изменения?\"\n                                        Yes={saveChanges}\n                                    >Сохранить изменения</Button>\n                                        :\n                                        <Button disabled>Исправьте ошибки...</Button>\n                                }\n                                </Group>\n                            }\n                        >\n                        </RichCell>\n                    </FormItem>\n\n\n                </>\n            )\n        }; break;\n        default: {\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        }; break;\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        collect: state.collectEntity,\n        simplePlace: state.simplePlaceEntity,\n        selectedPlace: state.simplePlaceEntity.selectedPlace,\n        selectedRent: state.rentEntity.selectedRent,\n        rent: state.rentEntity,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    DeleteMemberFromCollect, setSelectedSimplePlace, setSelectedRent, AddSimpleCollect, registerMemberToSimpleCollect,\n    DelSimpleCollect, setCollectItemMode, EditSimpleCollect, setSelectedMembers,\n})(SimpleCollectItem)","import React, { Component } from 'react'\nimport { CellButton } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CellButtonWithHistory = (props) => {\n  //debugger\n \n    return (\n        <CellButton isBack={false} {...props}></CellButton>\n        \n    )\n}\n\nexport default withHistorySave(CellButtonWithHistory)","import React, { Component } from 'react'\nimport {Card, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CardWithHistory = (props) => {\n  \n \n    return (\n        <Card isBack={false} {...props}></Card>\n        \n    )\n}\n\nexport default withHistorySave(CardWithHistory)","export default __webpack_public_path__ + \"static/media/player300-s.5ad7daca.png\";","export default __webpack_public_path__ + \"static/media/stadium300-s.e5a62e23.png\";","export default __webpack_public_path__ + \"static/media/tournament300.00b15e45.png\";","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot, ConfigProvider, Badge, Header, List, RichCell, CellButton, FormItem, CardGrid, Card } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport { setActiveMenuItem } from './store/mainMenuReducer';\nimport { getAllSimplePlacesInCityByCityId, } from './store/simplePlaceReducer';\nimport { getAllRentsInCityByCityId } from './store/rentReducer';\nimport { setVkProfileInfo, getUserProfile, getAuthInfo, setTriedToGetProfile, setUserProfileCity } from './store/profileReducer';\nimport { setGlobalPopout, resetError } from './store/systemReducer';\nimport { getAllSimpleCollectsInCityByCityUmbracoId, selectSimpleCollect, setCollectItemMode } from './store/collectReducer';\nimport { getAllCityTournamentAdminsByCityId, getTournamentsByCityId, setSelectedTournament, setTournamentMode } from './store/tournamentsReducer';\nimport { getMatchesInCurrentCity, setHotPanel } from './store/matchReducer';\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity } from './store/bidTeamsReducer';\nimport { getAllCitiesFromServer } from './store/cityReducer';\nimport { setShowAdminTourneyTab, setCurrentModalWindow, setLoading } from './store/systemReducer';\nimport { getUser, setSelectedUser } from './store/vkReducer';\nimport { addToTime } from './utils/convertors/dateUtils'\n\n\nimport { Epic, Tabbar, TabbarItem, Panel, PanelHeader, PanelHeaderButton, PanelHeaderBack, Tabs, TabsItem, Div, Avatar, Group, SimpleCell, InfoRow } from '@vkontakte/vkui';\nimport { connect } from 'react-redux';\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\nimport { memberingCollectTypes } from './store/constants/commonConstants'\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\nimport BidTeamTournamentGroupsList from './components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList';\nimport Hot from './components/Panels/Common/Hot/Hot';\nimport SimpleCollectItem from './components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem';\nimport ButtonWithHistory from './components/Panels/Common/WithHistory/ButtonWithHistory';\nimport AnyWithHistory from './components/Panels/Common/WithHistory/CellButtonWithHistory';\nimport CellButtonWithHistory from './components/Panels/Common/WithHistory/CellButtonWithHistory';\nimport RichCellWithHistory from './components/Panels/Common/WithHistory/RichCellWithHistory';\nimport CardWithHistory from './components/Panels/Common/WithHistory/CardWithHistory';\nimport player from './img/common/player300-s.png'\nimport stadium from './img/common/stadium300-s.png'\nimport tournament from './img/common/tournament300.png'\nimport ButtonWithNotify from './components/Panels/Common/WithNotify/ButtonWithNotify';\n\n\n\n\n\nconst App = (props) => {\n\tconst [fetchedUser, setUser] = useState(null);\n\t//const [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t//const [modalWindow, setModalWindow] = useState(null);\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\n\tconst [timerStarts, setTimerStarts] = useState(false);\n\tconst cardStyle = {\n\t\tposition: 'absolute', \n\t\tbottom: '0px', \n\t\tleft:'0px',  \n\t\twidth: '100%', \n\t\theight: '20%',\n\t\tbackground: 'white', \n\t\tpadding: '15px 0',\n\t\ttextAlign: 'center',\n\t\topacity: '0.9',\n\t\tborderRadius: '10px'\n\t}\n\n\t\n\n\tconst checkMovings = () => {\n\t\t//alert('Привет');\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\t\t\t{\n\t\t\t\t// получаем список простых мест по umbId города\n\t\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых сборов\n\t\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\t\n\t\t\t\t// получаем список аренд\n\t\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tconst CloseModal = () => {\n\t\tprops.resetError()\n\t\tprops.setCurrentModalWindow(null)\n\t}\n\n\t// загрузка информации о пользователе ВК\n\tasync function fetchData() {\n\n\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\tsetUser(user);\n\t\tprops.setVkProfileInfo(user);\n\t\tprops.getAllCitiesFromServer();\n\t}\n\n\t// это системное, загрузка приложения вк\n\tuseEffect(() => {\n\t\tif (props.myProfile && props.myProfile.CityUmbracoId != undefined){\n\t\t\tprops.setLoading(true);\n\t\t}\n\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\n\t\tfetchData();\n\n\t}, []);\n\n\n\t// загрузка мест, админов города, текущих турниров\n\tuseEffect(() => {\n\n\t\t// а это уже когда прогрузился и выбран город профиля\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\n\t\t\t// получаем список админов турниров города по umbId города\n\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список активных турниров города по umbId города и текущей дате\n\t\t\tprops.getTournamentsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых мест по umbId города\n\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых сборов\n\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список аренд\n\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\tif (!timerStarts)\n\t\t\t{\n\t\t\t\tsetTimerStarts(true);\n\t\t\t\tsetTimeout(() => setInterval(() => checkMovings(), 30000), 5000)\n\t\t\t}\n\t\t}\n\n\t\t// это пока не прогрузился город профиля (не выбран)\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\n\t\t{\n\n\t\t\t// предлагаем выбрать город\n\t\t\tprops.setGlobalPopout(false);\n\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t}\n\n\n\t}, [props.myProfile, props.vkProfile, props.cities])\n\n\n\tuseEffect(() => {\n\t\tif (props.places && props.places.length > 0) {\n\n\t\t\tprops.getMatchesInCurrentCity(props.myProfile);\n\t\t\t\n\t\t\t// завершили загрузку\n\t\t\tif (props.Loading)\n\t\t\t\tprops.setLoading(false);\n\t\t}\n\t}, [props.places])\n\n\n\t// при смене глобального Popout и возникновении ошибки\n\tuseEffect(() => {\n\t\t//if (props.errorObject && props.errorObject.resultcode != 0)\n\t\tif (props.errorObject && props.errorObject != \"\") {\n\t\t\t//props.setCurrentModalWindow(<ModalCommon modalName=\"Error\" data={props.errorObject} Close={CloseModal}></ModalCommon>)\n\t\t}\n\t\telse {\n\t\t\t//setPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t\t}\n\t\t//}, [props.globalPopout, props.errorObject])\n\t}, [props.errorObject])\n\n\n\t// при загрузке профиля (по факту приложения)\n\tuseEffect(() => {\n\t\t// нужно узнать город, далее если этого города нет в списке поддерживаемых, предлжить выбрать другой город и отправить заявку на добавление города. Всё это в модалке\n\t\t// другой вопрос. если кто-то создает фейковый сбор, как гарантировать другим, что это не фейк?\n\t\t// ввести в рейтинг поле \"гарант сбора. если поступает жалоба на сбор (не было сбора), модератор засчитывает штрафной балл организатору\"\n\t\t// у людей, которые первый раз собирают, писать город из профиля, количество друзей и то, что человек еще не собирал ни разу, а значит может быть фейком\n\t\t// еще нужно запрашивать права на доступ к инфе: город, дата рождения, друзья, \n\t\t// а еще в бэке надо сделать так, чтобы записи в Leg и City не плодились, а искали соответствующие из умбрако и ставили их Id\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\n\t\t\tprops.getUserProfile(props.vkProfile);\n\t\t}\n\n\t}, [props.vkProfile])\n\n\n\t// регистрация пользователя\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\t\t\tif ((!props.myProfile) & (props.triedToGetProfile)) { // не зарегистрирован\n\t\t\t\tprops.getAuthInfo(props.vkProfile); // регаем\n\t\t\t}\n\t\t}\n\t}, [props.triedToGetProfile])\n\n\n\t// загрузка профиля\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\t\t\tif (props.myProfile) // зарегистрирован и получил данные\n\t\t\t{\n\t\t\t\t// если не год рождения скрыт настройками приватности и из-за этого при регистрации на бэкэнде дата рождения не определилась, \n\t\t\t\t// выводим окно выбора года рождения и после выбора правим его в профиле ВК\n\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() < 1920)) {\n\t\t\t\t\t\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t\telse {\n\n\t\t\t\t\t// после регистрации, загрузки новых данных с сервера и указания года рождения необходимо обновить данные на сервере\n\t\t\t\t\tif (new Date(props.myProfile.Birth).getFullYear() < 1920) {\n\t\t\t\t\t\tprops.getAuthInfo(props.vkProfile);\n\t\t\t\t\t}\n\t\t\t\t\telse { // если данные обновлены и все в порядке с профилями\n\t\t\t\t\t\tprops.setCurrentModalWindow(null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// поправка даты в vk профиле (правится, когда профиль грузится с бэкэнда без регистрации)\n\t\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() >= 1920)) {\n\t\t\t\t\t\tprops.setVkProfileInfo({ ...props.vkProfile, bdate: props.vkProfile.bdate + \".\" + new Date(props.myProfile.Birth).getFullYear().toString() })\n\t\t\t\t\t}\n\n\t\t\t\t\tif (props.myProfile.CityUmbracoId != null && props.myProfile.CityUmbracoId == -1) {\n\t\t\t\t\t\t//debugger\n\t\t\t\t\t\t// предлагаем выбрать город\n\t\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t\t}\n\n\n\t\t\t\t\t//props.getUser(19757699);\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t\t// if (props.myProfile.Name)\n\t\t// {\n\t\t// \tsetModalWindow(<ModalCommon modalName=\"MyProfile\" data={props.myProfile} Close={() => setModalWindow(null)}></ModalCommon>)\n\t\t// }\n\t}, [props.myProfile])\n\n\n\t// отобразить панель админа турниров\n\tuseEffect(() => {\n\t\t// если загрузились админы города\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\n\t\t\t// отображаем пункт меню администрирование турниров\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\n\t\t\t\tprops.setShowAdminTourneyTab(true)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.setShowAdminTourneyTab(false)\n\t\t\t}\n\t\t}\n\t}, [props.tournamentAdmins])\n\n\n\tconst TournamentSelect = (item) => {\n\t\t//debugger\n\t\tprops.setSelectedTournament(item);\n\t\tprops.setTournamentMode(\"view\");\n\t\t// надо заполнять TournamentGroups!\n\t\t//props.setActiveMenuItem(\"tournamentitem\"); // отключил, тк установил компонент hoc withHistory\n\t\t//toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\"\n\t}\n\n\tconst CollectSelect = (item) => {\n\t\t//debugger\n\t\tprops.selectSimpleCollect(item);\n\t\tprops.setCollectItemMode(\"view\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил тк использовал компонент с hoc withHistory\n\t}\n\n\n\tconst CollectAdd = () => {\n\t\t//debugger\n\t\tprops.setCollectItemMode(\"add\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил, тк сделал кнопку через hoc withHistory\n\t}\n\n\tconst UpdateFromServer = () => {\n\t\twindow.location.reload(true);\n\t}\n\n\t// useEffect(() =>{\n\t// \tdebugger\n\t// \tif (props.vkProfile && props.vkProfile.city) {\n\t// \t\tif (props.myProfile) // зарегистрирован и получил данные\n\t// \t\t{\n\t// \t\t\tif (props.team.selected != null){\n\t// \t\t\t\tprops.getActualTournamentsInCity(props.myProfile, props.team.selected);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }, [props.team.selected])\n\n\t// const changeView = (e) => {\n\t// \tprops.setActiveMenuItem(e.currentTarget.dataset.story)\n\t// }\n\n\tlet test = () => {\n\t\t\n\t\t\n\t}\n\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\n\t\tif (menuItem.enabled && menuItem.show)\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\n\t\telse\n\t\t\treturn null\n\t}\n\t).filter(i => i);\n\n\t//if ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\n\t//debugger\n\n\n\treturn (\n\n\t\t<Epic\n\t\t\tactiveStory={props.mainMenu.activeItem.name}\n\t\t\ttabbar={\n\t\t\t\t<Tabbar>\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\n\t\t\t\t\t{/* <TabbarItemWithHistory toMenuName=\"collectslist\" selected={\"collectslist\" === props.mainMenu.activeItem.name} data-story=\"collectslist\" text=\"Сборы\"></TabbarItemWithHistory> */}\n\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\n\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\n\t\t\t\t\t{\n\t\t\t\t\t//props.ShowAdminTeamTab \n\t\t\t\t\tprops.ShowAdminTourneyTab \n\t\t\t\t\t&& <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\n\t\t\t\t</Tabbar>}>\n\n\t\t\t<View id=\"hot\" \n\t\t\t//activePanel={props.matches.hotPanel} \n\t\t\tactivePanel=\"main\" \n\t\t\tmodal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader left={<BackButton isBack={true} />}>Горячее в городе</PanelHeader>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сервисы</Header>}>\n\t\t\t\t\t\t<CardGrid size=\"s\">\n\t\t\t\t\t\t\t<CardWithHistory\n\t\t\t\t\t\t\t\tdata-story=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttext=\"Перейти к турнирам\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttoMenuName=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t//handleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={tournament}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Турниры<br />города</span>\n\t\t\t\t\t\t\t</CardWithHistory>\n\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={player}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t<Card onClick={test}>\n\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={stadium}></img>\n\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Предстоящие матчи</Header>}>\n\t\t\t\t\t\t<Hot Name=\"Сегодня\" Matches={props.matches.hot.today}></Hot>\n\t\t\t\t\t\t<Hot Name=\"Завтра\" Matches={props.matches.hot.tomorrow}></Hot>\n\t\t\t\t\t\t\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сыграны вчера</Header>}>\n\t\t\t\t\t\t<Hot Matches={props.matches.hot.yesterday}></Hot>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t\n\t\t\t</View>\n\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tВсе турниры\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group header={<Header>Текущие турниры города</Header>}>\n\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprops.tournament.tournaments.map(t => {\n\n\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Founder.Name} ${t.Founder.Surname}`}\n\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.WhenBegin) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t`Стартует \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.WhenBegin).getDate() <= 9 ? \"0\" + (new Date(t.WhenBegin).getDate()) : (new Date(t.WhenBegin).getDate())}.${new Date(t.WhenBegin).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.WhenBegin).getMonth() + 1) : (new Date(t.WhenBegin).getMonth() + 1)}.${new Date(t.WhenBegin).getFullYear()}`\n\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"}\n\t\t\t\t\t\t\t\t\t\thandleClick={() => TournamentSelect(t)}\n\t\t\t\t\t\t\t\t\t\tdata-story=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\ttoMenuName=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t>{t.Name}</RichCellWithHistory>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden header={<Header>Архивные турниры города</Header>}>\n\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"collectslist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tВсе сборы\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t<CellButtonWithHistory\n\t\t\t\t\t\t\tdata-story=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\ttext=\"Создать сбор\" // необходимо для использования withHistory\n\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\thandleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tАрендовать площадку и собрать людей</CellButtonWithHistory>\n\t\t\t\t\t</FormItem>\n\t\t\t\t\t<Group header={<Header>Текущие сборы города</Header>}>\n\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\tprops.collect.collects.sort((a, b) => new Date(a.When).getTime() - new Date(b.When).getTime())\n\t\t\t\t\t\t\t\t\t.map(t => {\n\t\t\t\t\t\t\t\t\t\tlet timeEnding = addToTime(new Date(t.When), 0, t.DurationMinutes);\n\n\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Creator.Name} ${t.Creator.Surname}`}\n\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.When) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t`Начало \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getDate() <= 9 ? \"0\" + (new Date(t.When).getDate()) : (new Date(t.When).getDate())}.${new Date(t.When).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.When).getMonth() + 1) : (new Date(t.When).getMonth() + 1)}.${new Date(t.When).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t\t\t\tв \n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getHours() <= 9 ? \"0\" + (new Date(t.When).getHours()) : (new Date(t.When).getHours())}:${new Date(t.When).getMinutes() <= 9 ? \"0\" + (new Date(t.When).getMinutes()) : (new Date(t.When).getMinutes())}\n\t\t\t\t\t\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t((timeEnding > new Date())\n\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"Закончен\"\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\thandleClick={() => CollectSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\tafter={`${t.Cost} руб.`}\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"\n\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"\n\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t({t.Members.length}/{t.NeedMembers}) - {t.Name}\n\t\t\t\t\t\t\t\t\t\t</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden header={<Header>Архивные сборы</Header>}>\n\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"collectadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tУправление сборами\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<SimpleCollectItem></SimpleCollectItem>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"profile\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tПрофиль\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <FormItem>\n\t\t\t\t\t\t<InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Город\">{props.myProfile && props.myProfile.CityName}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Год рождения\">{props.myProfile && new Date(props.myProfile.Birth).getFullYear()}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow>\n\t\t\t\t\t\t<InfoRow header=\"Город привязки\">{props.myProfile && props.myProfile.CityUmbracoName}</InfoRow>\n\t\t\t\t\t</FormItem>\n\t\t\t\t\t}\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group hidden>\n\t\t\t\t\t\tОписание проекта, возможность написать автору, выбор амплуа, выбор уровня (не играл, новичек, город и тд)\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tСсылка на сайт и на канал на ютубе, где документация есть по проекту\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\tсделать кнопку \"подписаться на уведомления\"\n\t\t\t\t\t\tзапросить разрешение на отправку сообщения от имени приложения (или сообщества?)\n\t\t\t\t\t</Group>\n\t\t\t\t\t<Group header=\"Опции\">\n\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t<ButtonWithNotify Message=\"Подписаться на уведомления от сервиса?\" mode=\"primary\" Yes={() => bridge.send(\"VKWebAppAllowNotifications\")}>Подписаться на события</ButtonWithNotify>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t</Group>\n\t\t\t\t\t<ProfilePanel></ProfilePanel>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tУправление турнирами\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tМои команды\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tТурнир\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TournamentItem\n\t\t\t\t\t\t\tmode={props.tournament.mode}\n\t\t\t\t\t\t//Tab=\"shedule\"\n\t\t\t\t\t\t//mode=\"view\"\n\t\t\t\t\t\t></TournamentItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tКоманда\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tДоступно для заявки\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\t<Group>\n\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\n\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\n\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\n\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\n\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\n\t\t\t\t\t</Group>\n\t\t\t\t</Panel>\n\t\t\t</View>\n\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<PanelHeader\n\t\t\t\t\t\tleft={<BackButton isBack={true} />}\n\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\n\t\t\t\t\t>\n\t\t\t\t\t\tИгрок\n\t\t\t\t\t</PanelHeader>\n\t\t\t\t\tИгрок\n\t\t\t\t</Panel>\n\t\t\t</View>\n\n\n\t\t</Epic>\n\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\n\t\tCurrentModalWindow: state.system.CurrentModalWindow,\n\t\tLoading: state.system.Loading,\n\t\tcities: state.cityEntity.cities,\n\t\t//places: state.placeEntity.places,\n\t\tplaces: state.simplePlaceEntity.places,\n\t\tglobalPopout: state.system.GlobalPopout,\n\t\tvkProfile: state.profileEntity.vkProfile,\n\t\tmyProfile: state.profileEntity.myProfile,\n\t\terrorObject: state.system.ErrorObject,\n\t\t//`errorMessage: state.system.ErrorObject.message,\n\t\ttriedToGetProfile: state.profileEntity.triedToGetProfile,\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\n\t\ttournament: state.tournamentsEntity,\n\t\tcollect: state.collectEntity,\n\t\tteam: state.teamsEntity,\n\t\tbidTeams: state.bidTeamsEntity,\n\t\tmatches: state.matches,\n\t\ttournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, { \n\tsetCurrentModalWindow, setLoading, \n\tgetAllSimpleCollectsInCityByCityUmbracoId, getAllSimplePlacesInCityByCityId, getAllRentsInCityByCityId, getUser, setSelectedUser,\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity, getTournamentsByCityId, setSelectedTournament, setTournamentMode, setCollectItemMode,\n\tsetActiveMenuItem, setVkProfileInfo, setGlobalPopout, getUserProfile, getAuthInfo, setTriedToGetProfile, setHotPanel, resetError, selectSimpleCollect,\n\tgetAllCitiesFromServer, setUserProfileCity, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab, getMatchesInCurrentCity,\n})(App);\n","import { users } from \"./constants/commonConstants\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\n\nconst initState = {\n    users: [\n        users[0],\n        users[1],\n    ]\n}\n\n\nlet userReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\nexport const ampluaCathegoryTypes = [\n    {id: 0, name: \"Вратарь\"},\n    {id: 1, name: \"Защитник\"},\n    {id: 2, name: \"Полузащитник\"},\n    {id: 3, name: \"Нападающий\"},\n    {id: 4, name: \"Тренер\"},\n    {id: 5, name: \"Административный персонал\"},\n]\n\nexport const ampluaTypes = [\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n]\n\nconst initState = {\n\n}\n\n\nlet ampluaReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport profileReducer from './profileReducer.js'\nimport collectReducer from './collectReducer.js'\nimport userReducer from './userReducer.js'\nimport hot from './hotReducer.js'\nimport tournaments from './tournamentsReducer.js'\nimport teams from './teamsReducer.js'\nimport bidTeams from './bidTeamsReducer.js'\nimport ampluaReducer from './ampluaReducer.js'\n//import placeReducer from './placeReducer.js'\nimport rentReducer from './rentReducer.js'\nimport simplePlaceReducer from './simplePlaceReducer.js'\nimport paymentReducer from './paymentReducer.js'\nimport mainMenuReducer from './mainMenuReducer.js'\nimport systemReducer from './systemReducer.js'\nimport cityReducer from './cityReducer.js'\nimport matchReducer from './matchReducer.js'\nimport vkReducer from './vkReducer.js'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\n    }) : compose;\n\n\nlet reducers = combineReducers({\n    profileEntity: profileReducer,\n    collectEntity: collectReducer,\n    hotEntity: hot,\n    tournamentsEntity: tournaments,\n    teamsEntity: teams,\n    teamsEntity: teams,\n    bidTeamsEntity: bidTeams,\n    matches: matchReducer,\n    userEntity: userReducer,\n    cityEntity: cityReducer,\n    ampluaEntity: ampluaReducer,\n    //placeEntity: placeReducer,\n    rentEntity: rentReducer,\n    vkcom: vkReducer,\n    simplePlaceEntity: simplePlaceReducer,\n    paymentEntity: paymentReducer,\n    mainMenu: mainMenuReducer,\n    system: systemReducer,\n})\n\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\n// composeEnhancers(\n//     applyMiddleware(thunk))\n\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\nwindow.store = store;\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport store from './store/store'\nimport { Provider } from \"react-redux\";\nimport { AdaptivityProvider, AppRoot, ConfigProvider } from \"@vkontakte/vkui\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  </Provider>, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => { }); //runtime download\n}\n"],"sourceRoot":""}