{"version":3,"sources":["store/selectors/selectors.js","components/Modals/ModalCommon/ModalCommon.jsx","img/common/defaultPlace.jpg","store/constants/commonConstants.js","utils/convertors/dateUtils.js","store/mainMenuReducer.js","utils/api/server.js","utils/api/api.js","store/systemReducer.js","store/collectReducer.js","store/rentReducer.js","store/simplePlaceReducer.js","components/Panels/Common/WithNotify/ButtonWithNotify.jsx","components/Panels/Common/HOCs/withNotify.jsx","components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/tournamentsReducer.js","store/teamsReducer.js","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","store/bidTeamsReducer.js","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","store/matchReducer.js","components/Panels/AdminPanel/Match/MatchListItem.jsx","components/Panels/Common/Shedule/Shedule.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/Hot/Hot.jsx","components/Panels/Common/WithHistory/CardWithHistory.jsx","components/Panels/Common/WithHistory/CellButtonWithHistory.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Panels/ProfilePanel/ProfilePanel.jsx","img/common/player300-s.png","img/common/stadium300-s.png","img/common/tournament300.png","store/profileReducer.js","store/cityReducer.js","store/vkReducer.js","components/Panels/AdminPanel/Match/MatchItem.jsx","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["getCurrentExpirienceName","level","expirienceName","ModalCommon","props","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","selectedDate","setSelectedDate","useEffect","activeModal","modalName","id","header","data","title","mode","top","placeholder","onClose","Close","actions","size","onClick","message","Accept","Name","Surname","Birth","Register","City","action","bdate","isNaN","onChange","e","currentTarget","value","options","start","count","current","result","push","Date","getFullYear","map","year","label","renderOption","option","restProps","undefined","action2","min","day","month","max","onDateChange","profile","CityUmbracoId","style","color","CityName","cities","city","CityUmbracoName","currentDate","BidTeam","Id","AdminTournamentComment","TeamName","When","getDay","getMonth","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Year","WhenBegin","WhenEnd","Details","Reglament","MatchLength","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Photo","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","keys","length","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","Address","Stages","Parking","Worktime","BreakTimes","DressingRooms","Areas","Price","Enabled","Access","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","timeToString","hours","minutes","seconds","h","toString","m","s","dateTimeToTimeString","datetime","getHours","getMinutes","dateToString","date","newDate","args","dateOptions","weekday","getDate","toLocaleString","addToTime","getSeconds","datesWithoutTimeIsSame","date1","date2","dateSelectorValueToJSDateValue","dsValue","jSDateValueToDateSelectorValue","jsDate","ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","name","position","enabled","show","activeItem","setActiveMenuItem","menuName","type","mainMenuReducer","state","find","it","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","resultcode","okObj","dat","VKAPI","get","then","ErrorMessage","catch","error","CityAPI","post","SimplePlaceAPI","cityId","startindex","formData","FormData","append","RentAPI","CollectAPI","userProfileId","simpleCollect","userProfile","JSON","stringify","simpleMember","reason","TeamAPI","teamId","ProfileAPI","vkUserData","vkUser","split","UTC","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","team","newgroup","oldgroup","userprofile","teamToSend","newgroupToSend","TournamentId","oldgroupToSend","newGroup","oldGroup","tournamentToSend","item","publish","tg","admintext","tournamentGroupToSend","tournamentGroup","tournamentGroupId","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllByAdminProfileId","saveTeam","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","tournamentgroup","teamName","bidTeamToTournament","MatchAPI","matchInfo","match","TournamentAPI","tournamentId","ServiceAPI","ANY_ACTION_TYPE","SYSTEM_SET_LOADING","SYSTEM_CHECK_LOADING","SYSTEM_SET_CONNECTED","SYSTEM_SET_DISCONNECTED","SYSTEM_PUSH_TO_HISTORY","SYSTEM_SET_CURRENT_MODAL_WINDOW","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","currentMenu","Connected","history","GlobalPopout","CurrentModalWindow","ErrorObject","ShowAdminTourneyTab","ShowAdminTeamTab","Loading","CheckLoading","setGlobalPopout","on","setCurrentModalWindow","modal","setErrorMessage","errorMessage","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","val","pushToHistory","systemReducer","loading","slice","showAdminTourneyTab","COLLECTS_SET_ALL_SIMPLE_COLLECTS","COLLECTS_SELECT_SIMPLE_COLLECT","COLLECTS_SET_COLLECT_ITEM_MODE","COLLECTS_DEL_SIMPLE_COLLECT","COLLECTS_ADD_SIMPLE_COLLECT","COLLECTS_SET_SIMPLE_COLLECT","COLLECTS_SET_SELECTED_COLLECT_MEMBERS","COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS","COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT","prototype","addDays","days","this","setDate","collects","selected","setAllSimpleCollects","simplecollects","deleteMemberFromSimpleCollect","member","addMemberToSelectedSimpleCollect","setCollectItemMode","delSimpleCollect","collect","addSimpleCollect","setSimpleCollect","collectReducer","simplecollect","Members","members","col","res","filter","demoRents","RENTS_SET_RENTS","RENTS_SET_SELECTED_RENT","rents","selectedRent","selectedDayRents","setRents","rentReducer","r","From","rentDate","SimplePlaceId","simplePlaceId","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","PLACES_SET_SELECTED_PLACE","places","selectedPlace","setPlaces","simplePlaceReducer","x","placeId","withNotify","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","AcceptAndClose","Yes","evt","handleClick","Message","prevProps","prevState","React","Component","connect","collectEntity","simplePlace","simplePlaceEntity","rentEntity","rent","myProfile","profileEntity","DeleteMemberFromCollect","pl","setSelectedSimplePlace","setSelectedRent","AddSimpleCollect","registerMemberToSimpleCollect","DelSimpleCollect","EditSimpleCollect","setSelectedMembers","workoutSelector","ranges","minutesOneSlot","workoutColNumber","useAdaptivity","viewWidth","acceptBeMember","setAcceptBeMember","showPanelBeMember","setShowPanelBeMember","showCancelMemberForm","setShowCancelMemberForm","cancelReason","setCancelReason","details","setDetails","collectType","setCollectType","needMembers","setNeedMembers","costMembers","setCostMembers","costAll","setCostAll","plus","setPlus","Array","selectedSlots","setSelectedSlots","selectedTimeRanges","vkids","UserVkId","photo","bridge","send","access_token","us","response","p","PhotoPath","youAreMember","youAreOrganizer","CreatorId","simplePlaces","changeCollectType","selectSlot","tmpSelectedSlot","ss","Hours","Minutes","sort","a","b","gotoProfile","profileId","open","calculateNeedMembers","need","Math","round","calculateCostMembers","membercost","worktimeSlots","wt","selectedDT","from","FromTime","ToTime","valueOf","fromTmp","slotsNumber","numberOfCols","numberOfRows","trunc","slots","slotsInHour","startHour","oneSlotMinutes","SlotMinutes","PricePerSlot","Selected","Rented","timeSlotsForSimpleCollects","iButtons","slot","slotCurrentIndex","forEach","worktimeSlot","curentWorktimeSlotFromTime","curentWorktimeSlotToTime","currentSlotTime","Breaks","brek","to","brekTime","rnt","rentTime","isArray","slt","selectedTime","CostPerHour","reduce","acc","cur","costall","costMem","calculateCostAll","splitCols","sCol","j","width","tr","until","caption","disabled","NeedMembers","Cost","Creator","before","src","memberUserProfile","SimpleCollectId","deleteMember","defaultValue","FullPrice","Checkbox","checked","changePlace","place","changeDate","description","bottom","withHistorySave","toMenuName","isBack","TeamAdminList","List","multiline","Button2Handle","after","CellClick","data-story","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_MY_ADD_OR_EDIT","TOURNAMENT_SET_TOURNAMENTGROUPS","TOURNAMENT_SET_TOURNAMENTTEAMS","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_MATCH_LENGTH","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","TOURNAMENT_SET_ORGANIZATOR_NAME","TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT","TOURNAMENT_SET_LINK","TOURNAMENT_SET_LINK2","TOURNAMENT_SET_LINK2NAME","TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES","emptyTournament","tournaments","bidsNew","selectedForView","selectedTables","myTournaments","cityTournamentAdmins","setTournaments","setTournamentTables","tables","setMyTournament","mytournament","addOrEditTournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","setSelectedTournamentGroups","groups","setTournamentTeams","bidsWithTeamsAndGroups","delGroupFromTournamentByKeyId","groupId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","deleteTournament","getTournamentTeams","getMyTournaments","tournamentReducer","tour","KeyId","newTourn","t","OrganizatorName","OrganizatorNameShort","Link","Link2","Link2Name","newTGroups","Teams","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","mainMenu","tournamentsEntity","teamsEntity","Button1Handle","publishTeam","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","ListItem","removable","onRemove","Delete","BidList","trim","Tournament","Founder","BidTeamTournamentList","Bids","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","SelectedName","bidSelectMode","cityEntity","getTournamentGroups","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","SaveTeam","TournamentAdminList","BidListItem","adminText","setAdminText","Item","Decline","MATCH_SET_ALL_MATCHES","MATCH_DEL_MATCH","MATCH_SET_SELECTED","MATCH_ADD_MATCH","MATCH_SET_HOT_MATCHES","MATCH_SET_ACCESS","MATCH_SET_MODE","MATCH_SET_PLAYED","MATCH_SET_HOT_PANEL","matches","hot","yesterday","today","tomorrow","hotPanel","access","setAllMatches","setHotMatches","delMatch","addMatch","setAccess","setMode","setSelectedMatch","getAllMatchesByTournament","addMatchToShedule","Number","delMatchFromShedule","matchReducer","tomorrow_begin","tomorrow_end","st","played","panelName","schet","fontWeight","backgroundColor","padding","borderRadius","win","lose","MatchListItem","Match","ClickHandler","gradientColor","calcInitialsAvatarColor","Played","Team1Goals","Team2Goals","Team1","Team2","optMaker","todayIs","makeZeroBefore","g","UmbracoId","teamGoals","selectedTournamentGroup","setSelectedTournamentGroup","selectedTournamentGroupTeamList","setSelectedTournamentGroupTeamList","selectedTeam1","setSelectedTeam1","selectedTeam2","setSelectedTeam2","selectedTeam1Goals","setTeam1Goals","selectedTeam2Goals","setTeam2Goals","setSelectedPlace","selectedDescription","setSelectedDescription","selectedId","setSelectedId","selectedPlayed","setSelectedPlayed","selectedHour","setSelectedHour","selectedMinute","setSelectedMinute","getGroup","changeGroup","league_id","allMatchesInAllGroups","editId","PlaceId","Team1Id","Team2Id","Description","BidTeamToTournamentId1","BidTeamToTournamentId2","groupAndMatchesItem","goToEditMatch","otherProps","delCurrentMatch","align","prev","next","goToViewMatch","toLocaleDateString","w7percent","textAlign","w8percent","w20percent","overflow","TournamentTables","setTournamentOrganizatorName","setTournamentLink","setTournamentLink2","setTournamentOrganizatorNameShort","setTournamentLink2Name","replaceTeam","tOldGoup","tNewGroup","tGoup","getTeamInfo","changeTournamentTeamBidTournamentGroup","deleteTeamFromTournament","setTournamentMatchLength","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","getTournamentTablesByTournamentId","tempGroupName","setTempGroupName","Tab","currentTab","setCurrentTab","activePopout","setActivePopout","AcceptBid","DeclineBid","SetPopup","oldTg","iosCloseItem","autoclose","newTg","SelectTournamentGroup","popout","activePanel","href","table","tT","firstItem","secondItem","chet","row","Games","Wins","Loses","Draws","GoalsScored","GoalsMissed","GoalsDifference","Points","keyId","DeleteTeam","toLocaleTimeString","Team1Name","Team2Name","ProfilePanel","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_TRIED_TO_GET_PROFILE","PROFILE_SET_MY_TOTAL_EXP","PROFILE_SET_MY_NAME","PROFILE_SET_MY_BIRTH","PROFILE_SET_MY_SURNAME","vkProfile","triedToGetProfile","setUserProfile","setTriedToGetProfile","tried","profileReducer","birth","getYear","TotalExpirience","exp","surname","birthDate","CITY_GET_ALL_FROM_SERVER","cityReducer","VK_SET_SELECTED_USER","selectedUser","vkReducer","MatchItem","readOnly","minHeight","globalPopout","errorObject","tournamentAdmins","setBirthDate","setLoading","checkConnection","updateLoading","saveUserProfile","ProfileInfo","setUserName","setUserSurName","setMyTotalExpirience","getAllSimpleCollectsInCityByCityUmbracoId","getAllSimplePlacesInCityByCityId","getAllRentsInCityByCityId","getUser","setSelectedUser","getTournamentsByCityId","cityUmbId","setVkProfileInfo","getUserProfile","getAuthInfo","vkProfileInfo","setHotPanel","selectSimpleCollect","getAllCitiesFromServer","setUserProfileCity","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","getMatchesInCurrentCity","setUser","isFetching","setIsFetching","timerStarts","setTimerStarts","connectionTimer","cardStyle","left","height","background","opacity","consoleLog","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","setInterval","ii","store","clearInterval","CheckConnection","setTimeout","menuItem","onRefresh","reload","activeStory","tabbar","player","stadium","lineHeight","fontSize","hidden","getTime","timeEnding","weight","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","hotEntity","paymentReducer","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a2c34327.chunk.js","sourcesContent":["import { useSelector } from \"react-redux\"\n\nexport const useIsConnected = () => {\n    debugger\n    let connected = useSelector(state => state.system.Connected)\n    return connected;\n    //const count = useSelector(state => state.counter.count)\n  }\n\n\nexport const getCurrentExpirienceName = (level) => {\n  let expirienceName = \"Никогда не играл в футбол\";\n\n  if (level == 0){\n    expirienceName = \"Новичок. Никогда не играл ранее\";\n  } \n  else if (level > 10 && level <= 20){\n    expirienceName = \"Новичок. Только начинаю играть\";\n  }  \n  else if (level > 20 && level <= 30){\n    expirienceName = \"Новичок. Не испорчу игру начинающим командам\";\n  }  \n  else if (level > 30 && level <= 40){\n    expirienceName = \"Любитель. Выхожу на замену в матчах городских турниров\";\n  }  \n  else if (level > 40 && level <= 50){\n    expirienceName = \"Любитель. Первые успехи, подаю надежды\";\n  }  \n  else if (level > 50 && level <= 60){\n    expirienceName = \"Любитель. Востребован у команд региона\";\n  }  \n  else if (level > 60 && level <= 70){\n    expirienceName = \"Любитель. Средний уровень игры для большинства команд региона\";\n  }  \n  else if (level > 70 && level <= 80){\n    expirienceName = \"Любитель. Регулярный выход в основном составе большинства команд региона\";\n  }  \n  else if (level > 80 && level <= 90){\n    expirienceName = \"Любитель. Регулярный выход в основном составе ТОП-команд региона\";\n  }  \n  else if (level > 90 && level <= 95){\n    expirienceName = \"Полупрофессионал, опыт игр на межрегиональном уровне\";\n  }  \n  else if (level > 95){\n    expirienceName = \"Профессиональный футболист с действующим контрактом\";\n  }  \n\n  return expirienceName;\n}","import React, { useState, useEffect } from 'react';\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input, DatePicker } from '@vkontakte/vkui'\n\n\n\nlet ModalCommon = (props) => {\n    // при первом запуске подгрузить города\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\n    let [selectedDate, setSelectedDate] = useState(\"\")\n    let [bidCity, setBidCity] = useState(\"\")\n\n\tuseEffect(() => {\n\t\t// загрузка городов здесь\n\t\t\n    }, [])\n    \n    const setDate = (value) => {\n        debugger\n        setSelectedDate(`${value.day}.${value.month}.${value.year}`)\n    }\n    \n    const saveDate = (value) => {\n        \n        props.action({...props.data, bdate: selectedDate != \"\" ? selectedDate : undefined})\n        props.action2(2);\n    }\n\n    return (\n        <ModalRoot activeModal={props.modalName}>\n            <ModalPage id=\"CitySelect\"\n                header={\n                <ModalPageHeader>\n                \n              </ModalPageHeader>\n            }\n          >\n                <Group>\n                    <InfoRow>\n                        Ваш город определен как: {props.data.title}\n                    </InfoRow>\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\n                    <InfoRow top=\"Город\">            \n                        <SelectMimicry placeholder=\"Выбрать город\" />\n                    </InfoRow>\n                </Group>    \n            </ModalPage>\n\n            <ModalCard\n                id=\"Error\"\n                onClose={props.Close}\n                //header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\n                header={props.data ? props.data : \"Произошла неизвестная ошибка\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"AreYouSure\"\n                onClose={props.Close}\n                header={props.data.message ? props.data.message : \"Текст вопроса не передан\"}\n                actions={\n                    <>\n                    <Button size=\"l\" mode=\"destructive\" onClick={props.Accept}>Да</Button>\n                    <Button size=\"l\" mode=\"secondary\" onClick={props.Close}>Нет</Button>\n                </>\n            }\n                >\n                    {/* <Textarea defaultValue=\"\" /> */}\n            </ModalCard>\n\n            <ModalCard\n                id=\"MyProfile\"\n                onClose={props.Close}\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\n                    {/* <Textarea defaultValue=\"\" /> */}\n                    {\n                        (props.data.Name) ?\n                        `Имя: ${props.data.Name} \\r\\n\n                        Фамилия: ${props.data.Surname} \\r\\n\n                        Дата рождения: ${props.data.Birth} \\r\\n\n                        Зарегистрирован: ${props.data.Register} \\r\\n\n                        Город: ${props.data.City.Name}\n                        ` : \"\"\n                    }\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectBirthYear\"\n                // onClose={props.Close}\n                header=\"Укажите Ваш год рождения\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => props.action({...props.data, bdate: props.data.bdate && props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)})}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow header=\"Год рождения не определен\">\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Год рождения\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            <ModalCard\n                id=\"SelectBirth\"\n                // onClose={props.Close}\n                header=\"Укажите дату вашего рождения\"\n                actions={\n                <Button size=\"l\" mode=\"primary\" \n                onClick={saveDate}>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                        <InfoRow header=\"Год рождения не определен\">\n                            Дату рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальную дату вашего рождения.\n                        </InfoRow>\n                            <FormItem top=\"Дата рождения\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 100 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear()}}\n                                    //defaultValue={props.tournaments.selected.WhenEnd}\n\n                                    onDateChange={(e) => setDate(e)}\n                                ></DatePicker>            \n                            {/* <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedYear(+e.currentTarget.value)\n                                    }}\n                                options={[...((start, count) => {\n                                    \n                                        let current = start;\n                                        let result = [];\n                                        while (current < start + count){\n                                            result.push(current);\n                                            current += 1;\n                                        }\n                                        \n                                        return result\n                                    })(new Date().getFullYear() - 100, 90)\n                                ].map(year => ({ label: year, value: year }))}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                /> */}\n                            </FormItem>\n                        </FormLayoutGroup>\n                    </FormLayout>\n            </ModalCard>\n            \n            <ModalCard\n                id=\"SelectCity\"\n                // onClose={props.Close}\n                header=\"Выберите город\"\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => {\n                        debugger\n                        props.action({...props.data.profile, CityUmbracoId: selectedCity})\n                        }\n                    }>Закрыть</Button>}>\n                    <FormLayout>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Город не найден\">\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \n                                Выберите из списка ближайший к вам город, за спортивной жизнью которого вы будете следить.\n                            </InfoRow>\n                            <FormItem top=\"Город\">            \n                            <Select\n                                placeholder=\"Не выбран\" \n                                onChange={(e) => {\n                                    setSelectedCity(+e.currentTarget.value)\n                                    }}\n                                options={props.data.cities && props.data.cities.map(city => {\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\n                                }\n                                )}\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\n                                />\n                            </FormItem>\n                        </FormLayoutGroup>\n                        {/* <InfoRow>или</InfoRow>\n                        <FormLayoutGroup>\n                            <InfoRow header=\"Укажите название вашего города\">\n                                Оставьте заявку администратору на добавление Вашего города в систему\n                            </InfoRow>\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\n                        </FormLayoutGroup> */}\n                    </FormLayout>\n            </ModalCard>\n      </ModalRoot>\n    )\n}\n\n\nexport default ModalCommon","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","const currentDate = new Date();\n\n\n// таймслотов в одном часе\nexport const timeSlotsInOneHour = () => {\n    return +2\n}\n\nexport const getMaxNumberOfMembersInCollect = () => {\n    return +30\n}\n\nexport const getMinNumberOfMembersInCollect = () => {\n    return +2\n}\n\nexport const accessTypes = [\n    {Id: 0, Name: \"public\"},\n    {Id: 1, Name: \"private\"},\n    {Id: 2, Name: \"moderate\"},\n]\n\n// тип участия в сборе\nexport const memberingCollectTypes = {\n    Invite: 0, // приглашен\n    Member: 1, // уже подтвержден (участник)\n    Organizator: 2, // организатор\n    Participate: 3, // попросился\n    All: 4, // без фильтрации, все сборы\n}\n\nexport const cityTournamentAdmins = \n[\n    {\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \n    },\n]\n\nexport const Collect = {\n    collects: [],\n    selected: {\n        selected: {\n            Id: 6,\n            Name: 'Тестовый сбор',\n            When: '2021-09-09T17:40:00',\n            DurationMinutes: 90,\n            Details: 'Сбор в 10:30',\n            Comment: 'Верхнее поле',\n            Cost: 2500,\n            NeedMembers: 15,\n            PlaceId: 1,\n            Place: {\n              Id: 1,\n              Name: 'Стадион Динамо верхнее поле',\n              Info: 'Половина поля',\n              SimpleCityId: 3,\n              City: null,\n              Address: 'бульвар Петрковский',\n              Geo: '57.754071, 40.963803',\n              MainPicture: null,\n              Parking: true,\n              BicycleParking: false,\n              Enabled: true,\n              UmbracoId: 0,\n              Worktime: [],\n              ErrorMessage: null,\n              Published: true,\n              Deleted: false\n            },\n            CreatorId: 63,\n            Creator: {\n              CityUmbracoName: 'Кострома',\n              Name: 'Даниил',\n              Surname: 'Каверзин',\n              CityVkId: 1809,\n              UserProfileId: 63,\n              UserVkId: 'id136649652',\n              LastOnline: '2021-05-25T10:35:25',\n              Birth: '2001-06-04T00:00:00',\n              PhotoPath: ''\n            },\n            Members: [\n              {\n                Id: 1,\n                SimpleCollect: {\n                  Id: 6,\n                  Name: 'Тестовый сбор',\n                  When: '2021-09-09T17:40:00',\n                  DurationMinutes: 90,\n                  Details: 'Сбор в 10:30',\n                  Comment: 'Верхнее поле',\n                  Cost: 2500,\n                  NeedMembers: 15,\n                  SimplePlaceId: 1,\n                  SimplePlace: {\n                    Id: 1,\n                    Name: 'Стадион Динамо верхнее поле',\n                    Info: 'Половина поля',\n                    SimpleCityId: 3,\n                    City: null,\n                    Address: 'бульвар Петрковский',\n                    Geo: '57.754071, 40.963803',\n                    MainPicture: null,\n                    Parking: true,\n                    BicycleParking: false,\n                    Enabled: true,\n                    UmbracoId: 0,\n                    Worktime: [],\n                    ErrorMessage: null,\n                    Published: true,\n                    Deleted: false\n                  },\n                  CreatorId: 63,\n                  Creator: {\n                    UserProfileId: 63,\n                    UserVkId: 'id136649652',\n                    Name: 'Даниил',\n                    Surname: 'Каверзин',\n                    Fathername: null,\n                    Birth: '2001-06-04T00:00:00',\n                    Register: '2021-05-25T10:02:38',\n                    LastOnline: '2021-05-25T10:35:25',\n                    Height: 0,\n                    Weight: 0,\n                    PhotoPath: '',\n                    CityVkId: 1809,\n                    CityName: 'Ленинск-Кузнецкий',\n                    CityUmbracoId: 1080,\n                    CityUmbracoName: 'Кострома',\n                    LegId: -1,\n                    AmpluaId: -1,\n                    LastIp: '81.177.24.37',\n                    SimpleCollects: [],\n                    SimpleUserMessages: [],\n                    SimpleMembers: [],\n                    Citys: null,\n                    Tournaments: [],\n                    Ampluas: null,\n                    Legs: null,\n                    Admins: [],\n                    CityTournamentAdmins: [],\n                    ErrorMessage: '',\n                    Published: false,\n                    Deleted: false\n                  },\n                  SimpleMembers: [],\n                  ErrorMessage: null,\n                  Published: false,\n                  Deleted: false\n                },\n                SimpleCollectId: 6,\n                UserProfile: {\n                  UserProfileId: 63,\n                  UserVkId: 'id136649652',\n                  Name: 'Даниил',\n                  Surname: 'Каверзин',\n                  Fathername: null,\n                  Birth: '2001-06-04T00:00:00',\n                  Register: '2021-05-25T10:02:38',\n                  LastOnline: '2021-05-25T10:35:25',\n                  Height: 0,\n                  Weight: 0,\n                  PhotoPath: '',\n                  CityVkId: 1809,\n                  CityName: 'Ленинск-Кузнецкий',\n                  CityUmbracoId: 1080,\n                  CityUmbracoName: 'Кострома',\n                  LegId: -1,\n                  AmpluaId: -1,\n                  LastIp: '81.177.24.37',\n                  SimpleCollects: [],\n                  SimpleUserMessages: [],\n                  SimpleMembers: [],\n                  Citys: null,\n                  Tournaments: [],\n                  Ampluas: null,\n                  Legs: null,\n                  Admins: [],\n                  CityTournamentAdmins: [],\n                  ErrorMessage: '',\n                  Published: false,\n                  Deleted: false\n                },\n                UserProfileId: 63\n              },\n            ]\n          }\n    }\n}\n\nexport const TeamAdmins = \n[\n    {\n        Id : 0,\n        Name: \"Тестовая команда\",\n        Year: 2021,\n        WhenBorn: {day: 1, month: 2, year: 2021},\n        Details: \"Системная\",\n        Logo: \"\",\n        CityId: -1,\n        TournamentGroups: [], \n        Admins: [],\n        Matches: [],\n        Players: [],\n        Published: true,\n        Deleted: false,\n    },\n]\n\nexport const BidTeam = {\n    Id: -1,\n    AdminTournamentComment: \"\",\n    TeamName: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TeamId: -1, \n    Team: [],\n    TournamentGroupId: -1,\n    TournamentGroup: [],\n    UserProfileId: -1,\n    UserProfile: {},\n    Approved: false,\n    Deleted: false,\n    Published: false,\n\n}\n\nexport const Match = {\n    Id: -1,\n    Name: \"Матч\",\n    Description: \"Описание матча\",\n    Picture: \"\",\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    TournamentGroup: {},\n    TournamentGroupId: -1,\n    Place: {},\n    PlaceId: -1,\n    Team1: {},\n    Team1Id: -1,\n    Team2: {},\n    Team2Id: -1,\n    Team1Bid: {},\n    Team1BidId: -1,\n    Team2Bid: {},\n    Team2BidId: -1,\n    Team1Goals: 0,\n    Team2Goals: 0,\n    MatchEvents: [],\n    Deleted: false,\n    Published: false,\n    ErrorMessage: \"\",\n\n}\n\nexport const EmptyTournament = {\n    Id : -1,\n    Name: \"\",\n    Year: 0,\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\n    Details: \"\",\n    Reglament: \"\", \n    MatchLength: 60,\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [], \n    Admins: [],\n    Published: false,\n    Deleted: false,\n}\n\n\nexport const geo = {\n    Cities: [\n        {\n            Id: 0,\n            Name: \"Кострома\",\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\n            Population: 250000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n        {\n            Id: 1,\n            Name: \"Иваново\",\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\n            Population: 800000, // население города\n            //users: 0, // сколько футболистов в городе\n            //places: 0, // сколько мест для аренды\n        },\n    ],\n    Owners: [\n        {\n            Id: 0, \n            Name: \"Владелец 1\",\n        },\n        {\n            Id: 1, \n            Name: \"Владелец 2\",\n        }\n    ],\n}\n\nexport const simplePlaces =  []\n\nexport const rents =  []\n\n\nexport const places =  [\n        {\n            PlaceId: 0,\n            Name: \"Динамо\", /* placename*/\n            get Owner() { return geo.Owners[0]},\n            set Owner(val) { geo.Owners[0] = val},\n            get City() { return geo.Cities[0]},\n            set City(val) { geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\n            Geo: \"\",\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\n            DressingRooms: [\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\n            ],\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\n            Enabled: true,\n            Access: {},\n            \n        },\n        {\n            PlaceId: 1,\n            Name: \"МЧС\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        },\n        {   \n            PlaceId: 2,\n            Name: \"КГТУ\",  /* placename*/\n            get Owner() {return geo.Owners[0]},\n            set Owner(val) {geo.Owners[0] = val},\n            get City() {return geo.Cities[0]},\n            set City(val) {geo.Cities[0] = val},\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\n            Geo: \"\",\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\n            Stages: 0,\n            Parking: true,\n            BicycleParking: false, // велопарковка\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\n            DressingRooms: [\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\n            ],\n            Areas: [\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\n            ],\n            Price: 1800, /* цена за час занятий, перенести в areas */\n            Enabled: true,\n            Access: {},\n            \n        }\n    ]\n\n    export const ampluaCathegoryTypes = [\n        {Id: 0, Name: \"Вратарь\"},\n        {Id: 1, Name: \"Защитник\"},\n        {Id: 2, Name: \"Полузащитник\"},\n        {Id: 3, Name: \"Нападающий\"},\n        {Id: 4, Name: \"Тренер\"},\n        {Id: 5, Name: \"Административный персонал\"},\n        {Id: 6, Name: \"Игрок\"},\n    ]\n     \n    export const ampluaTypes = [\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\n    ]\n\n\nexport const users = [\n    {\n        Id: 0,\n        FirstName: \"Александр\",\n        SurName: \"Смирнов\",\n        FatherName: \"Евгеньевич\",\n        NickName: \"easports\",\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\n        Datebirth: new Date(\"05.29.1987\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n                Stamina: 100, // выносливость\n                Feints: 100, // финты\n                Reaction: 100, // реакция\n                ScoringFlair: 100, // голевое чутье\n                Intellect: 100, // ум\n                Rejection: 100, // отбор мяча\n                SlideEffect: 100, // игра в подкате\n                Header: 100, // игра головой\n                Creativity: 100, // креативность\n                Dribble: 100, // дрибблинг\n                Opening: 100, // открывание под пас\n                Charisma: 100, // харизма\n                BallTaking: 100, // прием мяча\n                FieldVision: 100, // видение поля\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n        },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 1,\n        FirstName: \"Евгений\",\n        SurName: \"Иванов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"eivanov\",\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\n        Datebirth: new Date(\"28.02.1983\"),\n        Leg: 1, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n    {\n        Id: 2,\n        FirstName: \"Фёдор\",\n        SurName: \"Смолов\",\n        FatherName: \"Валерьевич\",\n        NickName: \"fsmolov\",\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\n        Datebirth: new Date(\"01.01.1989\"),\n        Leg: 0, // 0-both, 1-left, 2-right\n        CityFrom: {...geo.Cities[0] },\n        CityNow: {...geo.Cities[0] },\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \n            Stamina: 100, // выносливость\n            Feints: 100, // финты\n            Reaction: 100, // реакция\n            ScoringFlair: 100, // голевое чутье\n            Intellect: 100, // ум\n            Rejection: 100, // отбор мяча\n            SlideEffect: 100, // игра в подкате\n            Header: 100, // игра головой\n            Creativity: 100, // креативность\n            Dribble: 100, // дрибблинг\n            Opening: 100, // открывание под пас\n            Charisma: 100, // харизма\n            BallTaking: 100, // прием мяча\n            FieldVision: 100, // видение поля\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\n    },\n        CurrentPhisicalForm: 100, // текущая физическая форма\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\n        Amplua: [{\n            Id: 0, \n            Amplua: {...ampluaTypes[0] }, //  амплуа \n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n\n    },\n]\n\nexport const myProfile = {\n    myProfile: users[0],\n}\n\n\nexport class commonUtils  {\n\n    static deepClone = (obj) => {\n        const clObj = {};\n        for(const i in obj) {\n            if (obj[i] instanceof Object) {\n                clObj[i] = this.deepClone(obj[i]);\n                continue;\n            }\n            clObj[i] = obj[i];\n        }\n        return clObj;\n    }\n\n    static copyCity = (city_source) => {\n        return city_source;\n    }\n\n    static copyAmplua = (amplua_source) => {\n        return amplua_source\n    }\n\n    static copyKeyFunction = (keyFunction_source) => {\n        return keyFunction_source\n    }\n\n    static copyUser = (user_source) => {\n        if (user_source == undefined || Object.keys(user_source).length === 0)\n            return undefined\n\n        return {\n            Id: user_source.Id,\n            FirstName: user_source.FirstName,\n            SurName: user_source.SurName,\n            FatherName: user_source.FatherName,\n            NickName: user_source.NickName,\n            Datebirth: user_source.Datebirth,\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\n            CityNow: { ...this.copyCity(user_source.CityNow) },\n            Level: {...user_source.Level\n            },\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\n            Injury: {...user_source.Injury},\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \n        }\n            \n    }\n\n    static copyOwner = (owner_source) => {\n        return {...owner_source}\n    }\n    \n    static copyAccess = (access_source) => {\n        return {...access_source}\n    }\n\n    static copyPlace = (place_source) => {\n        \n        if (place_source == undefined || Object.keys(place_source).length === 0)\n            return undefined\n\n        return {\n            Id: place_source.Id,\n            Name: place_source.Name,\n            Owner: {...this.copyOwner(place_source.Owner)},\n            City: {...this.copyCity(place_source.City)},\n            Address: {...place_source.Address},\n            Geo: {...place_source.Geo},\n            Photo: [...place_source.Photo],\n            Stages: place_source.Stages,\n            Parking: place_source.Parking,\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\n            DressingRooms: [...place_source.DressingRooms],\n            Areas: [...place_source.Areas],\n            Price: place_source.Price, // цена за час занятий\n            Enabled: place_source.Enabled,\n            Access: {...this.copyAccess(place_source.Access)},\n        }\n    }\n\n    static copyCollect = (collect_source) => {\n        \n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \n            return undefined\n\n        return {\n            Id: collect_source.Id,\n            Place: this.copyPlace(collect_source.Place),\n            Date: collect_source.Date,\n            Hour: collect_source.Hour,\n            Minute: collect_source.Minute,\n            DurationMinutes: collect_source.DurationMinutes,\n            Price: collect_source.Price, // цена за весь период\n            Options: [...collect_source.Options],\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\n            /*\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\n\n            */\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\n            return {\n                Id: uGroup.Id,\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\n                NumberOf: uGroup.NumberOf,  // количество участников \n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \n                    {\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\n                    }): \n                [{}])],\n                Price: uGroup.Price,\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\n            }\n        })],\n            UsersInvited: [\n                ...collect_source.UsersInvited.map(uInvited => {\n                    \n                    return {\n                        Id: uInvited.Id,\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \n                        User: {...this.copyUser(uInvited.User)},\n                    }\n                })\n            ],\n            UsersWantsToParticipate: [\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\n                    \n                    return {\n                        \n                        Id: uWP.Id,\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \n                        User: {...this.copyUser(uWP.User)},\n                    }\n                })\n            ],\n            Access: { ...this.copyAccess(collect_source.Access) },\n            Permanent: collect_source.Permanent,\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \n            Organizer: {...this.copyUser(collect_source.Organizer)}\n        }\n    }\n\n}","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\n\nexport function isDate(str) {\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\n  }\n \nexport const getAge = (date) => {\n    if (date != undefined) \n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\n    else\n        return 0;\n    \n}\n\nexport const timeToString = (hours, minutes, seconds) => {\n    \n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\n    let res = \"\";\n\n    if (h.length > 0 && m.length > 0 && s.length > 0)\n        res = h + \":\" + m + \":\" + s;\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\n        res = h + \":\" + m;\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\n        res = h;\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\n        res = m + \":\" + s;\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\n        res = s;\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\n        res = m;\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\n        res = h + \":\" + s;\n    else\n        res = \"\";\n    return res;\n}\n\nexport const dateTimeToTimeString = (datetime) => {\n    return timeToString(new Date(datetime).getHours(), new Date(datetime).getMinutes())\n}\n\n// возвращает дату в формате ДН, ДД ММММ ГГГГ г. , в args args[0] - прибавить дней, args[1] - прибавить месяцев, args[2] - прибавить лет,\n// args[3] = true - пишем день недели, false - не пишем\nexport const dateToString = (date, ...args) => {\n    \n    if (typeof date == \"string\")\n        date = new Date(date);\n\n    let newDate = date;\n    let dateOptions = (args == undefined || args[3] == undefined || (args[3] != undefined && args[3] == true)) ?\n    {\n        // era: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        weekday: 'short',\n        // timezone: 'UTC',\n        // hour: 'numeric',\n        // minute: 'numeric',\n        // second: 'numeric'\n    }\n    : {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n    };\n\n    if (args[0])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1])\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2])\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate.toLocaleString(\"ru\", dateOptions)\n}\n\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\nexport const addToDate = (date, ...args) => {\n        \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить дни\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\n\n    if (args[1]) // добавить месяцы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\n\n    if (args[2]) // добавить годы\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\n\n    return newDate;\n}\n\n// прибавляет к дате переданное в параметрах количество часов, минут, секунд. первый параметр -часы, второй- минуты и т.д.\nexport const addToTime = (date, ...args) => {\n     \n    if (typeof date == \"string\")\n        date = new Date(date);\n    \n    let newDate = date;\n    \n    if (args[0]) // добавить часы\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours() + args[0])\n\n    if (args[1]) // добавить минуты\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes() + args[1])\n\n    if (args[2]) // добавить секунды\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate(), newDate.getHours(), newDate.getMinutes(), newDate.getSeconds() + args[2])\n\n    return newDate;\n}\n\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\nexport const datesWithoutTimeIsSame = (date1, date2) => {\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\n}\n\n// сравнение двух дат только по времени (часы и минуты) без даты. true - равны, false- не равны\nexport const timesWithoutDateHourMinuteIsSame = (date1, date2) => {\n    return (date1.getHours() == date2.getHours() && date1.getMinutes() == date2.getMinutes())\n}\n\n// преобразование значения dateSelector из пакета vk ui в нативную дату JS\nexport const dateSelectorValueToJSDateValue = (dsValue) => {\n    //{day: currentDate.getDate(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()}\n    return new Date(dsValue.year, dsValue.month-1, dsValue.day)\n}\n\n// преобразование нативной даты JS в значение dateSelector из пакета vk ui\nexport const jSDateValueToDateSelectorValue = (jsDate) => {\n    \n    return {day: jsDate.getDate(), month: jsDate.getMonth()+1, year: jsDate.getFullYear()}\n}\n\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    \n    for (let i = 0; i < slotsNumber; i++){\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\n    }\n    \n    return slots\n}\n\n// создание массива объектов для расписания работы площадки\nexport const timeSlotsForSimpleCollects = (slotsNumber, slotsInHour=timeSlotsInOneHour(), startHour) => {\n    \n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\n    let slots = [] // слоты\n    for (let i = 0; i < slotsNumber; i++)\n    {\n        slots.push({\n            Hours: Math.trunc(i / slotsInHour) + startHour, \n            Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), \n            SlotMinutes: oneSlotMinutes,\n            PricePerSlot: 0,\n            Enabled: true,\n            Selected: false,\n            Rented: false,}\n            )\n    }\n    \n    return slots\n\n}","const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\n\n\n\nconst initState = {\n    menuItems: [{\n        id: 0,\n        name: \"hot\",\n        title: \"Горячее\",\n        position: 0,\n        enabled: true,\n        show: true,\n    },{\n        id: 1,\n        name: \"allTournaments\",\n        title: \"Турниры\",\n        position: 1,\n        enabled: true,\n        show: true,\n    },{\n        id: 2,\n        name: \"profile\",\n        title: \"Профиль\",\n        position: 3,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 3,\n        name: \"tournamentadmin\",\n        title: \"Управление турнирами\",\n        position: 4,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"tournamentitem\",\n        title: \"Турнир\",\n        position: 5,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 3,\n        name: \"teamadmin\",\n        title: \"Управление командами\",\n        position: 6,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 4,\n        name: \"teamitem\",\n        title: \"Команда\",\n        position: 7,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 5,\n        name: \"addcollect\",\n        title: \"Новый сбор\",\n        position: 8,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 6,\n        name: \"viewcollect\",\n        title: \"Сбор\",\n        position: 9,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 7,\n        name: \"viewuser\",\n        title: \"Игрок\",\n        position: 10,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 8,\n        name: \"bidlist\",\n        title: \"Доступно для заявки\",\n        position: 11,\n        enabled: true,\n        show: false,\n    },\n    {\n        id: 9,\n        name: \"collectslist\",\n        title: \"Все сборы\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 10,\n        name: \"collectadmin\",\n        title: \"Сбор\",\n        position: 12,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"notauthorized\",\n        title: \"Не авторизован\",\n        position: 13,\n        enabled: true,\n        show: true,\n    },\n    {\n        id: 11,\n        name: \"matchitem\",\n        title: \"Матч\",\n        position: 14,\n        enabled: true,\n        show: true,\n    },\n    \n],\n    //activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\n    activeItem: {id: 11, name: \"notauthorized\", title: \"Не авторизован\", position: 13, enabled: true, show: true,},\n}\n\n\nlet mainMenuReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\n            \n            return {...state,\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setActiveMenuItem = (menuName) => {\n    \n    return {\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\n        menuName\n    }\n}\n\n\nexport default mainMenuReducer;","import Axios from 'axios'\n\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\"; // тестовый 2\nexport const backserver = \"https://oblakosporta.ru\"; // прод\n//export const backserver = \"https://front.oblakosporta.ru\";\n//export const backserver = \"https://localhost:44325\";  \n//export const backserver = \"https://192.168.56.101:44325\"; // локальный\nexport const URL = backserver + \"/umbraco/api/\";\nexport const authQueryString = window.location.search;\n\n\n\nexport\tconst PostJsonInstance = Axios.create(\n\t\t{\n\t\t\tbaseURL: URL,\n\t\t\ttimeout: 15000,\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"}\n\t\t}\n\t)","import { PostJsonInstance, authQueryString } from './server';\n\nexport let errorObj = (text) => {\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\n}\n\nexport let okObj = (dat) => {\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\n}\n\n\n// export let ApiSendInfo =\n// {\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \n//     system: {},\n//     addRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return false;\n//         }\n//         let currentDT = new Date();\n//         this.requests.push({name, time: currentDT});\n//         return {name, time: currentDT};\n//     },\n//     checkRequest: function(name){\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\n//         if (requestInQueue && requestInQueue.length > 0){\n//             return true;\n//         }\n//         return false;\n//     },\n//     check: function(){\n//         ////debugger\n//         this_.requests = this_.requests ? this_.requests.map(req => {\n//             let now = new Date();\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\n//                 return req;\n//             }\n//         }) : []\n//     },\n// }\n\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\n\nexport const VKAPI = {\n    getUser(id) {\n        debugger\n        return PostJsonInstance.get(\"https://api.vk.com/method/users.get?user_id=\" + id + \"&v=5.52\").then(data => {\ndebugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n        \n    }\n}\n\nexport const CityAPI = {\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}\n\nexport const PlaceAPI = {\n\n    // запрос всех мест\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n\n\n    // запрос места по его Id\n    // placeId - Id места\n    getById(placeId) {\n        let formData = new FormData();\n        formData.append(\"placeid\", placeId);\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n\n\n}\n\nexport const SimplePlaceAPI = {\n\n    // запрос всех мест города по Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        return PostJsonInstance.post(\"SimplePlace/GetSimplePlacesInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    \n\n}\n\nexport const RentAPI = {\n\n    // запрос всех аренд города по Id города\n    // startindex - индекс, с которого начинать ответ\n    // history - запрос истории (true) или актуального (false)\n    getAllRentsInCityByCityUmbracoId(cityId, startindex = 0) {\n        //////debugger\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"Rents/GetRentsInCityByCityId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n        //}\n    },\n\n}\n\nexport const CollectAPI = {\n\n    getAll() {\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"placeid\", placeId);\n\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllInCityByCityId(cityId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityid\", cityId);\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n    \n    \n    addSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/AddCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    editSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/EditCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    delSimpleCollect(userProfileId, simpleCollect) {\n        debugger\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DelCollect\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    registerSimpleMemberToSimpleCollect(userProfileId, simpleCollect) {\n        //simpleCollectUserProfile\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/RegisterMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n    \n    deleteMemberFromSimpleCollect(userProfileId, simpleCollect, simpleMember, reason=\"\") {\n        debugger\n        //simpleCollectUserProfile\n        simpleMember.Comment=reason;\n\n        let userProfile = {\n            UserProfileId: userProfileId\n        }\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"SimpleCollect/DeleteMember\" + authQueryString, JSON.stringify({ simpleCollect: { ...simpleCollect }, userProfile: { ...userProfile }, simpleMember: {...simpleMember} })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // запрос всех сборов в городе по его Id\n    // cityId - Id города\n    // startindex - индекс, с которого начинать ответ\n    getAllSimpleByCityUmbracoId(cityId, startindex = 0) {\n        //debugger\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityId\", cityId);\n        formData.append(\"history\", false);\n        return PostJsonInstance.post(\"SimpleCollect/GetSimpleCollectsInCityByCityId\" + authQueryString, formData).then(data => {\n            //return okObj(data.data);\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n}\n\nexport const TeamAPI = {\n\n    // getAll() {\n    //     return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\n    //         return okObj(data.data);\n    //     })\n    //         .catch(error => {\n    //             return errorObj(error)\n    //         })\n    // },\n\n    // запрос всех сборов в месте по его Id\n    // placeId - Id места\n    // startindex - индекс, с которого начинать ответ\n    getTeamInfoByTeamId(teamId) {\n        let formData = new FormData();\n        formData.append(\"teamid\", teamId);\n\n        return PostJsonInstance.post(\"SimpleTeam/GetById\" + authQueryString, formData).then(data => {\n            //debugger\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const ProfileAPI = {\n    // запрос информации о пользователе\n    getUserProfile(vkUserData) {\n\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\n    getAuthInfo_old(formData) {\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\n            return okObj(data.data);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // регистрация/обновление даты рождения + получение данных о профиле\n    getAuthInfo(vkUser) {\n\n        let [day, month, year] = vkUser.bdate.split('.');\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\n\n        let vkUserData = {\n            'bdate': bDate,\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\n            'first_name': vkUser.first_name,\n            'id': vkUser.id,\n            'last_name': vkUser.last_name,\n            'photo_100': vkUser.photo_100,\n            'photo_200': vkUser.photo_200,\n            'photo_max_orig': vkUser.photo_max_orig,\n            'sex': vkUser.sex,\n            'timezone': vkUser.timezone,\n        }\n\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                return errorObj(error)\n            })\n    },\n\n    // изменение города привязки пользователя\n    setUserProfileCity(userData) {\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    },\n    \n    // сохранение пользователя\n    saveUserProfile(userData) {\n\n        if (userData) {\n            return PostJsonInstance.post(\"Account/UpdateUserProfile\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\n\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    return errorObj(error)\n                })\n        }\n        else {\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\n        }\n    }\n}\n\nexport const CityTournamentAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    // возвращает всех админов города\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    /// запрос групп турнира\n    getTournamentGroups(tournament, startindex) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"tournamentId\", tournament.Id);\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    changeTeamTournamentGroup(team, newgroup, oldgroup,  userprofile){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let newgroupToSend = {\n            Id: newgroup.Id,\n            TournamentId: newgroup.TournamentId,\n        }\n        let oldgroupToSend = {\n            Id: oldgroup.Id,\n            TournamentId: oldgroup.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/SetTeamTournamentGroup\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            newGroup: { ...newgroupToSend }, oldGroup: { ...oldgroupToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    \n    // возвращает заявки по турниру (для админа турнира)\n    getTournamentTeamsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpleTournament/GetTeamsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTournament(tournament, userprofile) {\n        ////debugger\n        \n\n        if (tournament.Id < 0){\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let tournamentToSend = {\n                ...tournament,\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n                Year: tournament.WhenEnd.year,\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\n                    return {\n                        Name: item.Name,\n                        Id: item.Id != undefined ? item.Id : -1,\n                    }\n                })],\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTournament(tournament, userprofile) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    // удаление команды (отклонение заявки от команды) из турнира\n    deleteTeamFromTournamentByTeam(team, tg, userprofile, admintext){\n        //debugger\n        let teamToSend = {\n            Id: team.Id\n        }\n        let tournamentGroupToSend = {\n            Id: tg.Id,\n            TournamentId: tg.TournamentId,\n        }\n//debugger\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeleteTeamFromTournament\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \n            tournamentGroup: { ...tournamentGroupToSend }, userProfile: { ...userprofile }, admintext: admintext })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n    /// удаление группы турнира\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tournamentGroupId,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n   \n    /// добавление группы турнира\n    addTournamentGroup(tournament, userprofile, tGroup) {\n        ////debugger\n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n\n        let tournamentGroup = {\n            Id: tGroup.Id,\n            Name: tGroup.Name,\n        }\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n\n    // AddContact(contact){\n    //     ////debugger\n    //     //return instace.get('/contacts/getcontacts');\n    //     let Contact= contact;\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\n    //         ////debugger\n    //         return x.data;\n    //     }).catch(y => {\n    //         ////debugger\n    //         console.log(y)\n    //     });\n    // },\n}\n\nexport const TeamAdminAPI = {\n    // запрос всех админов города\n    // startindex - индекс, с которого начинать ответ\n    getAll(startindex = 0) {\n        //let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\n        let formData = new FormData();\n        formData.append(\"startindex\", startindex);\n        formData.append(\"adminprofileid\", userProfileId);\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n\n    saveTeam(team, userprofile) {\n        \n        if (team.Id < 0){\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n        else{\n            let teamToSend = {\n                ...team,\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n                Year: team.WhenBorn.year,\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n            }\n\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n                ////debugger\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n            })\n                .catch(error => {\n                    ////debugger\n                    return errorObj(error)\n                })\n        }\n    },\n\n    /// публикация турнира (или снятие с публикации, если publish=false)\n    publishTournament(tournament, userprofile, publish) {\n        \n        let tournamentToSend = {\n            ...tournament,\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\n            Published: publish,\n            Year: tournament.WhenEnd.year,\n            CityId: userprofile.CityUmbracoId,\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    /// удаление турнира (пометка на удаление)\n    deleteTeam(team, userprofile) {\n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\n        }\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n}\n\nexport const BidTeamAPI = {\n    \n    getActualTournaments(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n\n    // возвращает заявки по турниру (для админа турнира)\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n\n    // согласовывает заявку (для админа турнира)\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    \n    // отклоняет заявку (для админа турнира)\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\n        ////debugger \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n   //debugger     \n        bid.AdminTournamentComment = admintext;\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n\n\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        let bid = {\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \n                    When: new Date(),\n                    TournamentGroupId: tournamentgroup.Id,\n                    UserProfileId: userprofile.UserProfileId,\n                    TeamId: team.Id,\n                    Team: null,\n                    Approved: false,\n                    UserProfile: null,\n                    ErrorMessage: \"\",\n                    AdminTournamentComment : \"\",\n                    TournamentGroup: null,\n                }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delBidTeamToTournament(bid, userprofile, team) {\n        ////debugger \n        let teamToSend = {\n            ...team,\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\n            Year: team.WhenBorn.year,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n    \n    /// допуск комады к турниру\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\n        ////debugger \n        let bidToSend = {...bid,\n            AdminTournamentComment: admincomment,\n            Approve: approve,\n        }\n\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\n            ////debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                ////debugger\n                return errorObj(error)\n            })\n    },\n\n}\n\nexport const MatchAPI = {\n    addMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Add2\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    delMatch(matchInfo, userprofile, hours, minutes) {\n        \n        //new Date()\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        return PostJsonInstance.post(\"Match/Del\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                //debugger\n                return errorObj(error)\n            })\n    },\n    \n    getAllMatchesByTournament(tournament, userprofile) {\n        \n        let tournamentToSend = {\n            Id: tournament.Id\n        }\n        //new Date()\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\n        //return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tourn }, userProfile: { ...userprofile } })).then(data => {\n        return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\n            \n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n    getCurrentMatchesByCity(userProfile) {\n        let formData = new FormData();\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\n        return PostJsonInstance.post(\"Match/GetByCity\" + authQueryString, formData).then(data => {\n            //debugger\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n                \n                return errorObj(error)\n            })\n    },\n    \n\n}\n\nexport const TournamentAPI = {\n    getAllTournamentsInCityByCityUmbracoId(cityUmbracoId) {\n        \n        let formData = new FormData();\n        //formData.append(\"startindex\", startindex);\n        formData.append(\"cityumbracoid\", cityUmbracoId);\n        return PostJsonInstance.post(\"SimpleTournament/GetAllCurrentInCity\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n    \n    \n    getTournamentTablesByTournamentId(tournamentId) {\n        \n        let formData = new FormData();\n        formData.append(\"tournamentId\", tournamentId);\n        return PostJsonInstance.post(\"Tables/GetByTournamentId\" + authQueryString, formData).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    }\n}\n\nexport const ServiceAPI = {\n    checkConnection() {\n        \n        return PostJsonInstance.post(\"Service/Connect\" + authQueryString).then(data => {\n\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\n        })\n            .catch(error => {\n\n                return errorObj(error)\n            })\n    },\n}","import {ampluaTypes, users} from './constants/commonConstants'\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\nimport { authQueryString } from './../utils/api/server';\nimport { ServiceAPI, errorObj } from './../utils/api/api.js'\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst SYSTEM_SET_LOADING = \"SYSTEM_SET_LOADING\";\nconst SYSTEM_CHECK_LOADING = \"SYSTEM_CHECK_LOADING\";\nconst SYSTEM_SET_CONNECTED = \"SYSTEM_SET_CONNECTED\";\nconst SYSTEM_SET_DISCONNECTED = \"SYSTEM_SET_DISCONNECTED\";\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\nconst SYSTEM_SET_CURRENT_MODAL_WINDOW = \"SYSTEM_SET_CURRENT_MODAL_WINDOW\";\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\n\n\nconst initState = {\n    currentMenu: {},\n    Connected: false,\n    history: [\"hot\"],\n    GlobalPopout: false,\n    CurrentModalWindow: null,\n    //ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\n    ErrorObject: \"\",\n    ShowAdminTourneyTab: false,\n    ShowAdminTeamTab: true,\n    Loading: true,\n    CheckLoading: new Date(),\n     // level \n\n}\n\n\nexport let systemReducer = (state = initState, action) => \n{\n    \n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        case SYSTEM_PUSH_TO_HISTORY: {\n            return {...state,\n                history: [...state.history, action.item]\n            };\n        }\n        case SYSTEM_CHECK_LOADING: {\n            return {...state,\n                CheckLoading: new Date(),\n            };\n        }\n        case SYSTEM_SET_CONNECTED: {\n            \n            return {...state,\n                Connected: true,\n            };\n        }\n        case SYSTEM_SET_DISCONNECTED: {\n            \n            return {...state,\n                Connected: false,\n            };\n        }\n        case SYSTEM_SET_GLOBAL_POPOUT: {\n            return {...state,\n                GlobalPopout: action.on,\n            };\n        }\n        case SYSTEM_SET_CURRENT_MODAL_WINDOW: {\n            return {...state,\n                CurrentModalWindow: action.modal,\n            };\n        }\n        case SYSTEM_SET_LOADING: {\n            return {...state,\n                Loading: action.loading,\n                GlobalPopout: action.loading,\n            };\n        }\n        case SYSTEM_SET_ERROR_MESSAGE: {\n            \n            return {...state,\n                ErrorObject: {...action.errorMessage},\n                // че-то ошибочки начинают какие-то левые вылезать, если делать все как тут нужно\n                // ErrorObject: {...state.ErrorObject,\n                //     message: action.errorMessage,\n                //     resultcode: -1, \n                //     result: \"\",\n                // }\n            };\n        }\n        case SYSTEM_RESET_ERROR: {\n            \n            return {...state,\n                ErrorObject: {...initState.ErrorObject},\n            };\n        }\n        case SYSTEM_POP_FROM_HISTORY: {\n            \n            return {...state,\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\n            };\n        }\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\n            \n            return {...state,\n                ShowAdminTourneyTab: action.showAdminTourneyTab\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\nexport const setLoading = (loading) => {\n    return {\n        type: SYSTEM_SET_LOADING,\n        loading\n    }\n}\n\nexport const updateLoading = () => {\n    return {\n        type: SYSTEM_CHECK_LOADING\n    }\n}\n\nexport const setConnected = () => {\n    return {\n        type: SYSTEM_SET_CONNECTED\n    }\n}\n\nexport const setDisconnected = () => {\n    return {\n        type: SYSTEM_SET_DISCONNECTED\n    }\n}\n\nexport const pushToHistory = (val) => {\n    return {\n        type: SYSTEM_PUSH_TO_HISTORY,\n        item: val\n    }\n}\n\nexport const setShowAdminTourneyTab = (val) => {\n    return {\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\n        showAdminTourneyTab: val\n    }\n}\n\nexport const popFromHistory = (val) => {\n    return {\n        type: SYSTEM_POP_FROM_HISTORY,\n        item: val\n    }\n}\n\nexport const setGlobalPopout = (on) => {\n    return {\n        type: SYSTEM_SET_GLOBAL_POPOUT,\n        on\n    }\n}\n\nexport const setCurrentModalWindow = (modal) => {\n    return {\n        type: SYSTEM_SET_CURRENT_MODAL_WINDOW,\n        modal\n    }\n}\n\nexport const setErrorMessage = (errorMessage) => {\n    return {\n        type: SYSTEM_SET_ERROR_MESSAGE,\n        errorMessage\n    }\n}\n\nexport const resetError = () => {\n    return {\n        type: SYSTEM_RESET_ERROR\n    }\n}\n\n// export const setLastFromHistoryMenuItem = (val) => {\n//     return {\n//         type: POP_FROM_HISTORY,\n//         item: val\n//     }\n// }\n\nexport const goToPanel = (nextPanel, back) => {\n    return (dispatch, getState) => {\n        \n        if (back){\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\n            dispatch(setActiveMenuItem(preLast));\n            dispatch(popFromHistory(nextPanel));\n        }\n        else{\n            dispatch(pushToHistory(nextPanel));\n            dispatch(setActiveMenuItem(nextPanel));\n        }\n        \n    }\n}\n\n\n// проверка связи с сервисом\nexport const checkConnection = () => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n        ServiceAPI.checkConnection()\n                .then(pl => {\n                    \n                    if (pl && pl.result == \"Ok\") {\n                        dispatch(setConnected());\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при соединении с сервисом\")))\n                        dispatch(setDisconnected());\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Ошибка запуска приложения\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\nexport default systemReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CollectAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\n\nconst COLLECTS_SET_ALL_SIMPLE_COLLECTS = \"COLLECTS_SET_ALL_SIMPLE_COLLECTS\";\nconst COLLECTS_SELECT_SIMPLE_COLLECT = \"COLLECTS_SELECT_SIMPLE_COLLECT\";\nconst COLLECTS_SET_COLLECT_ITEM_MODE = \"COLLECTS_SET_COLLECT_ITEM_MODE\";\nconst COLLECTS_DEL_SIMPLE_COLLECT = \"COLLECTS_DEL_SIMPLE_COLLECT\";\nconst COLLECTS_ADD_SIMPLE_COLLECT = \"COLLECTS_ADD_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SIMPLE_COLLECT = \"COLLECTS_SET_SIMPLE_COLLECT\";\nconst COLLECTS_SET_SELECTED_COLLECT_MEMBERS = \"COLLECTS_SET_SELECTED_COLLECT_MEMBERS\";\nconst COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS = \"COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS\";\nconst COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT = \"COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\n\nconst initState = {\n    collects: [],\n    selected: {},\n    mode: \"view\",\n}\n\n\nlet collectReducer = (state = initState, action) => {\n    switch (action.type) {\n        case COLLECTS_SET_ALL_SIMPLE_COLLECTS: {\n            return {\n                ...state,\n                collects: [...action.simplecollects],\n            };\n        }\n        case COLLECTS_SELECT_SIMPLE_COLLECT: {\n            return{\n                ...state,\n                selected: action.simplecollect,\n            }\n        }\n        case COLLECTS_SET_COLLECT_ITEM_MODE: {\n            return{\n                ...state,\n                mode: action.mode,\n            }\n        }\n        case COLLECTS_SET_SELECTED_COLLECT_MEMBERS: {\n            return{\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Members: [...action.members],\n                },\n            }\n        }\n        case COLLECTS_ADD_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects, action.collect],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_SET_SIMPLE_COLLECT: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.map(col => {\n                    \n                    if (col.Id == action.collect.Id)\n                    {\n                        col = {...action.collect}\n                    }\n                    return col\n                })],\n                selected: {...action.collect},\n            }\n        }\n        case COLLECTS_DEL_SIMPLE_COLLECT: {\n            let res = {\n                ...state,\n                collects: [...state.collects.filter(col => col.Id != action.collect.Id) ],\n                selected: {...state.selected,\n                    Published: false,\n                    Deleted: true,\n            }\n            }\n            return res;\n        }\n        case COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS: {\n            \n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members.filter(m => m.Id != action.member.Id)],\n                },\n            }\n        }\n        case COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT: {\n            debugger\n            return{\n                ...state,\n                collects: [...state.collects.filter(m => m.Id != state.selected.Id),\n                    {...state.selected,\n                        Members: [...state.selected.Members, action.member],\n                    }\n                ],\n                selected: {\n                    ...state.selected,\n                    Members: [...state.selected.Members, action.member],\n                },\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllSimpleCollects = (simplecollects) => {\n    return {\n        type: COLLECTS_SET_ALL_SIMPLE_COLLECTS,\n        simplecollects\n    }\n}\n\nexport const deleteMemberFromSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_DELETE_MEMBER_FROM_SIMPLE_COLLECTS,\n        member\n    }\n}\n\nexport const addMemberToSelectedSimpleCollect = (member) => {\n    return {\n        type: COLLECTS_ADD_MEMBER_TO_SELECTED_SIMPLE_COLLECT,\n        member\n    }\n}\n\nexport const selectSimpleCollect = (simplecollect) => {\n    return {\n        type: COLLECTS_SELECT_SIMPLE_COLLECT,\n        simplecollect\n    }\n}\n\nexport const setCollectItemMode = (mode) => {\n    return {\n        type: COLLECTS_SET_COLLECT_ITEM_MODE,\n        mode\n    }\n}\n\nexport const delSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_DEL_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const addSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_ADD_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSimpleCollect = (collect) => {\n    return {\n        type: COLLECTS_SET_SIMPLE_COLLECT,\n        collect\n    }\n}\n\nexport const setSelectedMembers = (members) => {\n    return {\n        type: COLLECTS_SET_SELECTED_COLLECT_MEMBERS,\n        members\n    }\n}\n\n\n\n\n// возвращает актуальные простые сборы города\nexport const getAllSimpleCollectsInCityByCityUmbracoId = (cityId = -1, userProfile = null) => {\n    return dispatch => {\n        if (cityId != -1) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    CollectAPI.getAllSimpleByCityUmbracoId(cityId)\n                        .then(pl => {\n                            //debugger\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setAllSimpleCollects(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные CollectAPI.getAllSimpleByCityUmbracoId\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отказ участника сбора\nexport const DeleteMemberFromCollect = (userProfileId = -1, collect = null, simpleMember=null, reason = \"\") => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null) &&  (simpleMember != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.deleteMemberFromSimpleCollect(userProfileId, collect, simpleMember, reason)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(deleteMemberFromSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.deleteMemberFromSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавление сбора\nexport const AddSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.addSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(addSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// изменение сбора\nexport const EditSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.editSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                \n                                if (pl && pl.data) {\n                                    \n                                    dispatch(setSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// отмена сбора\nexport const DelSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.delSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n                                    dispatch(delSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.delSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// регистрация участника на сбор\nexport const registerMemberToSimpleCollect = (userProfileId = -1, collect = null) => {\n    return dispatch => {\n        if ((userProfileId != -1) && (collect != null))\n            {\n                if (authQueryString && authQueryString.length > 0)\n                {\n                        CollectAPI.registerSimpleMemberToSimpleCollect(userProfileId, collect)\n                            .then(pl => {\n                                //debugger\n                                if (pl && pl.data) {\n\n                                    dispatch(addMemberToSelectedSimpleCollect(pl.data));\n                                    dispatch((pl.data));\n                                    dispatch(setGlobalPopout(false))\n                                }\n                                else {\n                                    dispatch(setErrorMessage(\"Не получены данные CollectAPI.addSimpleCollect\"))\n                                    dispatch(setGlobalPopout(false))\n                                }\n                            })\n                            .catch(error => {\n\n                                dispatch(setErrorMessage(error))\n                                dispatch(setGlobalPopout(false))\n                            })\n                }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default collectReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { rents } from './constants/commonConstants'\nimport { RentAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { datesWithoutTimeIsSame } from './../utils/convertors/dateUtils'\n\nconst demoRents = rents;\n\nconst RENTS_SET_RENTS = \"RENTS_SET_RENTS\";\nconst RENTS_SET_SELECTED_RENT = \"RENTS_SET_SELECTED_RENT\";\n\n\n\nconst initState = {\n    rents: [],\n    selectedRent: {},\n    selectedDayRents: [],\n}\n\n\nlet rentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case RENTS_SET_RENTS: {\n            return {\n                ...state,\n                rents: [...action.rents],\n            };\n        }\n        case RENTS_SET_SELECTED_RENT: {\n            return {\n                ...state,\n                selectedDayRents: [...state.rents.filter(r => datesWithoutTimeIsSame(new Date(r.From),action.rentDate) && (r.SimplePlaceId == action.simplePlaceId))],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setRents = (rents) => {\n    return {\n        type: RENTS_SET_RENTS,\n        rents\n    }\n}\n\nexport const setSelectedRent = (simplePlaceId, rentDate) => {\n    return {\n        type: RENTS_SET_SELECTED_RENT,\n        simplePlaceId,\n        rentDate\n    }\n}\n\n\n// все аренды с сервера по UmbracoId города\nexport const getAllRentsInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            RentAPI.getAllRentsInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setRents(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setRents(demoRents))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setRents(demoRents))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default rentReducer;","import { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { simplePlaces } from './constants/commonConstants'\nimport { SimplePlaceAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\n\nconst demoPlaces = simplePlaces;\n\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\nconst PLACES_SET_SELECTED_PLACE = \"PLACES_SET_SELECTED_PLACE\";\n\n\n\nconst initState = {\n    places: [],\n    selectedPlace: {},\n}\n\n\nlet simplePlaceReducer = (state = initState, action) => {\n    switch (action.type) {\n        case PLACES_SET_ALL_PLACES: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        case PLACES_SET_SELECTED_PLACE: {\n            return {\n                ...state,\n                selectedPlace: state.places.find(x => x.Id == action.placeId),\n            };\n        }\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\n            return {\n                ...state,\n                places: [...action.places],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setPlaces = (places) => {\n    return {\n        type: PLACES_SET_ALL_PLACES,\n        places\n    }\n}\n\nexport const setSelectedSimplePlace = (placeId) => {\n    return {\n        type: PLACES_SET_SELECTED_PLACE,\n        placeId\n    }\n}\n\n\nexport const setPlace = (placeId, placeData) => {\n    return {\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\n        placeId,\n        placeData\n    }\n}\n\n\n// все места с сервера по UmbracoId города\nexport const getAllSimplePlacesInCityByCityId = (cityId, startindex = 0) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            SimplePlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setPlaces(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setPlaces(demoPlaces))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setPlaces(demoPlaces))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default simplePlaceReducer;","import React, { Component } from 'react'\nimport { Button } from '@vkontakte/vkui'\nimport { withNotify } from '../HOCs/withNotify'\n\nconst ButtonWithNotify = (props) => {\n  //debugger\n \n    return (\n        <Button Accept={null} Close={props.Close} Message={props.Message} {...props}></Button>\n        \n    )\n}\n\nexport default withNotify(ButtonWithNotify)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel, setCurrentModalWindow} from '../../../../store/systemReducer'\nimport ModalCommon from '../../../Modals/ModalCommon/ModalCommon'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withNotify = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel, setCurrentModalWindow\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n            this.AcceptAndClose = this.AcceptAndClose.bind(this);\n\n        }\n\n        AcceptAndClose(){\n            this.props.Yes();\n            this.props.setCurrentModalWindow(null);\n        }\n\n        clickEvent(evt){\n            // тут выводим окошко с вопросом (уверен?), если да, то делаем действие, переданное в хэндлере\n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n                \n            this.props.setCurrentModalWindow(<ModalCommon \n                modalName=\"AreYouSure\" \n                //Message={this.props.Message} \n                data={{ message: this.props.Message }}\n                Close={() => this.props.setCurrentModalWindow(null)}\n                Accept={this.AcceptAndClose}\n                ></ModalCommon>);\n            //this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea,\n    File, CellButton, Button, Header, List, Cell, Select, CustomSelectOption, IconButton,\n    CardGrid, Card, SplitLayout, SplitCol, Div, Radio, RangeSlider, useAdaptivity, VKCOM\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from './../../../../../store/dataTypes/common.js'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport bridge from '@vkontakte/vk-bridge';\nimport {\n    dateToString, dateTimeToTimeString, datesWithoutTimeIsSame, timeSlotsForSimpleCollects, timeToString,\n    dateSelectorValueToJSDateValue, jSDateValueToDateSelectorValue, timeSlotsForCollects, addToTime\n} from './../../../../../utils/convertors/dateUtils';\nimport {\n    DeleteMemberFromCollect, AddSimpleCollect, setCollectItemMode, EditSimpleCollect,\n    registerMemberToSimpleCollect, DelSimpleCollect, setSelectedMembers\n} from './../../../../../store/collectReducer';\nimport { setSelectedRent } from './../../../../../store/rentReducer';\nimport { setSelectedSimplePlace } from './../../../../../store/simplePlaceReducer';\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport { myProfile } from '../../../../../store/constants/commonConstants';\nimport ButtonWithNotify from '../../../Common/WithNotify/ButtonWithNotify';\n\n\n// включить защиту от создания сбора на прошедшее время! \n\n\nconst SimpleCollectItem = (props) => {\n    let currentDate = new Date();\n    let maxCollectDate = new Date();\n    let workoutSelector = \"\";\n    let totalCost = 0;\n    let ranges = \"\";\n\n    let minutesOneSlot = 30; // количество минут в таймслоте\n    let minTimeSlotToRent = 2; // минимальный таймслот для аренды (в таймслотах, а не в минутах меряем)\n\n    let adapt = useAdaptivity();\n    let workoutColNumber = adapt.viewWidth+1; // количество столбцов. должно отличаться на разных разрешениях экрана\n    //adapt.viewWidth\n\n    let [acceptBeMember, setAcceptBeMember] = useState(false)\n    let [showPanelBeMember, setShowPanelBeMember] = useState(false)\n    let [showCancelMemberForm, setShowCancelMemberForm] = useState(false)\n    let [cancelReason, setCancelReason] = useState(\"\")\n    let [details, setDetails] = useState(\"\")\n    let [collectType, setCollectType] = useState(3)\n    let [needMembers, setNeedMembers] = useState(10)\n    let [selectedDate, setSelectedDate] = useState(jSDateValueToDateSelectorValue(currentDate))\n    let [costMembers, setCostMembers] = useState(200)\n    let [costAll, setCostAll] = useState(2000)\n    let [plus, setPlus] = useState(costAll - (costMembers * needMembers))\n    let [selectedSlots, setSelectedSlots] = useState(new Array()) //  тут отдельные выбранные ячейки\n    let selectedTimeRanges = new Array() // тут сгруппированные выбранные ячейки отдельными диапазонами\n\n\n    useEffect(() => {\n        if (props.collect.selected && props.collect.selected.Members && props.collect.selected.Members != undefined && props.collect.selected.Members.length > 0) {\n\n            let vkids = \"\";\n            let memberPhotos = props.collect.selected.Members.map(m => {\n                vkids += m.UserProfile.UserVkId.slice(2) + \",\"\n                return { id: m.UserProfile.UserVkId.slice(2), photo: \"\" }\n            });\n\n            //\n            const params = bridge.send(\"VKWebAppGetAuthToken\", { \"app_id\": 7161115, \"scope\": \"\" }).then(res => {\n                bridge.send(\"VKWebAppCallAPIMethod\",\n                    {\n                        \"method\": \"users.get\",\n                        \"request_id\": \"userphotorequest\",\n                        \"params\": {\n                            \"user_ids\": vkids,\n                            \"fields\": \"photo_100\",\n                            \"v\": \"5.131\",\n                            \"access_token\": res.access_token\n                        }\n                    })\n                    .then(us => {\n\n\n\n                        let members = props.collect.selected.Members.map(m => {\n                            let photo = us.response.filter(p => ((\"id\" + p.id) == m.UserProfile.UserVkId));\n                            if (photo && photo[0] != undefined) {\n                                m.UserProfile.PhotoPath = photo[0].photo_100;\n                            }\n                            return m;\n\n                        })\n\n                        props.setSelectedMembers(members);\n                        //m.UserProfile.PhotoPath = us.photo_100;\n                        //props.setSelectedUser(us);\n                    })\n\n                    // bridge.send(\"VKWebAppOpenPayForm\", {\n                    //     \"app_id\": 7161115, \n                    //     \"action\": \"pay-to-service\", \n                    //     \"params\": {\n                    //         \"amount\": 1.5,\n                    //         \"data\": {\n                    //                 \"currency\": \"RUB\",\n                    //                 \"merchant_data\": \"eyJvcmRlcl9pZCI6IjI1NTMxIiwidHMiOiIxNTM5MzI5NzcwIiwiYW1vdW50IjoxLjUsImN1cnJlbmN5IjoiUlVCIn0=\",\n                    //                 \"merchant_sign\": \"63d5dce9d2c9d29198ba12ba3f8e270e6606a221\",\n                    //                 \"order_id\": \"25531\",\n                    //                 \"ts\": \"1539329770\"\n                    //                 },\n                    //         \"description\": \"Test Payment\",\n                    //         \"action\": \"pay-to-service\",\n                    //         \"merchant_id\": 617001,\n                    //                 \"version\": 2,\n                    //         \"sign\": res.access_token\n                    //     }\n                    // });\n            })\n\n            \n        }\n\n    }, props.collect.selected.Id)\n\n    //debugger\n    let youAreMember = (props.collect.selected.Members && props.collect.selected.Members.length > 0)\n        ?\n        (props.collect.selected.Members.filter(m => m.UserProfileId == props.myProfile.UserProfileId).length > 0 ? true : false)\n        :\n        false;\n    let youAreOrganizer = (props.collect.selected && props.collect.selected != undefined && props.myProfile && props.myProfile != undefined) ?\n        props.collect.selected.CreatorId == props.myProfile.UserProfileId :\n        false;\n\n    //let [youAreMember, setYouAreMember] = useState(yam);\n\n    let simplePlaces = props.simplePlace.places;\n\n    let changePlace = (e) => {\n        props.setSelectedSimplePlace(+e.currentTarget.value);\n        props.setSelectedRent(+e.currentTarget.value, dateSelectorValueToJSDateValue(selectedDate));\n        setSelectedSlots([])\n    }\n\n    let changeDate = (value) => {\n        setSelectedDate(value);\n        setSelectedSlots([])\n\n    }\n\n    let changeCollectType = (type) => {\n        setCollectType(type)\n    }\n\n    let selectSlot = (value) => {\n        // взять минимальное количество слотов и сделать проверку на послеющие ячейки\n        // и это же самое нужно сделать на сервере! чтобы исключить двойную аренду\n        // проверить следующий слот (не конец смены, следующий не арендован, не перерыв)\n        let tmpSelectedSlot = [];\n\n        // выявили выбранное время\n        let res = selectedSlots.filter(ss => (ss.Hours == value.Hours && ss.Minutes == value.Minutes));\n        if (res.length != 0)\n            tmpSelectedSlot = selectedSlots.filter(ss => (ss.Hours != value.Hours || ss.Minutes != value.Minutes));\n        else\n            tmpSelectedSlot = [...selectedSlots, value];\n\n        // сортировка\n        tmpSelectedSlot.sort((a, b) => {\n            let i1 = a.Hours * (60 / minutesOneSlot * minutesOneSlot) + a.Minutes;\n            let i2 = b.Hours * (60 / minutesOneSlot * minutesOneSlot) + b.Minutes;\n\n            return (i1 - i2)\n        })\n\n\n\n        setSelectedSlots(tmpSelectedSlot);\n    }\n\n    let gotoCollect = (value) => {\n\n\n    }\n\n    let gotoProfile = (profileId) => {\n        window.open(\"https://vk.com/\" + profileId, '_blank');\n    }\n\n\n    const CancelMember = () => {\n        let member = {\n            UserProfileId: props.myProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const deleteMember = (memberUserProfile) => {\n        \n        let member = {\n            UserProfileId: memberUserProfile.UserProfileId,\n            SimpleCollectId: props.collect.selected.Id,\n        }\n        props.DeleteMemberFromCollect(props.myProfile.UserProfileId, props.collect.selected, member, cancelReason);\n        setAcceptBeMember(false);\n        setShowPanelBeMember(false);\n        setShowCancelMemberForm(false);\n        setCancelReason(\"Удален организатором\");\n        youAreMember = false;\n        //setYouAreMember(false);\n    }\n\n    const AcceptRights = () => {\n        setAcceptBeMember(!acceptBeMember);\n    }\n\n    const calculateCostAll = (costall) => {\n        setCostAll(costall);\n        let costMem = Math.round(costall / needMembers);\n        setCostMembers(costMem);\n\n        setPlus((costMem * needMembers) - costall);\n    }\n\n    const calculateNeedMembers = (need) => {\n\n        \n            setNeedMembers(need);\n            setCostMembers(Math.round(costAll / need));\n            setPlus((Math.round(costAll / need) * need) - costAll);\n        \n    }\n\n    const calculateCostMembers = (membercost) => {\n        setCostMembers(membercost);\n        setPlus((membercost * needMembers) - costAll);\n    }\n\n    const registerToCollect = () => {\n\n        props.registerMemberToSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const createCollect = () => {\n\n        let collect = {\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: new Date(\n                selectedDate.year,\n                selectedDate.month - 1,\n                selectedDate.day,\n                selectedTimeRanges[0].Hours + 3, // прибавил 3 часа (разница от UTC)\n                selectedTimeRanges[0].Minutes),\n            DurationMinutes: selectedTimeRanges[0].SlotMinutes,\n            Details: details,\n            FullPrice: costAll,\n            Comment: \"\",\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.selectedPlace.Id,\n            CreatorId: props.myProfile.UserProfileId,\n        }\n        props.AddSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const saveChanges = () => {\n\n        let collect = {\n            Id: props.collect.selected.Id,\n            Name: props.selectedPlace.Name,\n            // +\"_\"+selectedDate.year.toString()+\".\"+selectedDate.month.toString()+\".\"+selectedDate.day.toString()+\"_\"+props.myProfile.UserProfileId+\"_\"+ new Date().getMinutes().toString()+\"-\"+ new Date().getSeconds().toString(),\n            When: props.collect.selected.When,\n            DurationMinutes: props.collect.selected.DurationMinutes,\n            Details: details,\n            FullPrice: props.collect.selected.FullPrice,\n            Comment: props.collect.selected.Comment,\n            Cost: costMembers /*selectedTimeRanges[0].PricePerSlot*/,\n            NeedMembers: +needMembers,\n            SimplePlaceId: props.collect.selected.SimplePlaceId,\n            CreatorId: props.collect.selected.CreatorId,\n        }\n        props.EditSimpleCollect(props.myProfile.UserProfileId, collect)\n        props.setCollectItemMode(\"view\");\n    }\n\n    const cancelCollect = () => {\n        props.DelSimpleCollect(props.myProfile.UserProfileId, props.collect.selected);\n    }\n\n    const changeCollect = () => {\n\n        setDetails(props.collect.selected.Details);\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"edit\");\n    }\n\n    const cancelSave = () => {\n\n        setDetails(props.collect.selected.Details ? props.collect.selected.Details : \"\");\n        setCostAll(props.collect.selected.FullPrice);\n        setNeedMembers(props.collect.selected.NeedMembers);\n        setCostMembers(props.collect.selected.Cost);\n\n        setPlus((props.collect.selected.Cost * props.collect.selected.NeedMembers) - props.collect.selected.FullPrice);\n\n        props.setCollectItemMode(\"view\");\n    }\n\n    // строим контрол выбора времени\n    // если место и время выборано\n    if ((props.selectedPlace) && (props.selectedPlace.Worktime != null) && (props.selectedPlace.Worktime != undefined)) {\n        //debugger\n        // собираем все слоты из расписания, которые совпадают с выбранной датой\n        let worktimeSlots = props.selectedPlace.Worktime.filter(wt => {\n            //selectedDate, wt, rents\n            let selectedDT = new Date(dateSelectorValueToJSDateValue(selectedDate)) // selected in box\n            let from = new Date(wt.FromTime) // current item date and start time\n            let to = new Date(wt.ToTime) // current item date and end time\n            if (datesWithoutTimeIsSame(from, selectedDT))\n                return true;\n            else\n                return false;\n        }).sort((a, b) => new Date(a.FromTime).valueOf() - new Date(b.FromTime).valueOf())\n\n        // если выборка дала данные (слоты)\n        if (worktimeSlots && worktimeSlots != undefined && worktimeSlots.length > 0 && worktimeSlots[0] != undefined) {\n            // если верменной слот найден, производим с ним модификации по формированию и покраске кнопок, а также назначения им действий\n\n            let fromTmp = new Date(worktimeSlots[0].FromTime); // берем время ОТ первого слота\n            let toTmp = new Date(worktimeSlots[worktimeSlots.length - 1].ToTime);  // берем время ДО последнего слота\n            let slotsNumber = (toTmp.valueOf() - fromTmp.valueOf()) / (minutesOneSlot * 60 * 1000); // общее количество слотов\n            let numberOfCols = slotsNumber < workoutColNumber ? slotsNumber : workoutColNumber; // количество колонок\n            let numberOfRows = Math.trunc(slotsNumber / numberOfCols) == slotsNumber / numberOfCols ? slotsNumber / numberOfCols : Math.trunc(slotsNumber / numberOfCols) + 1; // количество строк\n\n            let slots = timeSlotsForSimpleCollects(slotsNumber, 60 / minutesOneSlot, fromTmp.getHours()); // получили общее время работы с разбивкой по диапазонам (обычно по 30 минут на каждую ячейку)\n\n            // бежим по массиву слотов расписаний\n            slots = slots.map((slot, slotCurrentIndex) => {\n\n                \n                worktimeSlots.forEach(worktimeSlot => {\n                    \n                    let curentWorktimeSlotFromTime = new Date(worktimeSlot.FromTime);\n                    let curentWorktimeSlotToTime = new Date(worktimeSlot.ToTime);\n                    let currentSlotTime = new Date(\n                        curentWorktimeSlotFromTime.getFullYear(), \n                        curentWorktimeSlotFromTime.getMonth(), \n                        curentWorktimeSlotFromTime.getDate(), \n                        slot.Hours, slot.Minutes);\n\n\n                    if ((worktimeSlot != null) \n                        && (worktimeSlot != undefined) \n                        && (curentWorktimeSlotFromTime <= currentSlotTime && curentWorktimeSlotToTime > currentSlotTime)\n                        ) {\n                        // расставляем перерывы. \n                        // пробегаем по массиву перерывов, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как недоступный\n                        if (worktimeSlot.Breaks && worktimeSlot.Breaks.length > 0) {\n                            worktimeSlot.Breaks.forEach(brek => {\n\n                                let from = new Date(brek.FromTime);\n                                let to = new Date(brek.ToTime);\n\n                                let brekTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= brekTime && (to > brekTime)) {\n                                    slot.Enabled = false;\n                                }\n                            });\n                        }\n\n                        // расставляем аренды\n                        // пробегаем по массиву арендованного времени, сверяя время с текущим слотом. если совпало, значит маркируем в слот-массиве этот слот как занятый\n                        props.rent.selectedDayRents.forEach(rnt => {\n\n                            let from = new Date(rnt.From);\n                            let to = addToTime(from, 0, rnt.DurationMinutes);\n\n                            let rentTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n                            \n\n                            if (from <= rentTime && (to > rentTime)) {\n\n                                if (rnt.Published)\n                                    slot.Rented = true;\n                            }\n                        });\n\n                        // расставляем выбранные слоты\n                        if (selectedSlots && Array.isArray(selectedSlots) && selectedSlots.length > 0) {\n\n                            selectedSlots.forEach(slt => {\n\n                                let from = new Date(`01/01/2000 ${slt.Hours}:${slt.Minutes}`);\n                                let to = addToTime(from, 0, minutesOneSlot);\n\n                                let selectedTime = new Date(from.getFullYear(), from.getMonth(), from.getDate(), slot.Hours, slot.Minutes);\n\n                                if (from <= selectedTime && (to > selectedTime)) {\n\n                                    slt.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.PricePerSlot = worktimeSlot.CostPerHour / (60 / minutesOneSlot);\n                                    slot.Selected = true;\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n                    }\n                });\n\n                return slot;\n            }\n            )\n\n\n            // маркируем доступное и недоступное время и создаем результирующий массив кнопок\n            let iButtons = slots.map(x => {\n                if (x.Enabled) {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button onClick={() => gotoCollect(x)} mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        if (x.Selected) {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"primary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                        else {\n                            return <Div>\n                                <Button onClick={() => selectSlot(x)} mode=\"commerce\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                            </Div>\n                        }\n                    }\n\n                }\n                else {\n                    if (x.Rented) {\n                        return <Div>\n                            <Button mode=\"destructive\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                    else {\n                        return <Div>\n                            <Button mode=\"secondary\">{`${x.Hours <= 9 ? \"0\" + x.Hours.toString() : x.Hours.toString()}:${x.Minutes <= 9 ? \"0\" + x.Minutes.toString() : x.Minutes.toString()}`}</Button>\n                        </Div>\n                    }\n                }\n            })\n\n            //selectedTimeRanges = new Array()\n            // вычисляем выбранные временные промежутки и выводим их в список\n            for (let i = 0; i < selectedSlots.length; i++) {\n                if (selectedSlots[i - 1] != null && selectedSlots[i - 1] != undefined) {\n\n                    let i1 = selectedSlots[i].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i].Minutes;\n                    let i2 = selectedSlots[i - 1].Hours * (60 / minutesOneSlot * minutesOneSlot) + selectedSlots[i - 1].Minutes;\n\n                    if ((i1 - i2) <= minutesOneSlot) {\n                        selectedTimeRanges[selectedTimeRanges.length - 1].SlotMinutes += selectedSlots[i].SlotMinutes;\n                        selectedTimeRanges[selectedTimeRanges.length - 1].PricePerSlot += selectedSlots[i].PricePerSlot;\n                    }\n                    else {\n                        selectedTimeRanges.push(\n                            {\n                                Hours: selectedSlots[i].Hours,\n                                Minutes: selectedSlots[i].Minutes,\n                                SlotMinutes: selectedSlots[i].SlotMinutes,\n                                Enabled: selectedSlots[i].Enabled,\n                                Selected: selectedSlots[i].Selected,\n                                Rented: selectedSlots[i].Rented,\n                                PricePerSlot: selectedSlots[i].PricePerSlot,\n                            }\n                        )\n                    }\n                }\n                else {\n\n                    selectedTimeRanges.push(\n                        {\n                            Hours: selectedSlots[i].Hours,\n                            Minutes: selectedSlots[i].Minutes,\n                            SlotMinutes: selectedSlots[i].SlotMinutes,\n                            Enabled: selectedSlots[i].Enabled,\n                            Selected: selectedSlots[i].Selected,\n                            Rented: selectedSlots[i].Rented,\n                            PricePerSlot: selectedSlots[i].PricePerSlot,\n                        }\n                    )\n                }\n\n            }\n\n\n            // если изменилась цена, перезапишем ее в состоянии\n            totalCost = selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0);\n            if (totalCost != costAll)\n                calculateCostAll(selectedTimeRanges.reduce((acc, cur) => acc += cur.PricePerSlot, 0))\n\n            let splitCols = []\n\n            // разбиваем кнопки по колонкам для наиболее удобного отображения \n            for (let i = 0; i < numberOfCols; i++)//4\n            {\n                let sCol = []\n                for (let j = 0; j < numberOfRows; j++)//5\n                {\n                    sCol.push(iButtons[i * numberOfRows + j])\n                }\n                splitCols.push(<SplitCol width=\"25%\">{sCol}</SplitCol>)\n            }\n\n            ranges = (selectedTimeRanges && selectedTimeRanges.length > 0) ? selectedTimeRanges.map(tr => {\n                let until = addToTime(new Date(`01/01/2000 ${tr.Hours}:${tr.Minutes}`), 0, tr.SlotMinutes);\n                return <InfoRow>с {timeToString(tr.Hours, tr.Minutes)} до {timeToString(until.getHours(), until.getMinutes())}  ({tr.PricePerSlot} руб.) </InfoRow>\n\n\n            }) :\n                \"Время не выбрано\"\n\n\n            // записываем полученную иерархию контролов в единый селектор\n            workoutSelector =\n                <SplitLayout>\n                    {splitCols}\n                </SplitLayout>\n\n        }\n\n\n    }\n    else\n        workoutSelector = <InfoRow>Расписания нет</InfoRow>\n\n\n\n\n\n\n    switch (props.collect.mode) {\n        case \"view\": {\n            if (props.collect.selected.Deleted != undefined && props.collect.selected.Deleted == true) {\n                return (\n                    <>\n                        <FormItem>\n                            <InfoRow><strong>Этот сбор был отменен</strong></InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Дата и время\">\n                            <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Место\">\n                            <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                        </FormItem>\n                        <FormItem top=\"Информация\" disabled>\n                            <InfoRow>{props.collect.selected.Details}</InfoRow>\n                        </FormItem>\n                    </>\n                )\n            }\n            else {\n                return (\n                    <>\n                        {props.collect.selected && props.collect.selected != undefined ?\n                            <>\n\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Дата и время\">\n                                    <InfoRow>{props.collect.selected.When && props.collect.selected.When != undefined ? dateToString(props.collect.selected.When) + \" в \" : \" \"}\n                                        {props.collect.selected.When && props.collect.selected.When != undefined ? dateTimeToTimeString(props.collect.selected.When) : \" \"}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Место\">\n                                    <RichCell caption={props.collect.selected.Place && props.collect.selected.Place.Address != undefined ? props.collect.selected.Place.Address : \"\"}>\n                                        {props.collect.selected.Place && props.collect.selected.Place.Name != undefined ? props.collect.selected.Place.Name : \"\"}</RichCell>\n                                </FormItem>\n                                <FormItem top=\"Информация\">\n                                    <InfoRow>{props.collect.selected.Details}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Сколько человек нужно\">\n                                    <InfoRow>{props.collect.selected.NeedMembers}\n                                        {(props.collect.selected.Members && props.collect.selected.Members.length > 0) &&\n                                            ` (нужно еще ${props.collect.selected.NeedMembers - props.collect.selected.Members.length} чел.)`\n                                        }\n                                    </InfoRow>\n\n                                </FormItem>\n                                <FormItem top=\"Стоимость на 1 человека\">\n                                    <InfoRow>{props.collect.selected.Cost}</InfoRow>\n                                </FormItem>\n                                <Group header={<Header mode=\"secondary\">Участники</Header>}>\n                                    {(props.collect.selected.Members && props.collect.selected.Members.length > 0) ?\n                                        <FormItem>\n                                            <List>\n                                                {props.collect.selected.Members.map((item) => {\n\n                                                    return <RichCell\n                                                    text={`${item.UserProfile.Name} ${item.UserProfile.Surname} ${item.UserProfileId == props.collect.selected.Creator.UserProfileId ? \" (Организатор)\" : \"\"}`}\n                                                        before={item.UserProfile.PhotoPath && item.UserProfile.PhotoPath != undefined ?\n                                                            <Avatar size={72} src={item.UserProfile.PhotoPath} />\n                                                            :\n                                                            null\n                                                        }\n                                                        actions={\n                                                        props.myProfile.UserProfileId == props.collect.selected.Creator.UserProfileId ? \n                                                            <Group>\n                                                                {item.UserProfile.UserProfileId != props.collect.selected.Creator.UserProfileId && \n                                                                    <ButtonWithNotify mode=\"destructive\" Message={`Уверены, что хотите исключить ${item.UserProfile.Name} ${item.UserProfile.Surname}?`} Yes={() => deleteMember(item.UserProfile)}>Исключить</ButtonWithNotify>}\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </Group>\n                                                            :\n                                                            <>\n                                                                {item.UserProfile.UserProfileId != props.myProfile.UserProfileId && \n                                                                    <Button onClick={() => gotoProfile(item.UserProfile.UserVkId)}>Профиль ВК</Button>}\n                                                            </>\n\n                                                    }\n                                                    >\n                                                    </RichCell>\n                                                }\n\n                                                )\n\n                                                }\n                                            </List>\n                                        </FormItem>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Пока нет участников. Стань первым.</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                {\n                                    (!youAreMember) ?\n                                        (\n                                            (new Date(props.collect.selected.When) > new Date()) ?\n                                                (\n                                                    (props.collect.selected.Members.length < props.collect.selected.NeedMembers) ?\n                                                    ((!showPanelBeMember) ?\n                                                        <FormItem top=\"Участие\">\n                                                            <CellButton onClick={() => setShowPanelBeMember(!showPanelBeMember)}>Стать участником</CellButton>\n                                                        </FormItem>\n                                                        :\n                                                        <FormItem top=\"Стать участником\">\n                                                            {(acceptBeMember) &&\n                                                                <CellButton onClick={registerToCollect}>Зарегистрироваться на сбор</CellButton>\n                                                            }\n                                                            <Checkbox checked={acceptBeMember} onChange={AcceptRights}>\n                                                                {`Подтверждаю, что готов прибыть на сбор в ${props.collect.selected.Place.Name} в \n                                    ${dateToString(props.collect.selected.When)} к ${dateTimeToTimeString(props.collect.selected.When)}\n                                    и оплатить взнос в размере ${props.collect.selected.Cost} рублей`}\n                                                            </Checkbox>\n                                                        </FormItem>)\n                                                        :\n                                                        <FormItem top=\"Участие\">\n                                                            <InfoRow>Регистрация закончена. Народ набран.</InfoRow>\n                                                        </FormItem>\n                                                )\n                                                :\n                                                <FormItem top=\"Участие\">\n                                                    <InfoRow>Регистрация закончена</InfoRow>\n                                                </FormItem>\n                                        )\n                                        :\n                                        <FormItem top=\"Участие\">\n                                            {(new Date(props.collect.selected.When) > new Date()) ?\n                                                <>\n                                                    <InfoRow>{(!youAreOrganizer) ? `Вы подтвердили участие в сборе` : `Вы организатор сбора`}</InfoRow>\n                                                    {(!showCancelMemberForm) ?\n                                                        ((!youAreOrganizer) ?\n                                                            <RichCell actions={<ButtonWithNotify mode=\"destructive\" Message=\"Отказаться от участия?\" Yes={() => setShowCancelMemberForm(true)}>Отказаться от участия</ButtonWithNotify>}></RichCell> :\n                                                            <RichCell actions={\n                                                                <>\n                                                                    <Button mode=\"primary\"\n                                                                        onClick={changeCollect}\n                                                                    >Изменить сбор</Button>\n                                                                    <ButtonWithNotify mode=\"destructive\"\n                                                                        Message=\"Желаете отменить сбор?\"\n                                                                        Yes={cancelCollect}\n                                                                    >Отменить сбор</ButtonWithNotify>\n                                                                </>\n                                                            }></RichCell>\n\n                                                        )\n                                                        :\n                                                        <Group>\n                                                            <FormItem>\n                                                                <b>Вы хотите отказаться от участия? Укажите причину отказа</b>\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Input type=\"text\" value={cancelReason} onChange={(e) => setCancelReason(e.currentTarget.value)} defaultValue=\"\" />\n                                                            </FormItem>\n                                                            <FormItem>\n                                                                <Button onClick={() => setShowCancelMemberForm(false)}>Не отказываться</Button>\n                                                                {cancelReason.length > 4 && <Button onClick={CancelMember} mode=\"destructive\">Отказаться</Button>}\n                                                            </FormItem>\n                                                        </Group>\n                                                    }\n                                                </>\n                                                :\n                                                <InfoRow>Вы участвовали в сборе</InfoRow>\n                                            }\n                                        </FormItem>\n                                }\n\n                            </>\n                            :\n                            <></>\n                        }\n                    </>\n                )\n            }\n        }; break;\n        case \"add\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <Select\n                            placeholder=\"Не выбрано\"\n                            value={(props.selectedPlace && props.selectedPlace.Id) ? props.selectedPlace.Id : null}\n                            onChange={e => changePlace(e)}\n                            options={simplePlaces.map(place => ({\n                                label: place.Name, value: place.Id\n                                // , avatar: user.photo_100 \n                            }))}\n                            renderOption={({ option, ...restProps }) => (\n                                <CustomSelectOption {...restProps}\n                                //   before={<Avatar size={24} src={option.avatar} />} \n                                />\n                            )}\n                        />\n                        {/* <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell> */}\n                    </FormItem>\n                    <FormItem top=\"Дата\">\n                        <DatePicker\n                            min={jSDateValueToDateSelectorValue(currentDate)}\n                            max={{ day: currentDate.getDate(), month: currentDate.getMonth() + 2, year: currentDate.getFullYear() }}\n                            defaultValue={selectedDate}\n                            onDateChange={(value) => { changeDate(value) }}\n                        />\n                        {/* <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow> */}\n                    </FormItem>\n                    <FormItem>\n                        {workoutSelector}\n\n                    </FormItem>\n                    <FormItem top=\"Выранное время\">\n                        {ranges}\n                    </FormItem>\n                    {selectedTimeRanges && selectedTimeRanges.length > 0 ?\n                        <Group>\n\n\n                            <FormItem>\n                                <InfoRow>\n                                    <br />\n                                    Вы можете сначала собрать людей и после оплатить. <br />\n                                    Либо вы можете сначала оплатить, а потом собирать людей. <br />\n                                    Аренда площадки гарантируется только после её оплаты.\n                                </InfoRow>\n                            </FormItem>\n\n                            <FormItem>\n                                <Group>\n                                    {\n                                        (selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                            <InfoRow style={{ \"color\": \"red\" }}>Вы отметили {selectedTimeRanges.length} диапазона(ов) времени: <br />\n                                                {ranges}\n                                                В таком режиме вы можете только арендовать всё выбранное время.\n                                                Чтобы создать сбор, необходимо выбрать только один диапазон подряд идущего времени, например,\n                                                18:00, 18:30 и 19:00 (с 18:00 до 19:30 - 1.5 часа)</InfoRow>\n                                            : <></>\n                                    }\n                                    {(selectedTimeRanges && selectedTimeRanges.length > 1) ?\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Оплатить потом создать</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description={`вы отметили ${selectedTimeRanges.length} сбора(ов)`} disabled>Создать потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n                                        :\n                                        <Group>\n                                            <Radio name=\"collect\" value=\"1\" checked={collectType == 1 ? true : false} onChange={() => changeCollectType(1)} description=\"После оплаты аренда закреплена за вами\">Оплатить потом создать сбор</Radio>\n                                            <Radio name=\"collect\" value=\"2\" checked={collectType == 2 ? true : false} onChange={() => changeCollectType(2)} description=\"Закрепление аренды будет только после оплаты\">Создать сбор потом оплатить</Radio>\n                                            <Radio name=\"collect\" value=\"3\" checked={collectType == 3 ? true : false} onChange={() => changeCollectType(3)} description=\"Без создания сбора\">Просто оплатить выбранное время</Radio>\n                                        </Group>\n\n                                    }\n\n                                </Group>\n                            </FormItem>\n                            {collectType != 3 &&\n                                <>\n                                    <FormItem top=\"Информация по сбору\">\n                                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)}\n                                            placeholder=\"Укажите здесь важную информацию для участников сбора\" />\n                                    </FormItem>\n                                    <FormItem top=\"Сколько человек нужно\">\n                                        <Input type=\"Number\"\n                                            defaultValue={needMembers}\n                                            value={needMembers}\n                                            placeholder=\"10\"\n                                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                                        ></Input>\n\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                                        <InfoRow>{costAll}</InfoRow>\n                                        {/* <Input type=\"Number\"\n                                    defaultValue={costAll}\n                                    value={costAll}\n                                    placeholder=\"2000\"\n                                    onChange={e => calculateCostAll(e.currentTarget.value)}\n                                ></Input> */}\n                                    </FormItem>\n                                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                                        <Input type=\"Number\"\n                                            defaultValue={costMembers}\n                                            value={costMembers}\n                                            placeholder=\"200\"\n                                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                                        ></Input>\n                                    </FormItem>\n                                    <FormItem top=\"Остаток после оплаты\">\n                                        <InfoRow>{plus} руб</InfoRow>\n                                    </FormItem>\n                                </>\n                            }\n                            <FormItem top=\"Публикация\">\n                                {selectedTimeRanges && selectedTimeRanges.length > 0 ? (\n                                    collectType == 1 ? <RichCell\n                                        caption=\"Оплатить и создать сбор\"\n                                        actions={<Button>Оплатить и создать сбор</Button>}\n                                    >\n                                    </RichCell> :\n                                        (collectType == 2 ?\n                                            <RichCell\n                                                caption=\"Создать сбор и оплатить\"\n                                                actions={<Button onClick={createCollect}>Создать сбор</Button>}\n                                            >\n                                            </RichCell> :\n                                            <RichCell\n                                                caption=\"Оплатить выбранное время без создания сбора\"\n                                                actions={<Button>Оплатить</Button>}\n                                            >\n                                            </RichCell>)\n                                ) :\n                                    <RichCell\n                                        caption=\"Выберите место, дату и время занятий\">\n                                    </RichCell>}\n                            </FormItem>\n                        </Group>\n                        :\n                        <></>\n                    }\n                </>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{(props.myProfile && props.myProfile.CityUmbracoName) ? props.myProfile.CityUmbracoName : \"\"}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата и время\">\n                        <InfoRow>{dateToString(props.collect.selected.When)} в {dateTimeToTimeString(props.collect.selected.When)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Место\">\n                        <RichCell caption={props.collect.selected.Place.Address}>{props.collect.selected.Place.Name}</RichCell>\n                    </FormItem>\n\n\n                    <FormItem top=\"Информация по сбору\">\n                        <Textarea defaultValue={details} value={details} onChange={e => setDetails(e.currentTarget.value)} placeholder=\"Сделать чтобы можно было покупать аренду без сбора. сбор опционально делается\" />\n                    </FormItem>\n                    <FormItem top=\"Сколько человек нужно\"\n                    bottom={\n                        props.collect.mode == \"edit\" \n                    && props.collect.selected.Members \n                    && props.collect.selected.Members != undefined \n                    && props.collect.selected.Members.length > 0 \n                    && (needMembers < props.collect.selected.Members.length) ?\n                    <CellButton mode=\"danger\">Нельзя указывать меньше, чем зарегистрированных участников</CellButton>\n                    : \"\"\n                    }\n                    >\n                        <Input type=\"Number\"\n                            defaultValue={needMembers}\n                            value={needMembers}\n                            placeholder=\"10\"\n                            onChange={e => calculateNeedMembers(e.currentTarget.value)}\n                        ></Input>\n\n                    </FormItem>\n                    <FormItem top=\"Стоимость выбранного времени (не видно участникам)\">\n                        <InfoRow>{costAll}</InfoRow>\n                        {/* <Input type=\"Number\"\n                                defaultValue={costAll}\n                                value={costAll}\n                                placeholder=\"2000\"\n                                onChange={e => calculateCostAll(e.currentTarget.value)}\n                            ></Input> */}\n                    </FormItem>\n                    <FormItem top=\"Стоимость на 1 человека (эту цену увидят участники)\">\n                        <Input type=\"Number\"\n                            defaultValue={costMembers}\n                            value={costMembers}\n                            placeholder=\"200\"\n                            onChange={e => calculateCostMembers(e.currentTarget.value)}\n                        ></Input>\n                    </FormItem>\n                    <FormItem top=\"Остаток после оплаты\">\n                        <InfoRow>{plus} руб</InfoRow>\n                    </FormItem>\n\n                    <FormItem top=\"Сохранение\">\n                        <RichCell\n                            actions={\n                                <Group>\n                                    <Button\n                                        onClick={cancelSave}\n                                    >Отменить изменения</Button>\n                                    {\n                                        props.collect.mode == \"edit\" \n                                        && props.collect.selected.Members \n                                        && props.collect.selected.Members != undefined \n                                        && props.collect.selected.Members.length > 0 \n                                        && (needMembers >= props.collect.selected.Members.length) ?\n                                        <Button\n                                        Message = \"Сохранить внесенные изменения?\"\n                                        Yes={saveChanges}\n                                    >Сохранить изменения</Button>\n                                        :\n                                        <Button disabled>Исправьте ошибки...</Button>\n                                }\n                                </Group>\n                            }\n                        >\n                        </RichCell>\n                    </FormItem>\n\n\n                </>\n            )\n        }; break;\n        default: {\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        }; break;\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        collect: state.collectEntity,\n        simplePlace: state.simplePlaceEntity,\n        selectedPlace: state.simplePlaceEntity.selectedPlace,\n        selectedRent: state.rentEntity.selectedRent,\n        rent: state.rentEntity,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    DeleteMemberFromCollect, setSelectedSimplePlace, setSelectedRent, AddSimpleCollect, registerMemberToSimpleCollect,\n    DelSimpleCollect, setCollectItemMode, EditSimpleCollect, setSelectedMembers,\n})(SimpleCollectItem)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\n\n\n/*\nisBack={false} - флаг возврата на предыдущую панель\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\nitem = {itm} - объект, передаваемый в параметр handleClick\nhandleClick = {selectCollect} - функция, выполняемая по клику\n*/\n\n\nexport const withHistorySave = (WrappedComponent) => {\n    \n    const mapStateToProps = state => ({\n        history: state.system.history,\n    })\n    \n    const mapDispatchToProps = {\n        goToPanel\n    }\n\n    class hocComponent extends React.Component{\n        constructor(props){\n            super(props);\n            this.clickEvent = this.clickEvent.bind(this);\n\n        }\n\n        clickEvent(evt){\n            \n            if (this.props.handleClick != undefined && this.props.item != undefined)\n                this.props.handleClick(this.props.item);\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\n                this.props.handleClick();\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\n        }\n\n        componentDidUpdate(prevProps, prevState){\n            \n        }\n\n\n        render(){\n            \n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\n            \n        }\n    }\n\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\n}\n","import React, { Component } from 'react'\nimport { RichCell } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst RichCellWithHistory = (props) => {\n  \n \n    return (\n        <RichCell isBack={false} {...props}></RichCell>\n        \n    )\n}\n\nexport default withHistorySave(RichCellWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\nimport { Icon24ChevronRight } from '@vkontakte/icons';\n\nconst Icon24ChevronRightWithHistory = (props) => {\n  \n \n    return (\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\n        \n    )\n}\n\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\nconst TeamAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBorn);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {/* {!item.Published ? \n                                        <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\n                                        : \n                                        <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\n                                        <ButtonWithNotify Yes={() => props.Button2Handle(item)} Message=\"Удалить команду?\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    // caption={date && `Основана: ${dateToString(date)}`}\n                                    after={\n                                        <Icon24ChevronRightWithHistory\n                                            handleClick={() => props.CellClick(item)} \n                                            toMenuName=\"teamitem\" \n                                            data-story=\"teamitem\"\n                                        >\n\n                                        </Icon24ChevronRightWithHistory>\n                                    }\n                                    // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : \n                    <FormItem><InfoRow>Нет команд</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, BidTeamAPI, TournamentAPI } from './../utils/api/api.js'\nimport { cityTournamentAdmins } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTournamentAdmins = cityTournamentAdmins;\n\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\nconst TOURNAMENT_MY_ADD_OR_EDIT = \"TOURNAMENT_MY_ADD_OR_EDIT\";\nconst TOURNAMENT_SET_TOURNAMENTGROUPS = \"TOURNAMENT_SET_TOURNAMENTGROUPS\";\nconst TOURNAMENT_SET_TOURNAMENTTEAMS = \"TOURNAMENT_SET_TOURNAMENTTEAMS\";\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\nconst TOURNAMENT_MATCH_LENGTH = \"TOURNAMENT_MATCH_LENGTH\";\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\nconst TOURNAMENT_SET_ORGANIZATOR_NAME = \"TOURNAMENT_SET_ORGANIZATOR_NAME\";\nconst TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT = \"TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT\";\nconst TOURNAMENT_SET_LINK = \"TOURNAMENT_SET_LINK\";\nconst TOURNAMENT_SET_LINK2 = \"TOURNAMENT_SET_LINK2\";\nconst TOURNAMENT_SET_LINK2NAME = \"TOURNAMENT_SET_LINK2NAME\";\n\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES = \"TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES\";\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    tournaments: [], // все турниры\n    bidsNew: [], // новые заявки на турниры\n    selectedForView: {}, // выбранный турнир для просмотра в пользовательском режиме (а надо ли?)\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\n    selectedTables: [],  // турнирные таблицы выбранного турнира для просмотра пользователями\n    myTournaments: [], // те, что я создал\n    cityTournamentAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet tournamentReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\n            return {\n                ...state,\n                myTournaments: [...action.myTournaments],\n            };\n        }\n        case TOURNAMENT_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TOURNAMENT_SET_MYTOURNAMENT: {\n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.map(tour => {\n                    \n                    if (tour.Id == action.mytournament.Id) {{\n                        tour = {...action.mytournament};\n                    }}\n                    return tour;\n                })],\n            };\n        }\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\n            \n            return {\n                ...state,\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES: {\n            \n            return {\n                ...state,\n                selectedTables: [...action.tables],\n            };\n        }\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\n            let index = -1;\n            let max = -1;\n            \n            \n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {...action.tournament,\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\n                        return {...item, KeyId: ++max}\n                    })]\n                },\n            };\n        }\n        case TOURNAMENT_RESET_TOURNAMENT: {\n            return {\n                ...state,\n                selected: {...emptyTournament},\n            };\n        }\n        case TOURNAMENT_MY_ADD_OR_EDIT: {\n            let newTourn = state.myTournaments.filter(t => t.Id == action.tournament.Id)\n            if (newTourn){\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments.map(t => {\n                            if (t.Id == action.tournament.Id){\n                                t = {...t.tournament}\n                            }\n                            return t;\n                        })\n                    ],\n                };\n            }\n            else{\n                return {\n                    ...state,\n                    myTournaments: [\n                        ...state.myTournaments, action.tournament\n                    ],\n                };\n            }\n        }\n        case TOURNAMENT_MATCH_LENGTH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                MatchLength: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\n            return {\n                ...state,\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\n            };\n        }\n        case TOURNAMENT_SET_NEW_BIDS: {\n            return {\n                ...state,\n                bidsNew: [...action.bids],\n            };\n        }\n        case TOURNAMENT_DEL_BID: {\n            return {\n                ...state,\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case TOURNAMENT_SET_WHEN_BEGIN: {\n\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenBegin: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_WHEN_END: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    WhenEnd: action.when,\n                },\n            };\n        }\n        case TOURNAMENT_SET_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ORGANIZATOR_NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    OrganizatorName: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    OrganizatorNameShort: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK2: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link2: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_LINK2NAME: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Link2Name: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Reglament: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Details: action.value,\n                },\n            };\n        }\n        case TOURNAMENT_PUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: true,\n                },\n            };\n        }\n        case TOURNAMENT_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    Published: false,\n                },\n            };\n        }\n        case TOURNAMENT_ADD_GROUP: {\n            let max = -1;\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined){\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n\n            // if (action.group.Id < 0)\n            //     return {\n            //         ...state,\n            //         selected: {...state.selected, \n            //             TournamentGroups: [...state.selected.TournamentGroups, \n            //                 {\n            //                     KeyId: max + 1,    \n            //                     Name: action.group.Name\n            //                 }],\n            //         },\n            //     };\n            // else\n                return {\n                    ...state,\n                    selected: {...state.selected, \n                        TournamentGroups: [...state.selected.TournamentGroups, \n                            {\n                                ...action.group,\n                                KeyId: max + 1,    \n                                Id: action.group.Id,\n                                Name: action.group.Name\n                            }],\n                    },\n                };\n\n        }\n        case TOURNAMENT_SET_GROUP: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\n                        if (item.Id == action.groupId)\n                        {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTGROUPS: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case TOURNAMENT_SET_TOURNAMENTTEAMS: {\n\n            let newTGroups = [];\n            \n\n            // clear tournament groups\n            state.selected.TournamentGroups.forEach(tg => {\n                tg.Teams = [];\n            })\n\n            // заполнение групп\n            action.bidsWithTeamsAndGroups.forEach(bid => {\n                \n                newTGroups = state.selected.TournamentGroups.map(tg => {\n                    \n                    if (tg.Id == bid.TournamentGroupId)\n                    {\n                        bid.Team.Name = bid.TeamName;\n                        tg.Teams = [...tg.Teams, bid.Team];\n                    }\n                    return tg;\n                })\n            });\n            \n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: [...newTGroups],\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\n            debugger\n            return {\n                ...state,\n                selected: {...state.selected, \n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setTournamentTables = (tables) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES,\n        tables\n    }\n}\n\nexport const setMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_SET_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const addOrEditTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_MY_ADD_OR_EDIT,\n        tournament\n    }\n}\n\nexport const setSelectedTournament = (tournament) => {\n    return {\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\n        tournament\n    }\n}\n\nexport const deleteMyTournament = (mytournament) => {\n    return {\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\n        mytournament\n    }\n}\n\nexport const setMyTournaments = (myTournaments) => {\n    return {\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\n        myTournaments\n    }\n}\n\nexport const tournamentPublish = () => {\n    return {\n        type: TOURNAMENT_PUBLISH,\n    }\n}\n\nexport const tournamentUnpublish = () => {\n    return {\n        type: TOURNAMENT_UNPUBLISH,\n    }\n}\n\nexport const resetTournament = () => {\n    return {\n        type: TOURNAMENT_RESET_TOURNAMENT\n    }\n}\n\nexport const setTournamentWhenBegin = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_BEGIN,\n        when\n    }\n}\n\nexport const setTournamentWhenEnd = (when) => {\n    return {\n        type: TOURNAMENT_SET_WHEN_END,\n        when\n    }\n}\n\nexport const setTournamentMode = (mode) => {\n    return {\n        type: TOURNAMENT_SET_MODE,\n        mode\n    }\n}\n\nexport const setTournamentName = (value) => {\n    return {\n        type: TOURNAMENT_SET_NAME,\n        value\n    }\n}\n\nexport const setTournamentOrganizatorName = (value) => {\n    return {\n        type: TOURNAMENT_SET_ORGANIZATOR_NAME,\n        value\n    }\n}\n\nexport const setTournamentOrganizatorNameShort = (value) => {\n    return {\n        type: TOURNAMENT_SET_ORGANIZATOR_NAME_SHORT,\n        value\n    }\n}\n\nexport const setTournamentLink = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK,\n        value\n    }\n}\n\nexport const setTournamentLink2 = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK2,\n        value\n    }\n}\n\nexport const setTournamentLink2Name = (value) => {\n    return {\n        type: TOURNAMENT_SET_LINK2NAME,\n        value\n    }\n}\n\nexport const setTournamentMatchLength = (value) => {\n    return {\n        type: TOURNAMENT_MATCH_LENGTH,\n        value\n    }\n}\n\nexport const setTournamentDetails = (value) => {\n    return {\n        type: TOURNAMENT_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTournamentReglament = (value) => {\n    return {\n        type: TOURNAMENT_SET_REGLAMENT,\n        value\n    }\n}\n\nexport const setTournamentNewBids = (bids) => {\n    return {\n        type: TOURNAMENT_SET_NEW_BIDS,\n        bids\n    }\n}\n\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\n    return {\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\n        cityTournamentAdmins\n    }\n}\n\nexport const setSelectedTournamentGroups = (groups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTGROUPS,\n        groups\n    }\n}\n\nexport const setTournamentTeams = (bidsWithTeamsAndGroups) => {\n    return {\n        type: TOURNAMENT_SET_TOURNAMENTTEAMS,\n        bidsWithTeamsAndGroups\n    }\n}\n\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\n    debugger\n    return {\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\n        tournamentId,\n        groupId\n    }\n}\n\nexport const addGroupToTournament = (group) => {\n    return {\n        type: TOURNAMENT_ADD_GROUP,\n        group\n    }\n}\n\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\n    return {\n        type: TOURNAMENT_SET_GROUP,\n        tournamentId,\n        groupId,\n        groupName\n    }\n}\n\nexport const deleteTournamentBid = (bid) => {\n    return {\n        type: TOURNAMENT_DEL_BID,\n        bid\n    }\n}\n\n// перемещение заявки от команды в другую группу по команде\nexport const replaceTeam = (team, tOldGoup, tNewGroup) => {\n    \n} \n\n// отмена заявки от команды (удаление из турнира) по команде\nexport const deleteTeam = (team, tGoup) => {\n\n}\n\n// все админы турниров города\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        \n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\n    return dispatch => {\n\n        if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n                        \n                        dispatch(setCityTournamentAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новый турнир\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\n                    .then(pl => {\n                        debugger\n                        if (pl && pl.data) {\n                            dispatch(addOrEditTournament(pl.data))\n                            //dispatch(resetTournament());\n                            //dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                            //dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        //dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\n                        //dispatch(setGlobalPopout(false))\n                    })\n            else {\n                //dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\n                //dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            //dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\n            //dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет турнир\nexport const deleteTournament = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает новые заявки в турнир\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            dispatch(setTournamentNewBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрашивает группы и заявленные команды турнира\nexport const getTournamentTeams = (tournament = null, userprofile = null) => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.getTournamentTeamsByTournament(userprofile, tournament)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// изменяет группу команды в турнире\nexport const changeTournamentTeamBidTournamentGroup = (team = null, newgroup = null, oldgroup = null, userprofile = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (newgroup != null) && (oldgroup != null)) {\n            \n            if (authQueryString && authQueryString.length > 0)\n            \n                CityTournamentAdminAPI.changeTeamTournamentGroup(team, newgroup, oldgroup, userprofile)\n                    .then(pl => {\n                        if (pl) {\n                            \n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось сменить группу: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось сменить группу\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сменить группу, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Подтверждает заявку в турнир\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Отклоняет заявку в турнир\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\n                    .then(pl => {\n                        if (pl) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(deleteTournamentBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// Удаляет команду из турнира\nexport const deleteTeamFromTournament = (team = null, tournamentGroup = null, userprofile = null, admintext = \"\") => {\n    \n    return dispatch => {\n        if ((tournamentGroup != null) && (userprofile != null)  && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n                CityTournamentAdminAPI.deleteTeamFromTournamentByTeam(team, tournamentGroup, userprofile, admintext)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            debugger\n                            dispatch(setTournamentTeams(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду из турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет группу турнира\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournamentGroupId < 0)\n                {\n                    debugger\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавляет группу турнира\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\n    debugger\n    return dispatch => {\n        if ((tournament != null) || (userprofile == null)){\n            if (authQueryString && authQueryString.length > 0){\n                if (tournament.Id < 0)\n                {\n                    debugger\n                    dispatch(addGroupToTournament(tournamentGroup));\n                    dispatch(setGlobalPopout(false))\n                }\n                else\n                {\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\n                    .then(pl => {\n                        if (pl) {\n                            debugger\n                            dispatch(addGroupToTournament(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTournaments = (userProfileId = -1) => {\n    return dispatch => {\n        if (userProfileId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setMyTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры города для пользователя\nexport const getTournamentsByCityId = (cityUmbId = -1) => {\n    return dispatch => {\n        if (cityUmbId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getAllTournamentsInCityByCityUmbracoId(cityUmbId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournaments(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        debugger\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера турнирные таблицы групп/лиг выбранного турнира\nexport const getTournamentTablesByTournamentId = (tournamentId = -1) => {\n    return dispatch => {\n        if (tournamentId != null){\n            if (authQueryString && authQueryString.length > 0)\n            \n                \n            TournamentAPI.getTournamentTablesByTournamentId(tournamentId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n                            \n                            dispatch(setTournamentTables(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            \n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { TeamAdminAPI, TeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { TeamAdmins } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoCityTeamAdmins = TeamAdmins;\n\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\n\nconst currentDate = new Date();\n\nconst emptyTeam = {\n    Id: -1,\n    Name: \"\",\n    Year: 0,\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\n    Details: \"\",\n    Logo: \"\",\n    CityId: -1,\n    TournamentGroups: [],\n    Admins: [],\n    Matches: [],\n    Players: [],\n    Published: false,\n    Deleted: false,\n}\n\nconst initState = {\n    teams: [], // все турниры\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\n    myTeams: [], // те, что я создал\n    cityTeamAdmins: [], // админы текущего города\n    mode: \"view\", // режим отображения команды (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet teamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case TEAM_SET_ALL_TEAMS: {\n            return {\n                ...state,\n                teams: [...action.teams],\n            };\n        }\n        case TEAM_SET_MY_TEAMS: {\n           // debugger\n            return {\n                ...state,\n                myTeams: [...action.myTeams],\n            };\n        }\n        case TEAM_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case TEAM_ADD_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams, { ...action.myteam }]\n            };\n        }\n        case TEAM_SET_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.map(tour => {\n\n                    if (tour.Id == action.myteam.Id) {\n                        {\n                            tour = { ...action.myteam, };\n                        }\n                    }\n                    return tour;\n                })],\n            };\n        }\n        case TEAM_DELETE_MYTEAM: {\n\n            return {\n                ...state,\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\n            };\n        }\n        case TEAM_SET_SELECTED_TEAM: {\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\n            debugger\n\n\n            state.selected.TournamentGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxT)\n                        maxT = item.KeyId;\n                }\n            });\n            state.selected.Admins.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxA)\n                        maxA = item.KeyId;\n                }\n            });\n            state.selected.Matches.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxM)\n                        maxM = item.KeyId;\n                }\n            });\n            state.selected.Players.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > maxP)\n                        maxP = item.KeyId;\n                }\n            });\n\n\n            return {\n                ...state,\n                selected: {\n                    ...action.team,\n                    WhenBorn: {\n                        day: new Date(action.team.WhenBorn).getDate(),\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\n                        year: new Date(action.team.WhenBorn).getFullYear()\n                    },\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\n                        return { ...item, KeyId: ++maxT }\n                    })],\n                    Admins: [...action.team.Admins.map(item => {\n                        return { ...item, KeyId: ++maxA }\n                    })],\n                    Matches: [...action.team.Matches.map(item => {\n                        return { ...item, KeyId: ++maxM }\n                    })],\n                    Players: [...action.team.Players.map(item => {\n                        return { ...item, KeyId: ++maxP }\n                    })],\n                },\n            };\n        }\n        case TEAM_RESET_TEAM: {\n            return {\n                ...state,\n                selected: { ...emptyTeam },\n            };\n        }\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\n            return {\n                ...state,\n                cityTeamAdmins: [...action.cityTeamAdmins],\n            };\n        }\n        case TEAM_SET_WHEN_BORN: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    WhenBorn: action.when,\n                },\n            };\n        }\n        case TEAM_SET_NAME: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Name: action.value,\n                },\n            };\n        }\n        case TEAM_SET_REGLAMENT: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Reglament: action.value,\n                },\n            };\n        }\n        case TEAM_SET_DETAILS: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Details: action.value,\n                },\n            };\n        }\n        case TEAM_PUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: true,\n                },\n            };\n        }\n        case TEAM_UNPUBLISH: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    Published: false,\n                },\n            };\n        }\n        case TEAM_ADD_GROUP: {\n            let max = -1;\n            state.selected.TeamGroups.forEach(item => {\n                if (item.KeyId != undefined) {\n                    if (item.KeyId > max)\n                        max = item.KeyId;\n                }\n            });\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: [...state.selected.TeamGroups,\n                    {\n                        KeyId: max + 1,\n                        Name: action.groupName\n                    }],\n                },\n            };\n        }\n        case TEAM_SET_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.map(item => {\n                        if (item.Id == action.groupId) {\n                            item.Id = action.groupId;\n                            item.KeyId = action.groupId;\n                            item.Name = action.groupName;\n                        }\n                        return item;\n                    }),\n                },\n            };\n        }\n        case TEAM_DEL_GROUP: {\n            return {\n                ...state,\n                selected: {\n                    ...state.selected,\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\n                },\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTeams = (teams) => {\n    return {\n        type: TEAM_SET_ALL_TEAMS,\n        teams\n    }\n}\n\nexport const setMyTeam = (myteam) => {\n    return {\n        type: TEAM_SET_MYTEAM,\n        myteam\n    }\n}\n\nexport const addMyTeam = (myteam) => {\n    return {\n        type: TEAM_ADD_MYTEAM,\n        myteam\n    }\n}\n\nexport const setSelectedTeam = (team) => {\n    debugger\n    return {\n        type: TEAM_SET_SELECTED_TEAM,\n        team\n    }\n}\n\nexport const deleteMyTeam = (myteam) => {\n    return {\n        type: TEAM_DELETE_MYTEAM,\n        myteam\n    }\n}\n\nexport const setMyTeams = (myTeams) => {\n    return {\n        type: TEAM_SET_MY_TEAMS,\n        myTeams\n    }\n}\n\nexport const teamPublish = () => {\n    return {\n        type: TEAM_PUBLISH,\n    }\n}\n\nexport const teamUnpublish = () => {\n    return {\n        type: TEAM_UNPUBLISH,\n    }\n}\n\nexport const resetTeam = () => {\n    return {\n        type: TEAM_RESET_TEAM\n    }\n}\n\nexport const setTeamWhenBorn = (when) => {\n    return {\n        type: TEAM_SET_WHEN_BORN,\n        when\n    }\n}\n\n\nexport const setTeamMode = (mode) => {\n    return {\n        type: TEAM_SET_MODE,\n        mode\n    }\n}\n\nexport const setTeamName = (value) => {\n    return {\n        type: TEAM_SET_NAME,\n        value\n    }\n}\n\nexport const setTeamDetails = (value) => {\n    return {\n        type: TEAM_SET_DETAILS,\n        value\n    }\n}\n\nexport const setTeamReglament = (value) => {\n    return {\n        type: TEAM_SET_REGLAMENT,\n        value\n    }\n}\n\n\n\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\n    return {\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\n        cityTeamAdmins\n    }\n}\n\nexport const delGroupFromTeam = (teamId, groupId) => {\n    return {\n        type: TEAM_DEL_GROUP,\n        teamId,\n        groupId\n    }\n}\n\nexport const addGroupToTeam = (teamId, groupName) => {\n    return {\n        type: TEAM_ADD_GROUP,\n        teamId,\n        groupName\n    }\n}\n\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\n    return {\n        type: TEAM_SET_GROUP,\n        teamId,\n        groupId,\n        groupName\n    }\n}\n\n\n// все админы турниров города\nexport const getAllCityTeamAdmins = (startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAll(startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// все админы города с сервера по Id города\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if (authQueryString && authQueryString.length > 0)\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\n                .then(pl => {\n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setCityTeamAdmins(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохраняет (добавляет) в базу новую команду\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null && userprofile != null) {\n            if (authQueryString && authQueryString.length > 0)\n            {\n                if (team.Id < 0) // добавление\n                {\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n                else{ // изменение\n                    TeamAdminAPI.saveTeam(team, userprofile)\n                        .then(pl => {\n                            if (pl && pl.data.length > 0) {\n                                dispatch(setMyTeam(pl.data));\n                                dispatch(resetTeam());\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                }\n            }\n            else {\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// опубликовывает турнир\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\n                    .then(pl => {\n\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(setMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаляет команду\nexport const deleteTeam = (team = null, userprofile = null) => {\n\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if ((team != null) || (userprofile != null)) {\n            if (authQueryString && authQueryString.length > 0)\n                TeamAdminAPI.deleteTeam(team, userprofile)\n                    .then(pl => {\n                        if (pl && pl.data) {\n                            // изменить полученный турнир в списке\n                            dispatch(deleteMyTeam(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getMyTeams = (userProfileId = -1) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (userProfileId != -1) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\n                    .then(pl => {\n                        if (pl && pl.data.length > 0) {\n\n                            dispatch(setMyTeams(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан userprofile = -1\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// возвращает с сервера все турниры для админа по его UserProfileId\nexport const getTeamInfo = (team = null) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n\n        if (team != null) {\n            if (authQueryString && authQueryString.length > 0)\n\n\n            TeamAPI.getTeamInfoByTeamId(team.Id)\n                    .then(pl => {\n                        \n                        if (pl && pl.data) {\n                            \n                            dispatch(setSelectedTeam(pl.data));\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось загрузить команду: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n\n            else {\n                dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось загрузить команду, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n\nexport default teamReducer;","import React, { Component } from 'react'\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst ButtonWithHistory = (props) => {\n  \n \n    return (\n        <Button isBack={false} {...props}></Button>\n        \n    )\n}\n\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem, Group } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from './TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setSelectedTeam(item);\n        props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTeam();\n        props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n        \n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                </FormItem>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\n                </FormItem>\n                <Group>\n                    <TeamAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTeam}\n                    Button2Handle = {DeleteTeam}\n                    List={props.team.myTeams}\n                    >\n                        \n                    </TeamAdminList>\n                </Group>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TeamAdminPanel);","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\nimport { BidTeam } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoBidTeam = BidTeam;\n\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\n\n\nconst currentDate = new Date();\n\nconst emptyBidTeam = BidTeam\n\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\nexport const BID_TEAM_MODE_VIEW = \"view\"\n\nconst initState = {\n    tournaments: [], // все турниры\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\n    selectedTournament: {...EmptyTournament},\n    myBids: [], // те, что я создал\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\n}\n\n\nlet bidBidTeamReducer = (state = initState, action) => {\n    switch (action.type) {\n        case BID_TEAM_SET_TOURNAMENTS: {\n            return {\n                ...state,\n                tournaments: [...action.tournaments],\n            };\n        }\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\n            return {\n                ...state,\n                selectedTournament: {...state.selectedTournament, \n                    TournamentGroups: [...action.groups],\n                },\n            };\n        }\n        case BID_TEAM_SET_SELECTED_MODE: {\n            return {\n                ...state,\n                selectMode: action.mode,\n            };\n        }\n        case BID_TEAM_SET_MY_BIDS: {\n            return {\n                ...state,\n                myBids: [...action.bids],\n            };\n        }\n        case BID_TEAM_ADD_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids, action.bid],\n            };\n        }\n        case BID_TEAM_DEL_MY_BID: {\n            //debugger\n            return {\n                ...state,\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\n            };\n        }\n        case BID_TEAM_APPROVE_BID: {\n            debugger\n            return {\n                ...state,\n                \n            };\n        }\n        \n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setTournaments = (tournaments) => {\n    return {\n        type: BID_TEAM_SET_TOURNAMENTS,\n        tournaments\n    }\n}\n\nexport const setMyBids = (bids) => {\n    return {\n        type: BID_TEAM_SET_MY_BIDS,\n        bids\n    }\n}\n\nexport const approveBid = (bid) => {\n    return {\n        type: BID_TEAM_APPROVE_BID,\n        bid\n    }\n}\n\nexport const addMyBid = (bid) => {\n    return {\n        type: BID_TEAM_ADD_MY_BID,\n        bid\n    }\n}\n\nexport const delMyBid = (bid) => {\n    return {\n        type: BID_TEAM_DEL_MY_BID,\n        bid\n    }\n}\n\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\n        groups\n    }\n}\n\nexport const setBidTeamSelectedMode = (mode) => {\n    return {\n        type: BID_TEAM_SET_SELECTED_MODE,\n        mode\n    }\n}\n\n// все админы турниров города\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n        \n        if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getActualTournaments(userprofile, team)\n                .then(pl => {\n                    \n                    if (pl && pl.data.length > 0) {\n\n                        dispatch(setTournaments(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n\n                        //dispatch(setCityBidTeamAdmins(demoBidTeam))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\n// запрос групп турнира\nexport const getTournamentGroups = (tournament = null) => {\n    \n    return dispatch => {\n        if (tournament != null){\n            if (authQueryString && authQueryString.length > 0)\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\n                    .then(pl => {\n                        \n                        if (pl) {\n                           // debugger\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// запрос заявок команды\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\n    debugger\n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (team.Id >= 0)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(setMyBids(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// добавление заявки от команды\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(addMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// удаление заявки от команды\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\n    \n    return dispatch => {\n        if ((team != null) && (userprofile != null) && (bid != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\n            .then(pl => {\n                        \n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\n                            dispatch(delMyBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n                    else {\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\n                        dispatch(setGlobalPopout(false))\n                        \n                    }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n            \n        }\n    }\n}\n\n\n// согласование/отмена заявки от команды\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\n    \n    return dispatch => {\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\n            if (authQueryString && authQueryString.length > 0)\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\n                    .then(pl => {\n                        \n                        if (pl) {\n                            dispatch(approveBid(pl.data))\n                            dispatch(setGlobalPopout(false))\n                        }\n                        else {\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                            dispatch(setGlobalPopout(false))\n                        }\n                    })\n                    .catch(error => {\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\n                        dispatch(setGlobalPopout(false))\n                    })\n            else {\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\n                dispatch(setGlobalPopout(false))\n\n            }\n        }\n        else {\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\n\nexport default bidBidTeamReducer;","import React from 'react'\nimport { Cell } from '@vkontakte/vkui'\n\n\n\n\nconst ListItem = (props) => {\n    return (\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \n            removable \n            onRemove={() => props.Delete(props.KeyId)}\n            >\n                {props.Name}\n            </Cell>\n    )\n\n}\n\n\nexport default ListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        debugger\n                        if (item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else if (!item.Approved && !item.Published)\n                            return (\n                                <RichCell\n                                    //onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                        else\n                            return (\n                                <RichCell\n                                    onClick={() => props.CellClick(item)}\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\n                                    actions={<ButtonWithNotify mode=\"destructive\" Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button1Handle(item)}>Отменить заявку</ButtonWithNotify>}\n                                >\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder && item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\n                                    \n                                </RichCell>\n                            )\n                    })\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List } from '@vkontakte/vkui'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\n\n\nconst BidTeamTournamentList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        \n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\n                            //debugger\n                            return <>{props.Bids.map(bid => {\n                                debugger\n                                // просмотреть и вывести заявки\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\n                                    debugger\n                                    return (\n                                        <RichCell\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                            onClick={() => props.CellClick(item)}\n                                            \n                                        >\n                                            {item.Name}\n                                        </RichCell>\n                                    )}\n                                }\n                            )}</>\n                            \n\n\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\n                                    onClick={() => props.CellClick(item)}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                    })\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Button, FormItem, Input } from '@vkontakte/vkui'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\nconst BidTeamTournamentGroupsList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n    //debugger\n\n    return (\n        <Group header=\"Выберите группу/лигу\">\n            <Group mode=\"plain\">\n                <FormItem>\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\n                </FormItem>\n                <FormItem top=\"Название команды на этот турнир\">\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\n                </FormItem>\n                <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        //debugger\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\n                        {\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\n                            // props.Bids.map\n\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Уверены, что хотите отменить заявку?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        else{\n                            return (\n                                <RichCell\n                                after={\n                                    <ButtonWithNotify Message=\"Заявляем команду в эту группу?\" Yes={() => props.Button1Handle(item)}>Заявиться сюда</ButtonWithNotify>\n                                }\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            )\n                        }\n                        \n                    })\n                    : <InfoRow>Нет групп в турнире</InfoRow>\n                }\n\n            </List>\n            </Group>\n        </Group>\n    )\n}\n\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TeamAdminList from '../Team/TeamAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\n\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\nimport BidList from './BidList';\n\n\n\nconst BidTeamAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTeam = (team, publish) => {\n        \n        // props.publishTeam(team, props.myProfile, publish);\n    }\n   \n    const DeleteTeam = (team) => {\n        // props.deleteTeam(team, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        // props.setSelectedTeam(item);\n        // props.setTeamMode(\"edit\");\n    }\n\n    const CancelBid = (item) => {\n        \n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\n        // props.setTeamMode(\"edit\");\n    }\n    \n    \n    const ButtonNewClick = () => {\n        // props.resetTeam();\n        // props.setTeamMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTeams(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\n                <BidList\n                    CellClick={CellClick}\n                    Button1Handle = {CancelBid}\n                    //Button2Handle = {DeleteTeam}\n                    List={props.tournamentsForBids.myBids}\n                >\n                    \n                </BidList>\n                \n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n        team: state.teamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n    cancelBidTeamToTournamentGroup, \n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\n} from '../../../../store/tournamentsReducer'\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\nimport {\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { goToPanel } from '../../../../store/systemReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidTeamList from '../BidTeam/BidList';\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\n\nconst TeamItem = (props) => {\n    let currentDate = new Date();\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\n\n    const teamDate = new Date(\n        props.teams.selected.WhenBorn.year,\n        props.teams.selected.WhenBorn.month-1,\n        props.teams.selected.WhenBorn.day\n        );\n\n    useEffect(() =>{\n        debugger\n        if ((props.teams.selected != null) && (props.teams.selected.Id >= 0)){\n            props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\n            props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\n        }\n    }, props.teams.selected)\n        \n    \n    const MakeBid = (tournamentgroup) => {\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n\n    const CancelBid = (tournamentgroup) => {\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"tournaments\")\n        //setTempGroupName(\"\");\n    }\n    \n    const SelectTournament = (tournament) => {\n        props.getTournamentGroups(tournament)\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\n        props.setBidTeamSelectedMode(\"groups\")\n    }\n    \n    const BackToTournaments = () => {\n        props.setBidTeamSelectedMode(\"tournaments\")\n    }\n    \n    const CancelTeamCreate = () => {\n        props.goToPanel(\"teamadmin\", false);\n    }\n\n\n    const SaveTeam = () => {\n        props.saveSelectedTeam(props.teams.selected, props.myProfile);\n        props.goToPanel(\"teamadmin\", false);\n        //props.setTeamMode(\"view\");\n    }\n\n    \n\n    switch (props.mode) {\n        case \"view\": {\n            return (\n                <>\n                    <FormItem top=\"Ваш город\">\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Название команды\">\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Дата основания\">\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Описание команды\">\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\n                    </FormItem>\n                    <FormItem top=\"Логотип\">\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\n                    </FormItem>\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                            <List>\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                            </List>\n                            :\n                            <FormItem>\n                                <InfoRow>Нет групп</InfoRow>\n                            </FormItem>\n                        }\n                    </Group> */}\n                </>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новая команда</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новую команду?\" Yes={SaveTeam}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Отменить создание команды?\" Yes={CancelTeamCreate} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <Group>\n                    <Header>Управление командой</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название команды\">\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\n                        </FormItem>\n                        <FormItem top=\"Дата основания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\n                                defaultValue={props.teams.selected.WhenBorn}\n                                //value={props.teams.selected.WhenBorn}\n                                onDateChange={value => props.setTeamWhenBorn(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание команды\">\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                <List>\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\n                                </List>\n                                :\n                                <FormItem>\n                                    <InfoRow>Нет групп</InfoRow>\n                                </FormItem>\n                            }\n                        </Group> */}\n                        {/* <FormItem top=\"Новая группа/лига\">\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\n                        </FormItem> */}\n                        <FormItem top=\"Заявки на турнир\">\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\n                        </FormItem>\n                        <FormItem top=\"Куда можно заявиться\">\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\n                                <BidTeamTournamentList\n                                    CellClick={SelectTournament}\n                                    // Button1Handle = {MakeBid}\n                                    // Button2Handle = {CancelBid}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    List={props.tournamentsForBids.tournaments}\n                                ></BidTeamTournamentList>\n                        :\n                                <BidTeamTournamentGroupsList\n                                    CellClick={BackToTournaments}\n                                    Button1Handle = {MakeBid}\n                                    Button2Handle = {CancelBid}\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\n                                    Bids = {props.tournamentsForBids.myBids}\n                                    TeamName={teamNameOnTournament}\n                                    SetTeamName={SetTeamNameOnTournament}\n                                ></BidTeamTournamentGroupsList>\n                        }\n                        </FormItem>\n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Сохранить изменения?\" Yes={SaveTeam}>Внести изменения</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        };break;\n        default:{\n            <Group>\n                Не выбран режим отображения компонента (view, add, edit)\n            </Group>\n        };break;\n        \n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        teams: state.teamsEntity,\n        bidTeams: state.bidTeamsEntity,\n        tournamentsForBids: state.bidTeamsEntity,\n        SelectedName: state.teamsEntity.selected.Name,\n        bidSelectMode: state.bidTeamsEntity.selectMode, \n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, { setTeamMode, goToPanel,\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \n})(TeamItem)","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem } from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport TournamentListItem from './TournamentListItem'\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\n\n\n\nconst TournamentAdminList = (props) => {\n\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\n    // const list = props.tournaments.map(x => {\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\n    // })\n\n        \n\n    return (\n        <Group>\n            <List>\n                {(props.List && props.List.length > 0) ?\n                    props.List.map(item => {\n                        let date = new Date(item.WhenBegin);\n                        return (\n                            <FormItem>\n                                <RichCell\n                                    multiline\n                                    actions={\n                                        <>\n                                        {!item.Published ? \n                                        <ButtonWithNotify Message=\"Опубликовать турнир?\" Yes={() => props.Button1Handle(item, true)}>Опубликовать</ButtonWithNotify>\n                                        : \n                                        <ButtonWithNotify Message=\"Снять с публикации турнир?\" Yes={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</ButtonWithNotify>}\n                                        <ButtonWithNotify Message=\"Удалить турнир?\" Yes={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                        </>\n                                        }\n                                    caption={date && `Начало: ${dateToString(date)}`}\n                                    after={<Icon24ChevronRightWithHistory\n                                    handleClick={() => props.CellClick(item)} \n                                        toMenuName=\"tournamentitem\" \n                                        data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\n                                    }\n                                    text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\n                                >\n                                    {item.Name}\n                                </RichCell>\n                            </FormItem>\n                        )\n                    })\n                    : <FormItem><InfoRow>Нет турниров</InfoRow></FormItem>\n                }\n\n            </List>\n        </Group>\n    )\n}\n\nexport default TournamentAdminList","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Button, InfoRow, Header, FormItem } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport TournamentAdminList from './TournamentAdminList'\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, \n    setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\nimport { connect } from 'react-redux';\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\n\n\nconst TournamentAdminPanel = (props) => {\n\n\t// let [myTournaments, setMyTournaments] = useState([]);\n    const PublishTournament = (tour, publish) => {\n\n        props.publishTournament(tour, props.myProfile, publish);\n    }\n   \n    const DeleteTournament = (tour) => {\n        props.deleteTournament(tour, props.myProfile);\n    }\n    \n    const CellClick = (item) => {\n        \n        props.setTournamentMode(\"edit\");\n        props.setSelectedTournament(item);\n    }\n    \n    \n    const ButtonNewClick = () => {\n        props.resetTournament();\n        props.setTournamentMode(\"add\");\n    }\n\n    useEffect(() =>{\n        \n        props.getMyTournaments(props.myProfile.UserProfileId);\n    }, props.myProfile)\n\n        return (\n            <>\n                <FormItem>\n                    <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\n                </FormItem>\n                <TournamentAdminList \n                    CellClick={CellClick}\n                    Button1Handle = {PublishTournament}\n                    Button2Handle = {DeleteTournament}\n                    List={props.tournament.myTournaments}\n                >\n                    \n                </TournamentAdminList>\n            </>\n        )\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tmyProfile: state.profileEntity.myProfile,\n        tournament: state.tournamentsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, {\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\n})(TournamentAdminPanel);","import React, {useState} from 'react'\nimport  ButtonWithNotify  from './../../Common/WithNotify/ButtonWithNotify'\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\n\n\n\n\nconst BidListItem = (props) => {\n\n    let [adminText, setAdminText] = useState(\"\");\n\n\n    return (\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \n            actions={\n                <>\n                    <ButtonWithNotify mode=\"primary\" Message=\"Принять заявку команды?\" Yes={() => props.Accept(props.Item)}>Принять</ButtonWithNotify>\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\n                    <ButtonWithNotify mode=\"destructive\" Message=\"Отклонить заявку команды?\" Yes={() => props.Decline(props.Item, adminText)}>Отклонить</ButtonWithNotify>\n                </>\n            }\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\n            >\n                Команда {props.Item.Team.Name}\n            </RichCell>\n    )\n\n}\n\n\nexport default BidListItem","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\nimport { CityTournamentAdminAPI, MatchAPI } from './../utils/api/api.js'\nimport { Match } from './constants/commonConstants'\nimport { EmptyTournament } from './constants/commonConstants'\n\nimport { authQueryString } from './../utils/api/server';\n\nlet demoMatch = Match;\n\nconst MATCH_SET_ALL_MATCHES = \"MATCH_SET_ALL_MATCHES\";\nconst MATCH_DEL_MATCH = \"MATCH_DEL_MATCH\";\nconst MATCH_SET_SELECTED = \"MATCH_SET_SELECTED\";\nconst MATCH_ADD_MATCH = \"MATCH_ADD_MATCH\";\nconst MATCH_SET_HOT_MATCHES = \"MATCH_SET_HOT_MATCHES\";\nconst MATCH_SET_ACCESS = \"MATCH_SET_ACCESS\";\nconst MATCH_SET_MODE = \"MATCH_SET_MODE\";\nconst MATCH_SET_PLAYED = \"MATCH_SET_PLAYED\";\nconst MATCH_SET_HOT_PANEL = \"MATCH_SET_HOT_PANEL\";\n\nDate.prototype.addDays = function(days) {\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst currentDate = new Date();\nconst emptyTournament = EmptyTournament\n\nconst initState = {\n    matches: [],\n    hot: {\n        yesterday: [],\n        today: [],\n        tomorrow: [],\n    },\n    hotPanel: \"today\", // \"yesterday\", \"tomorrow\"\n    selected: {},\n    access: \"user\",\n    mode: \"list\", // режим отображения турнира (\"list\" - список, \"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\n}\n\n\nlet matchReducer = (state = initState, action) => {\n    switch (action.type) {\n        case MATCH_SET_ALL_MATCHES: {\n            return {\n                ...state,\n                matches: [...action.matches],\n            };\n        }\n        case MATCH_SET_SELECTED: {\n            return {\n                ...state,\n                selected: action.match,\n            };\n        }\n        case MATCH_DEL_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches.filter(m => m.Id != action.match.Id)],\n            };\n        }\n        case MATCH_ADD_MATCH: {\n            return {\n                ...state,\n                matches: [...state.matches, action.match],\n            };\n        }\n        case MATCH_SET_HOT_MATCHES: {\n            \n            let date = new Date();\n            let today = date.addDays(1).addDays(-1);\n            let yesterday = date.addDays(-1);\n            let tomorrow_begin = date.addDays(1);\n            let tomorrow_end = date.addDays(2);\n\n            let st = {\n                ...state,\n                hot: {\n                    yesterday: [...action.matches.filter(match => {\n                        \n                        return ((new Date(match.When) >= yesterday) && (new Date(match.When) < today))\n                    })],\n                    today: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= today) && (new Date(match.When) < tomorrow_begin))\n                    })],\n                    tomorrow: [...action.matches.filter(match =>  {\n                        \n                        return ((new Date(match.When) >= tomorrow_begin) && (new Date(match.When) < tomorrow_end))\n                    })],\n                },\n            };\n            \n            return st;\n        }\n        case MATCH_SET_ACCESS: {\n            return {\n                ...state,\n                access: action.access,\n            };\n        }\n        case MATCH_SET_PLAYED: {\n            return {\n                ...state,\n                access: action.played,\n            };\n        }\n        case MATCH_SET_MODE: {\n            return {\n                ...state,\n                mode: action.mode,\n            };\n        }\n        case MATCH_SET_HOT_PANEL: {\n            return {\n                ...state,\n                hotPanel: action.panelName,\n            };\n        }\n\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const setAllMatches = (matches) => {\n    return {\n        type: MATCH_SET_ALL_MATCHES,\n        matches\n    }\n}\n\nexport const setHotMatches = (matches) => {\n    return {\n        type: MATCH_SET_HOT_MATCHES,\n        matches\n    }\n}\n\nexport const delMatch = (match) => {\n    return {\n        type: MATCH_DEL_MATCH,\n        match\n    }\n}\n\nexport const addMatch = (match) => {\n    return {\n        type: MATCH_ADD_MATCH,\n        match\n    }\n}\n\nexport const setAccess = (access) => {\n    return {\n        type: MATCH_SET_ACCESS,\n        access\n    }\n}\n\nexport const setPlayed = (played) => {\n    return {\n        type: MATCH_SET_PLAYED,\n        played\n    }\n}\n\nexport const setMode = (mode) => {\n    return {\n        type: MATCH_SET_MODE,\n        mode\n    }\n}\n\nexport const setHotPanel = (panelName) => {\n    return {\n        type: MATCH_SET_HOT_PANEL,\n        panelName\n    }\n}\n\nexport const setSelectedMatch = (match) => {\n    return {\n        type: MATCH_SET_SELECTED,\n        match\n    }\n}\n\n\n\n// все матчи турнира\nexport const getAllMatchesByTournament = (tournament = null, userProfile = null, startindex = 0) => {\n    return dispatch => {\n        if ((tournament != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0)\n                MatchAPI.getAllMatchesByTournament(tournament, userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data && pl.data.length > 0) {\n                                \n                                dispatch(setAllMatches(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// добавить матч в турнир\nexport const addMatchToShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n\n        dispatch(setGlobalPopout(true))\n\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.addMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(addMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                                dispatch(setErrorMessage(\"Успешно добавлено\"))\n\n                            }\n                            else {\n\n                                //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    //dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n// удалить матч из турнира\nexport const delMatchFromShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\n    return dispatch => {\n        if ((match != null) && (userProfile != null)) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.delMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\n                        .then(pl => {\n                            if (pl && pl.data) {\n                                dispatch(delMatch(pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n// возвращает актуальные матчи города\nexport const getMatchesInCurrentCity = (userProfile = null) => {\n    return dispatch => {\n        if (userProfile != null) \n            {\n                if (authQueryString && authQueryString.length > 0){\n                \n                    MatchAPI.getCurrentMatchesByCity(userProfile)\n                        .then(pl => {\n                            \n                            if (pl && pl.data.length > 0) {\n                                dispatch(setHotMatches(pl.data));\n                                dispatch((pl.data));\n                                dispatch(setGlobalPopout(false))\n                            }\n                            else {\n                                dispatch(setErrorMessage(\"Не получены данные MatchAPI.getCurrentMatchesByCity\"))\n                                dispatch(setGlobalPopout(false))\n                            }\n                        })\n                        .catch(error => {\n\n                            dispatch(setErrorMessage(error))\n                            dispatch(setGlobalPopout(false))\n                        })\n                    }\n                else {\n\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\n                    dispatch(setGlobalPopout(false))\n\n                }\n            }\n        \n    }\n}\n\n\n\n    export default matchReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, calcInitialsAvatarColor, InitialsAvatar } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport { dateToString, timeToString } from '../../../../utils/convertors/dateUtils';\nimport { green } from 'chalk';\n\nconst schet = {\n    fontWeight: 'bold', \n    color: 'yellow',\n    backgroundColor: 'gray',\n    padding: '1px 7px',\n    borderRadius: '10px',\n}\n\nconst win = {\n    fontWeight: 'bold',\n    //color: 'orange',\n    //textDecoration: 'underline',\n    //borderLeft: '10px solid orange',\n}\n\nconst lose = {\n    color: '#666',\n    //color: 'orange',\n}\n\nconst MatchListItem = (props) => {\n    \n    \n    let match=props.Match;\n    let place=props.Place;\n    let date = new Date(match.When);\n\n\n        return (\n            <RichCell\n                onClick={props.ClickHandler}\n                before={\n                <InitialsAvatar\n                gradientColor={calcInitialsAvatarColor(match.TournamentGroup.TournamentId)}\n                >\n                    <h6>{match.TournamentGroup.Tournament.OrganizatorNameShort}</h6>\n                    </InitialsAvatar>\n            }\n                caption={place ? place.Name : \"Ошибка загрузки данных о месте\"}\n                text={\n                    match.Played ?\n                        <span style={{ \"color\": \"green\" }}>Сыгран <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span></span> :\n                        <span style={{ \"color\": \"blue\" }}>Состоится <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span> в {timeToString(date.getHours(), date.getMinutes())}</span>\n                }\n            >\n                {match.Played ? <span>\n                        <span \n                            style={(+match.Team1Goals > +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n                            >{match.Team1.Name} </span>\n                        <span style={schet}>{match.Team1Goals} - {match.Team2Goals}</span>\n                        <span \n                            style={(+match.Team1Goals < +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n                        > {match.Team2.Name}</span>\n                    </span> :\n                    <span>{match.Team1.Name} - {match.Team2.Name}</span>\n                }\n            </RichCell>\n        )\n}\n\nexport default MatchListItem","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div, Headline, Textarea } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setSelectedMatch,\n} from '../../../../store/matchReducer'\nimport {\n    goToPanel,\n} from '../../../../store/systemReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\nimport ButtonWithNotify from '../WithNotify/ButtonWithNotify';\nimport MatchListItem from '../../AdminPanel/Match/MatchListItem';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Shedule = (props) => {\n\n    useEffect(() => {\n\n        props.getAllMatchesByTournament(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected)\n\n    let isAdminMode = props.mode == \"admin\" ? true : false;\n    let tournament = props.tournament;\n    let today = props.todayIs;\n\n    // создание объектов для заполнения выпадающих списков (count - сколько элементов, makeZeroBefore - дописывать ли нули впереди к цифрам от 0 до 9)\n    let optMaker = (count, makeZeroBefore = true) => {\n        let m = [];\n        for (let i = 0; i < count; i++)\n            m = [...m, { value: i, label: ((i <= 9) && (makeZeroBefore)) ? \"0\" + i : i }]\n        return m\n    }\n\n    let groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n    //debugger\n    let places = props.places\n        .map(p => p.Name.length ? p : null)\n        .filter(p => p)\n        .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n    let teams = [{ value: 0, label: \"Не выбрано\" }]\n    let hours = [...optMaker(24)];\n    let minutes = [...optMaker(60)];\n    let teamGoals = [...optMaker(99, false)];\n\n    const [selectedTournamentGroup, setSelectedTournamentGroup] = React.useState((groups && Array.isArray(groups) && groups.length > 0) ? groups[0] : null);\n\n    const [selectedTournamentGroupTeamList, setSelectedTournamentGroupTeamList] = React.useState(teams);\n\n    const [selectedTeam1, setSelectedTeam1] = React.useState(0);\n    const [selectedTeam2, setSelectedTeam2] = React.useState(0);\n    const [selectedTeam1Goals, setTeam1Goals] = React.useState(0);\n    const [selectedTeam2Goals, setTeam2Goals] = React.useState(0);\n    const [selectedPlace, setSelectedPlace] = React.useState(0);\n    const [selectedDescription, setSelectedDescription] = React.useState(\"\");\n    const [selectedId, setSelectedId] = React.useState(0);\n    const [selectedPlayed, setSelectedPlayed] = React.useState(false);\n    const [selectedDate, setSelectedDate] = React.useState({ day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() });\n    const [selectedHour, setSelectedHour] = React.useState([hours[0].value]);\n    const [selectedMinute, setSelectedMinute] = React.useState(minutes[0].value);\n    \n\n    let getGroup = (groupId) => {\n        return tournament.TournamentGroups.find(x => x.Id == groupId);\n    }\n\n    let changeGroup = (league_id) => {\n        setSelectedTournamentGroup(league_id);\n        setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n    }\n\n    let allMatchesInAllGroups = []\n    props.tournaments.selected.TournamentGroups.forEach(tg => {\n\n        allMatchesInAllGroups.push({\n            TournamentGroup: { ...tg },\n            Matches: [...props.matches.filter(m => m.TournamentGroup.Id == tg.Id)]\n        })\n    })\n\n    let addMatch = (editId) => {\n\n        let match = (editId >= 0) ?\n            {\n                Id: editId,\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                Description: selectedDescription,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            } :\n            {\n                When: selectedDate,\n                TournamentGroupId: selectedTournamentGroup,\n                PlaceId: selectedPlace,\n                Team1Id: selectedTeam1,\n                Team2Id: selectedTeam2,\n                Description: selectedDescription,\n                BidTeamToTournamentId1: -1,\n                BidTeamToTournamentId2: -1,\n                Team1Goals: selectedTeam1Goals,\n                Team2Goals: selectedTeam2Goals,\n                Played: selectedPlayed,\n            };\n\n        props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n        props.setMode(\"list\")\n    }\n\n\n    let delCurrentMatch = () => {\n\n        let match = {\n            When: selectedDate,\n            Id: selectedId,\n            TournamentGroupId: selectedTournamentGroup,\n            // TournamentGroup: {\n            //     Id: selectedTournamentGroup,\n            //     Tournament: {...props.tournaments.selected}\n            // },\n            PlaceId: selectedPlace,\n            Team1Id: selectedTeam1,\n            Team2Id: selectedTeam2,\n            Played: selectedPlayed,\n        }\n\n        props.delMatchFromShedule(match, props.myProfile, selectedHour, selectedMinute)\n        props.setMode(\"list\")\n        //props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\n    }\n\n    let goToEditMatch = (match) => {\n        debugger\n\n        groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\n        //debugger\n        places = props.places\n            .map(p => p.Name.length ? p : null)\n            .filter(p => p)\n            .map(p => { return { value: p.UmbracoId, label: p.Name, title: p.Name } });\n        teams = [{ value: 0, label: \"Не выбрано\" }]\n        hours = [...optMaker(24)];\n        minutes = [...optMaker(60)];\n        teamGoals = [...optMaker(99, false)];\n\n        let date = new Date(match.When);\n\n\n        setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\n        setSelectedTournamentGroup(match.TournamentGroupId);\n        setSelectedId(match.Id);\n        setSelectedDescription(match.Description);\n        setTeam1Goals(match.Team1Goals);\n        setTeam2Goals(match.Team2Goals);\n        setSelectedTeam1(match.Team1.Id)\n        setSelectedTeam2(match.Team2.Id)\n        setSelectedPlace(match.PlaceId)\n        setSelectedPlayed(match.Played)\n        setSelectedDate({ day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() })\n        setSelectedHour(date.getHours())\n        setSelectedMinute(date.getMinutes())\n\n        props.setMode(\"edit\")\n    }\n\n    let goToViewMatch = (match) => {\n\n\n        props.setSelectedMatch(match)\n\n        props.goToPanel(\"matchitem\", false)\n    }\n\n//debugger\n    // выводим список существующего расписания с кнопками редактирования, удаления, переноса\n    // группируем список по датам, сортируем от последних к первым (последние выше)\n    // сделать кнопку сортировки\\\n\n    switch (props.access) {\n        case \"admin\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n                                    return <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\n                                        {groupAndMatchesItem.Matches.length > 0 ?\n                                            <List>\n                                                {\n                                                groupAndMatchesItem.Matches\n                                                .map(match => {\n                                                    let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                    let date = new Date(match.When);\n                                                    return <MatchListItem \n                                                        ClickHandler={() => goToEditMatch(match)}\n                                                        Match={match} Place={place}\n                                                        ></MatchListItem>\n                                                    // <RichCell\n                                                    //     caption={place.Name}\n                                                    //     text={\n                                                    //         match.Played ?\n                                                    //             <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                                    //             <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                                    //     }\n                                                        \n                                                    // >\n                                                    //     {match.Played ?\n                                                    //         `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\n                                                    //         `${match.Team1.Name} - ${match.Team2.Name}`\n                                                    //     }\n                                                    // </RichCell>\n                                                })}\n                                            </List>\n                                            :\n                                            <SimpleCell>Нет расписания в группе</SimpleCell>\n                                        }\n                                    </Group>\n                                }\n                                )}\n                            </List>\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <Button>Назад</Button>\n                        </Group>\n                    )\n                }; break;\n                case \"add\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Комментарий к матчу\">\n                                <Textarea onChange={(e) => setSelectedDescription(e.currentTarget.value)}>{selectedDescription}</Textarea>\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Добавить матч?\" Yes={() => addMatch(-1)}>Добавить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n                case \"edit\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={groups}\n                                    value={selectedTournamentGroup}\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam1}\n                                    onChange={(option) => {\n                                        setSelectedTeam1(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Команда 2\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={selectedTournamentGroupTeamList}\n                                    value={selectedTeam2}\n                                    onChange={(option) => {\n                                        setSelectedTeam2(option.currentTarget.value)\n                                    }}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Дата\">\n                                <DatePicker\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\n                                    defaultValue={selectedDate}\n                                    onDateChange={(value) => setSelectedDate(value)}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Время\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={hours}\n                                    value={selectedHour}\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n\n                                    options={minutes}\n                                    value={selectedMinute}\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Счёт\">\n                                <Div>Команда 1</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 1\"\n                                    options={teamGoals}\n                                    value={selectedTeam1Goals}\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                                <Div>Команда 2</Div>\n                                <CustomSelect\n                                    placeholder=\"0\"\n                                    title=\"Команда 2\"\n                                    options={teamGoals}\n                                    value={selectedTeam2Goals}\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n\n                            <FormItem top=\"Место\">\n                                <CustomSelect\n                                    placeholder=\"Не выбрано\"\n                                    options={places}\n                                    value={selectedPlace}\n                                    onChange={(option) =>\n                                        //changePlace(option.currentTarget.value)\n                                        setSelectedPlace(option.currentTarget.value)\n                                    }\n                                    renderOption={({ ...otherProps }) => {\n                                        return (\n                                            <CustomSelectOption\n                                                {...otherProps}\n                                            />\n                                        );\n                                    }}\n                                />\n                            </FormItem>\n                            <FormItem top=\"Комментарий к матчу\">\n                                <Textarea onChange={(e) => setSelectedDescription(e.currentTarget.value)} value={selectedDescription}></Textarea>\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\n                            <ButtonWithNotify Message=\"Сохранить матч?\" Yes={() => addMatch(selectedId)}>Сохранить</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Удалить матч?\" Yes={() => delCurrentMatch()} align=\"right\" mode=\"destructive\">Удалить</ButtonWithNotify>\n                        </Group>\n                    )\n                }; break;\n            }\n        }; break;\n        case \"user\": {\n            switch (props.mode) {\n                case \"list\": {\n                    return (\n                        <Group>\n                            <List>\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\n\n                                    return (\n                                        <Group header={<FormItem><Headline mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Headline></FormItem>}>\n                                            {\n                                                groupAndMatchesItem.Matches.length > 0\n                                                    ?\n                                                    <List>\n                                                        {\n                                                        groupAndMatchesItem.Matches\n                                                        .sort((prev, next) => {\n                                                            let a = new Date(prev.When);\n                                                            let b = new Date(next.When);\n                                                            if (a < b) return 1\n                                                            else return -1;\n                                                        })\n                                                        .map(match => {\n                                                            let place = props.places.find(p => p.UmbracoId == match.PlaceId)\n                                                            return <MatchListItem \n                                                            ClickHandler={() => goToViewMatch(match)}\n                                                            Match={match} Place={place}></MatchListItem>\n                                                        })}\n                                                    </List>\n                                                    :\n                                                    <SimpleCell>Нет расписания в группе</SimpleCell>\n                                            }\n                                        </Group>\n                                    )\n                                }\n                                )}\n                            </List>\n                        </Group>\n                    )\n                }; break;\n                case \"view\": {\n                    return (\n                        <Group>\n                            <FormItem top=\"Группа/лига\">\n                                {matches.selected.TournamentGroup.Name}\n                            </FormItem>\n                            <FormItem top=\"Команда 1\">\n                                {matches.selected.Team1.Name} {matches.selected.Team1Goals} : {matches.selected.Team2Goals} {matches.selected.Team2.Name}\n                            </FormItem>\n                            \n                            <FormItem top=\"Дата\">\n                                {new Date(matches.selected.When).toLocaleDateString()}\n                            </FormItem>\n                            \n                            <FormItem top=\"Место\">\n                                {matches.selected.Place.Name}\n                            </FormItem>\n                            <FormItem top=\"Матч сыгран\">\n                                {matches.selected.Played}\n                            </FormItem>\n                            <Button onClick={() => props.setMode(\"list\")}>Назад</Button>\n                        </Group>\n                    )    \n                }; break;\n                case \"add\": {  return <>add</>}; break;\n                case \"edit\": {  return <>edit</>}; break;\n            }\n        }; break;\n\n    }\n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, { goToPanel,\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule, setSelectedMatch,\n})(Shedule)","import React, { useEffect, useState } from 'react'\nimport {\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker,\n    Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel,\n    ActionSheet, ActionSheetItem, Gallery, Headline, Link\n} from '@vkontakte/vkui'\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\nimport {\n    setTournamentWhenBegin, setTournamentMode, setTournamentWhenEnd, setTournamentName, setTournamentReglament, \n    setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, \n    acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, changeTournamentTeamBidTournamentGroup, \n    deleteTeamFromTournament, setTournamentMatchLength, getTournamentTablesByTournamentId,  setTournamentOrganizatorName, setTournamentLink, setTournamentLink2, \n    setTournamentOrganizatorNameShort, setTournamentLink2Name, \n} from '../../../../store/tournamentsReducer'\nimport {goToPanel} from '../../../../store/systemReducer'\nimport {\n    getTeamInfo, setTeamMode,\n} from '../../../../store/teamsReducer'\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\nimport { connect } from 'react-redux';\nimport ListItem from '../ListItem/ListItem';\nimport BidListItem from '../ListItem/BidListItem';\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory';\nimport Shedule from '../../Common/Shedule/Shedule';\nimport ButtonWithNotify from '../../Common/WithNotify/ButtonWithNotify'\n\nconst w7percent = { width: '7%', textAlign: 'center', padding: '5px 0 5px 0' }\nconst w8percent = { width: '8%', textAlign: 'center', padding: '5px 0 5px 0'  }\nconst w20percent = { width: '20%', textAlign: 'left', padding: '5px 0 5px 0', overflow: 'hidden'  }\n\n\nconst TournamentItem = (props) => {\n    let currentDate = new Date();\n    let [tempGroupName, setTempGroupName] = useState(\"\");\n    let [currentTab, setCurrentTab] = useState(props.Tab ? props.Tab : \"info\");\n    let [activePopout, setActivePopout] = useState(null);\n    // let [slideIndex, setSlideIndex] = useState(0);\n    // let [isDraggable, setIsDraggable] = useState(true);\n    // let [showArrows, setShowArrows] = useState(true);\n\n    // это надо потом удалить. я вручную задал отображение вкладки расписания при открытии в режиме просмотра (для пользователей)\n\n    useEffect(() => {\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\n        props.getTournamentGroups(props.tournaments.selected)\n        props.getTournamentTablesByTournamentId(props.tournaments.selected.Id)\n\n    }, props.tournaments.selected)\n\n    \n    useEffect(() => {\n        props.mode == \"view\" ? setCurrentTab(\"shedule\") : setCurrentTab(\"info\")\n    }, props.mode)\n\n    useEffect(() => {\n        props.getTournamentTeams(props.tournaments.selected, props.myProfile)\n    }, props.tournaments.selected.TournamentGroups)\n\n\n    const addToTournament = () => {\n\n        if (tempGroupName.trim() != \"\") {\n            //addGroupToTournament\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\n            setTempGroupName(\"\");\n        }\n    }\n\n    const DelGroupFromTournament = (keyId, groupId) => {\n        //props.tournaments.selected.Id, item.KeyId, item.Id\n\n        if (groupId < 0)\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\n        else\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\n    }\n\n    const AcceptBid = (item) => {\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\n\n    }\n\n    const DeclineBid = (item, text) => {\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\n\n    }\n\n    const CellClick = (item) => {\n\n        props.getTeamInfo(item);\n        props.setTeamMode(\"view\");\n    }\n\n    // удаление команды из турнира\n    const DeleteTeam = (team, tg) => {\n\n        props.deleteTeamFromTournament(team, tg, props.myProfile, \"Ваша команда удалена из турнира\")\n    }\n\n    const SelectTournamentGroup = (newGroup, oldGroup, team) => {\n        props.changeTournamentTeamBidTournamentGroup(team, newGroup, oldGroup, props.myProfile)\n    }\n\n\n    const SaveTournament = () => {\n        //props.resetTournament();\n//debugger\n        props.saveSelectedTournament(props.tournaments.selected, props.myProfile)\n        //props.goToPanel(\"tournamentadmin\", false); // закрываем текущий турнир и выводим все турниры\n        props.setTournamentMode(\"view\");\n    }\n\n\n    const SetPopup = (team, oldTg) => {\n\n        setActivePopout(\n            <ActionSheet\n                onClose={() => setActivePopout(null)}\n                iosCloseItem={<ActionSheetItem autoclose mode=\"cancel\">Отменить</ActionSheetItem>}\n            //toggleRef={this.baseTargetRef.current}\n            >\n                {\n                    props.tournaments.selected.TournamentGroups.map(newTg => {\n                        return (\n                            <ActionSheetItem\n                                onClick={() => {\n\n                                    SelectTournamentGroup(newTg, oldTg, team)\n                                }}\n                                autoclose\n                            >\n                                {newTg.Name}\n                            </ActionSheetItem>\n                        )\n                    })\n                }\n                <ActionSheetItem autoclose>Отмена</ActionSheetItem>\n            </ActionSheet>)\n\n    }\n\n\n    switch (props.mode) {\n        case \"view\": {\n\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"shedule\">\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            {/* <FormItem top=\"Ваш город\">\n                                <InfoRow>\n                                    <Headline> {props.myProfile.CityUmbracoName}</Headline>\n                                </InfoRow>\n                            </FormItem> */}\n                            <Group \n                            //header={<Header mode=\"secondary\">Матчи</Header>}\n                            >\n                                <Shedule access=\"user\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Организатор\">\n                                <InfoRow><Link href={props.tournaments.selected.Link}>{props.tournaments.selected.OrganizatorName}</Link> ({props.tournaments.selected.OrganizatorNameShort})</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Название турнира\">\n                                <InfoRow>{props.tournaments.selected.Name}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Проводится\">\n                                <InfoRow>с {new Date(\n                                    props.tournaments.selected.WhenBegin.year,\n                                    props.tournaments.selected.WhenBegin.month - 1,\n                                    props.tournaments.selected.WhenBegin.day).toLocaleDateString()} \n                                    <span> по </span>{new Date(\n                                    props.tournaments.selected.WhenEnd.year,\n                                    props.tournaments.selected.WhenEnd.month - 1,\n                                    props.tournaments.selected.WhenEnd.day).toLocaleDateString()}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Описание турнира\">\n                                <InfoRow>{props.tournaments.selected.Details}</InfoRow>\n                            </FormItem>\n                            <FormItem top=\"Регламент турнира\">\n                                <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\n                            </FormItem>\n                            {props.tournaments.selected.Link2Name &&\n                            <FormItem top={props.tournaments.selected.Link2Name}>\n                                <InfoRow><Link href={props.tournaments.selected.Link2}>{props.tournaments.selected.Link2}</Link></InfoRow>\n                            </FormItem>\n                            }\n                                <FormItem top=\"Группы/лиги\">\n                                    <Group>\n                                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                            <List>\n                                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\n                                            </List>\n                                            :\n                                            <FormItem>\n                                                <InfoRow>Нет групп</InfoRow>\n                                            </FormItem>\n                                        }\n                                    </Group>\n                                </FormItem>\n                            </Group>\n                    </Panel>\n                    <Panel id=\"tables\">\n                        <Group>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\n                            </Tabs>\n                            {/* <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem> */}\n                            <Group header={<Header mode=\"secondary\">Таблицы</Header>}>\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                    <FormItem>\n                                        <List>\n                                            {props.tournaments.selected.TournamentGroups.map((item) => {\n                                                if (item.Name != \"\") {\n                                                    let table = props.tournaments.selectedTables.filter(tT => tT.TournamentGroupId == item.Id);\n                                                    table.sort((firstItem, secondItem) => firstItem.Place - secondItem.Place);\n                                                    let chet = false;\n                                                    return (\n                                                        <>\n                                                            <InfoRow>\n                                                                <Headline>{item.Name}</Headline>\n                                                            <table style={{width: '100%'}}>\n                                                                <tr>\n                                                                    <th style={w7percent}>М</th>\n                                                                    <th style={w20percent}>Команда</th>\n                                                                    <th style={w8percent}>И</th>\n                                                                    <th style={w8percent}>В</th>\n                                                                    <th style={w8percent}>П</th>\n                                                                    <th style={w8percent}>Н</th>\n                                                                    <th style={w8percent}>МЗ</th>\n                                                                    <th style={w8percent}>МП</th>\n                                                                    <th style={w8percent}>МР</th>\n                                                                    <th style={w8percent}>О</th>\n                                                                </tr>\n                                                                {\n                                                                    table.map((row) => {\n                                                                        chet = !chet;\n                                                                        return (\n                                                                            <tr style={chet ? {backgroundColor: 'lightgray'} : {backgroundColor: 'white'}}>\n                                                                                <td style={w7percent}>{row.Place}</td>\n                                                                                <td style={w20percent}>{row.TeamName}</td>\n                                                                                <td style={w8percent}>{row.Games}</td>\n                                                                                <td style={w8percent}>{row.Wins}</td>\n                                                                                <td style={w8percent}>{row.Loses}</td>\n                                                                                <td style={w8percent}>{row.Draws}</td>\n                                                                                <td style={w8percent}>{row.GoalsScored}</td>\n                                                                                <td style={w8percent}>{row.GoalsMissed}</td>\n                                                                                <td style={w8percent}>{row.GoalsDifference}</td>\n                                                                                <td style={w8percent}>{row.Points}</td>\n                                                                            </tr>\n                                                                        )\n\n                                                                    }\n\n                                                                    )}\n                                                            </table>\n                                                            <br />\n                                                            <br />\n                                                            </InfoRow>\n                                                        </>\n\n                                                    )\n                                                }\n                                                else\n                                                    return null;\n                                            })\n                                            }\n                                        </List>\n                                    </FormItem>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет групп</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </Group>\n                    </Panel>\n\n                </View>\n            )\n        }; break;\n        case \"add\": {\n            return (\n                <Group>\n                    <Header>Новый турнир</Header>\n                    <FormLayout>\n                        <FormItem top=\"Ваш город\">\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                        </FormItem>\n                        <FormItem top=\"Название турнира\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                        </FormItem>\n                        <FormItem top=\"Название организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorName} value={props.tournaments.selected.OrganizatorName} onChange={e => props.setTournamentOrganizatorName(e.currentTarget.value)} placeholder=\"Например, Федерация...\" />\n                        </FormItem>\n                        <FormItem top=\"Сокращенное название организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorNameShort} \n                            value={props.tournaments.selected.OrganizatorNameShort} \n                            onChange={e => props.setTournamentOrganizatorNameShort(e.currentTarget.value)} \n                            placeholder=\"Например, ФФК\" />\n                        </FormItem>\n                        <FormItem top=\"Ссылка на ресурс организатора\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link} value={props.tournaments.selected.Link} onChange={e => props.setTournamentLink(e.currentTarget.value)} placeholder=\"Например, yandex.ru\" />\n                        </FormItem>\n                        <FormItem top=\"Дополнительная ссылка\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link2} value={props.tournaments.selected.Link2} onChange={e => props.setTournamentLink2(e.currentTarget.value)} placeholder=\"Например, info@mail.ru\" />\n                        </FormItem>\n                        <FormItem top=\"Название дополнительной ссылки\">\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Link2Name} \n                            value={props.tournaments.selected.Link2Name} \n                            onChange={e => props.setTournamentLink2Name(e.currentTarget.value)} \n                            placeholder=\"Например, email\" />\n                        </FormItem>\n                        <FormItem top=\"Дата начала\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenBegin}\n                                //value={props.tournaments.selected.WhenBegin}\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Дата окончания\">\n                            <DatePicker\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                defaultValue={props.tournaments.selected.WhenEnd}\n                                //value={props.tournaments.selected.WhenEnd}\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\n                            />\n                        </FormItem>\n                        <FormItem top=\"Описание турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                        </FormItem>\n                        <FormItem top=\"Регламент турнира\">\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                        </FormItem>\n                        <FormItem top=\"Длительность матча, минут\">\n                            <Input type=\"Number\"\n                                defaultValue={props.tournaments.selected.MatchLength}\n                                value={props.tournaments.selected.MatchLength}\n                                placeholder=\"60\"\n                                onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                            ></Input>\n                        </FormItem>\n                        {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                        \n                        <FormItem top=\"Подверждение\">\n                            <ButtonWithNotify Message=\"Создать новый турнир?\" Yes={SaveTournament}>Создать</ButtonWithNotify>\n                            <ButtonWithNotify Message=\"Не создавать турнир?\" Yes={props.resetTournament} mode=\"secondary\">Отмена</ButtonWithNotify>\n                        </FormItem>\n                    </FormLayout>\n                </Group>\n            )\n        }; break;\n        case \"edit\": {\n            return (\n                <View popout={activePopout} activePanel={currentTab}>\n                    <Panel id=\"info\">\n                        <Group>\n                            <Header>Управление турниром</Header>\n                            <Tabs mode=\"buttons\">\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                            </Tabs>\n                            <FormLayout>\n                                <FormItem top=\"Ваш город\">\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                                </FormItem>\n                                <FormItem top=\"Название турнира\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\n                                </FormItem>\n                                <FormItem top=\"Название организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorName} onChange={e => props.setTournamentOrganizatorName(e.currentTarget.value)} placeholder=\"Например, Федерация...\" />\n                                </FormItem>\n                                <FormItem top=\"Сокращенное название организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.OrganizatorNameShort} \n                                    value={props.tournaments.selected.OrganizatorNameShort} \n                                    onChange={e => props.setTournamentOrganizatorNameShort(e.currentTarget.value)} \n                                    placeholder=\"Например, ФФК\" />\n                                </FormItem>\n                                <FormItem top=\"Ссылка на ресурс организатора\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link} onChange={e => props.setTournamentLink(e.currentTarget.value)} placeholder=\"Например, yandex.ru\" />\n                                </FormItem>\n                                <FormItem top=\"Дополнительная ссылка\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link2} onChange={e => props.setTournamentLink2(e.currentTarget.value)} placeholder=\"Например, info@mail.ru\" />\n                                </FormItem>\n                                <FormItem top=\"Название дополнительной ссылки\">\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Link2Name} \n                                    onChange={e => props.setTournamentLink2Name(e.currentTarget.value)} \n                                    placeholder=\"Например, email\" />\n                                </FormItem>\n                                <FormItem top=\"Дата начала\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenBegin}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={(value) => props.setTournamentWhenBegin(value)}\n                                        //dayPlaceholder=\"ДД\"\n                                        //monthPlaceholder=\"ММММ\"\n                                        //yearPlaceholder=\"ГГГГ\"\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Дата окончания\">\n                                    <DatePicker\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\n                                        defaultValue={props.tournaments.selected.WhenEnd}\n                                        //value={props.tournaments.selected.WhenBegin}\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\n                                    />\n                                </FormItem>\n                                <FormItem top=\"Описание турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\n                                </FormItem>\n                                <FormItem top=\"Регламент турнира\">\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\n                                </FormItem>\n                                <FormItem top=\"Длительность матча, минут\">\n                                    <Input type=\"Number\"\n                                        defaultValue={props.tournaments.selected.MatchLength}\n                                        value={props.tournaments.selected.MatchLength}\n                                        placeholder=\"60\"\n                                        onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\n                                    ></Input>\n                                </FormItem>\n                                {/* <FormItem top=\"Загрузите ваше фото\">\n                            <File before={<Icon24Camera />} controlSize=\"m\">\n                                Выбрать фото\n                            </File>\n                        </FormItem> */}\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\n                                        <List>\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\n                                        </List>\n                                        :\n                                        <FormItem>\n                                            <InfoRow>Нет групп</InfoRow>\n                                        </FormItem>\n                                    }\n                                </Group>\n                                <FormItem top=\"Новая группа/лига\">\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\n                                </FormItem>\n                                <FormItem top=\"Подверждение\">\n                                    <ButtonWithNotify Message=\"Внести изменения в турнир?\" Yes={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</ButtonWithNotify>\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\n                                </FormItem>\n                            </FormLayout>\n                        </Group>\n                    </Panel>\n                    <Panel id=\"bids\">\n                        <Header>Заявки от команд</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) =>\n                                            <BidListItem\n                                                KeyId={item.KeyId}\n                                                Accept={AcceptBid}\n                                                Decline={DeclineBid}\n                                                Item={item}\n                                            >\n\n                                            </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                }\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"teams\">\n                        <Header>Команды по группам</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\n                                {props.tournaments.selected.TournamentGroups.map(tg => {\n\n                                    return (\n                                        <Group header={<Header>{tg.Name}</Header>}>\n                                            <List>\n                                                {\n                                                    tg.Teams.map(team => {\n\n                                                        return (\n                                                            <RichCell\n                                                                caption={team.Details}\n                                                                after={<Icon24ChevronRightWithHistory\n                                                                    handleClick={() => CellClick(team)}\n                                                                    toMenuName=\"teamitem\"\n                                                                    data-story=\"teamitem\"\n                                                                ></Icon24ChevronRightWithHistory>\n                                                                }\n                                                                actions={\n                                                                    <>\n                                                                        <Button onClick={() => SetPopup(team, tg)} mode=\"primary\">Переместить</Button>\n                                                                        <ButtonWithNotify  Message=\"Удалить команду из турнира?\" Yes={() => DeleteTeam(team, tg)} mode=\"destructive\">Удалить</ButtonWithNotify>\n                                                                    </>\n                                                                }\n                                                            >{team.Name}</RichCell>\n                                                        )\n                                                    })\n                                                }\n                                            </List>\n                                        </Group>)\n\n                                })}\n\n                                {/* {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\n                                    <List>\n                                        {props.tournaments.bidsNew.map((item) => \n                                        <BidListItem\n                                            KeyId={item.KeyId} \n                                            Accept={AcceptBid}\n                                            Decline={DeclineBid}\n                                            Item={item}\n                                            >\n\n                                        </BidListItem>)}\n                                    </List>\n                                    :\n                                    <FormItem>\n                                        <InfoRow>Нет новых заявок</InfoRow>\n                                    </FormItem>\n                                } */}\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n                    <Panel id=\"shedule\">\n                        <Header>Расписание</Header>\n                        <Tabs mode=\"buttons\">\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\n                        </Tabs>\n                        <FormLayout>\n                            <FormItem top=\"Ваш город\">\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\n                            </FormItem>\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\n                                <Shedule access=\"admin\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\n                            </Group>\n                        </FormLayout>\n                    </Panel>\n\n                </View>\n                // <Tabs>\n                //     <TabsItem>\n\n                //     </TabsItem>\n                // </Tabs>\n\n            )\n        }; break;\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        SelectedName: state.tournamentsEntity.selected.Name,\n        TournamentTables: state.tournamentsEntity.selectedTables,\n        cities: state.cityEntity.cities,\n        myProfile: state.profileEntity.myProfile,\n    }\n}\n\nexport default connect(mapStateToProps, {setTournamentMode, goToPanel, setTournamentOrganizatorName, setTournamentLink, setTournamentLink2, \n    setTournamentOrganizatorNameShort, setTournamentLink2Name, \n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, getTeamInfo, setTeamMode, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength,\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid,\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, getTournamentTablesByTournamentId,\n})(TournamentItem)","import React, { Component } from 'react'\nimport {PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst BackButton = (props) => {\n  \n \n    return (\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\n        \n    )\n}\n\nexport default withHistorySave(BackButton)","import React, { useEffect } from 'react'\nimport { RichCell, InitialsAvatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, \n    DatePicker, CustomSelectOption, Header, SimpleCell, Div, calcInitialsAvatarColor } from '@vkontakte/vkui'\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\nimport { connect } from 'react-redux';\nimport {\n    getTournamentTeams,\n} from '../../../../store/tournamentsReducer'\nimport {\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n} from '../../../../store/matchReducer'\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\n\n\n// const SheduleContainer = (props) => {\n\n\n\n//     return <Shedule props={...props}></Shedule>\n// }\n\n\nconst Hot = (props) => {\n    \n    return (\n        <FormItem>\n            <Group header={props.Name}>\n                <List>\n                    {props.Matches && props.Matches.map(match => {\n                        let date = new Date(match.When);\n                        return (\n                                <RichCell\n                                    before={\n                                        <InitialsAvatar\n                                            gradientColor={calcInitialsAvatarColor(match.TournamentGroup.TournamentId)}\n                                            >\n                                                <h6>{match.TournamentGroup.Tournament.OrganizatorNameShort}</h6>\n                                        </InitialsAvatar>\n                                    // <Avatar>{match.TournamentGroup.Tournament.OrganizatorNameShort}</Avatar>\n                                }\n                                    onClick={() => props.ClickHandler(match)}\n                                    text={\n                                        match.Played ?\n                                            <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\n                                            <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\n                                    }\n                                    caption={match && match.Place ? match.Place.Name : \"место не указано\"}\n                                >\n                                    {match.Played ?\n                                        `${match.Team1Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2Name}` :\n                                        `${match.Team1Name} - ${match.Team2Name}`\n                                    }\n                                </RichCell>\n                        )\n                    }\n                    )}\n                </List>\n            </Group>\n        </FormItem>\n    )\n                \n\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        tournaments: state.tournamentsEntity,\n        mode: state.matches.mode,\n        matches: state.matches.matches,\n        //places: state.placeEntity.places,\n        places: state.simplePlaceEntity.places,\n        myProfile: state.profileEntity.myProfile,\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\n        //access: state.matches.access,\n    }\n}\n\nexport default connect(mapStateToProps, {\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\n})(Hot)","import React, { Component } from 'react'\nimport {Card, PanelHeaderBack } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CardWithHistory = (props) => {\n  \n \n    return (\n        <Card isBack={false} {...props}></Card>\n        \n    )\n}\n\nexport default withHistorySave(CardWithHistory)","import React, { Component } from 'react'\nimport { CellButton } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst CellButtonWithHistory = (props) => {\n  //debugger\n \n    return (\n        <CellButton isBack={false} {...props}></CellButton>\n        \n    )\n}\n\nexport default withHistorySave(CellButtonWithHistory)","import React, { Component } from 'react'\nimport {TabbarItem } from '@vkontakte/vkui'\nimport { withHistorySave } from '../HOCs/withHistorySave'\n\nconst TabbarItemWithHistory = (props) => {\n  \n \n    return (\n        <TabbarItem isBack={false} {...props}></TabbarItem>\n        \n    )\n}\n\nexport default withHistorySave(TabbarItemWithHistory)","import React from 'react'\n\nconst ProfilePanel = (props) => {\n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default ProfilePanel","export default __webpack_public_path__ + \"static/media/player300-s.5ad7daca.png\";","export default __webpack_public_path__ + \"static/media/stadium300-s.e5a62e23.png\";","export default __webpack_public_path__ + \"static/media/tournament300.00b15e45.png\";","import {ampluaTypes, myProfile, users} from './constants/commonConstants'\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\n\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\nconst PROFILE_SET_MY_TOTAL_EXP = \"PROFILE_SET_MY_TOTAL_EXP\";\nconst PROFILE_SET_MY_NAME = \"PROFILE_SET_MY_NAME\";\nconst PROFILE_SET_MY_BIRTH = \"PROFILE_SET_MY_BIRTH\";\nconst PROFILE_SET_MY_SURNAME = \"PROFILE_SET_MY_SURNAME\";\n\nlet demoUser = users[0];\n\nconst initState = {\n    myProfile: null,\n    vkProfile: null,\n    triedToGetProfile: 0,\n\n     // level \n\n}\n\n\nexport let profileReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case PROFILE_SET_VK_PROFILE_INFO: {\n            return {...state,\n                vkProfile: {...action.user},\n            };\n        }\n        case PROFILE_SET_USER_PROFILE: {\n            let birth = action.user.Birth ? `${new Date(action.user.Birth).getDate()}.${new Date(action.user.Birth).getMonth()}.${new Date(action.user.Birth).getYear()}` : null;\n\n            return {...state,\n                myProfile: {...action.user},\n                vkProfile: {...state.vkProfile,\n                bdate: birth\n                }\n            };\n        }\n        case PROFILE_SET_TRIED_TO_GET_PROFILE: {\n            return {...state,\n                triedToGetProfile: action.tried,\n            };\n        }\n        case PROFILE_SET_MY_TOTAL_EXP: {\n\n            return {...state,\n                myProfile: {...state.myProfile,\n                    TotalExpirience: Math.round(action.exp),\n                }\n            };\n        }\n        case PROFILE_SET_MY_NAME: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Name: action.name,\n                }\n            };\n        }\n        case PROFILE_SET_MY_SURNAME: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Surname: action.surname,\n                }\n            };\n        }\n        case PROFILE_SET_MY_BIRTH: {\n            return {...state,\n                myProfile: {...state.myProfile,\n                    Birth: new Date(action.birthDate.year, action.birthDate.month-1, action.birthDate.day+1),\n                }\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setVkProfileInfo = (user) => {\n    \n    return {\n        type: PROFILE_SET_VK_PROFILE_INFO,\n        user\n    }\n}\n\nexport const setUserProfile = (user) => {\n    return {\n        type: PROFILE_SET_USER_PROFILE,\n        user\n    }\n}\n\nexport const setTriedToGetProfile = (tried) => {\n    return {\n        type: PROFILE_SET_TRIED_TO_GET_PROFILE,\n        tried\n    }\n}\n\n// установка опыта\nexport const setMyTotalExpirience = (exp) => {\n    \n    //let exp = e.CurrentTarget.value\n    return {\n        type: PROFILE_SET_MY_TOTAL_EXP,\n        exp\n    }\n}\n\n// установка имени\nexport const setUserName = (e) => {\n\n    return {\n        type: PROFILE_SET_MY_NAME,\n        name: e.currentTarget.value\n    }\n}\n\n// установка фамилии\nexport const setUserSurName = (e) => {\n\n    return {\n        type: PROFILE_SET_MY_SURNAME,\n        surname: e.currentTarget.value\n    }\n}\n\n// установка даты рождения\nexport const setBirthDate = (birthDate) => {\n    return {\n        type: PROFILE_SET_MY_BIRTH,\n        birthDate\n    }\n}\n\n// получение данных профиля (без авторегистрации)\nexport const getUserProfile = (vkUserData) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getUserProfile(vkUserData)\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(0));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setTriedToGetProfile(1))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n            //dispatch(setUserProfile(demoUser))\n            //dispatch(setTriedToGetProfile(true))\n\n        }\n    }\n}\n\n\n// установка нового города пользователю\nexport const setUserProfileCity = (userProfile) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n        debugger\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.setUserProfileCity(userProfile).then()\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        //dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n// авторизация (со встроенной регистрацией)\nexport const getAuthInfo = (vkProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.getAuthInfo(vkProfileInfo)\n                .then(pl => {\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(0));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n// сохранение профиля\nexport const saveUserProfile = (ProfileInfo) => {\n    return dispatch => {\n        dispatch(setGlobalPopout(true))\n        dispatch(resetError())\n\n        if (authQueryString && authQueryString.length > 0)\n            ProfileAPI.saveUserProfile(ProfileInfo)\n                .then(pl => {\n                    if (pl) {\n                        dispatch(setUserProfile(pl.data));\n                        dispatch(setTriedToGetProfile(0));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при сохранении профиля\")))\n                        dispatch(setGlobalPopout(false))\n\n                    }\n                })\n                .catch(error => {\n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n\n        }\n    }\n}\n\n\nexport default profileReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\n\n\nconst initState = {\n    cities: [],\n}\n\n\nlet cityReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getAllCitiesFromServer = () => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            CityAPI.getAll().then()\n                .then(pl => {\n                    \n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default cityReducer;","import { ProfileAPI, CityAPI, errorObj, VKAPI } from './../utils/api/api.js'\nimport { authQueryString } from './../utils/api/server';\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\nimport { setUserProfile } from \"./profileReducer\";\n\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\nconst VK_SET_SELECTED_USER = \"VK_SET_SELECTED_USER\";\n\n\nconst initState = {\n    selectedUser: {},\n    cities: [],\n}\n\n\nlet vkReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case CITY_GET_ALL_FROM_SERVER: {\n            return {...state,\n                cities: [...action.cities],\n            };\n        }\n        case VK_SET_SELECTED_USER:{\n            return {...state,\n                selectedUser: {...action.user},\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\n\nexport const setSelectedUser = (user) => {\n    return {\n        type: VK_SET_SELECTED_USER,\n        user\n    }\n}\n\nexport const setCities = (cities) => {\n    return {\n        type: CITY_GET_ALL_FROM_SERVER,\n        cities\n    }\n}\n\nexport const getUser = (id) => {\n    return dispatch => {\n        if (authQueryString && authQueryString.length > 0)\n            VKAPI.getUser(id)\n                .then(pl => {\n                    debugger\n                    if (pl && pl.data) {\n                        dispatch(setCities(pl.data));\n                        dispatch(setGlobalPopout(false))\n                    }\n                    else {\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\n                        dispatch(setGlobalPopout(false))\n                    }\n                })\n                .catch(error => {\n                    \n                    dispatch(setErrorMessage(error))\n                    dispatch(setGlobalPopout(false))\n                })\n        else {\n            \n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\n            dispatch(setGlobalPopout(false))\n        }\n    }\n}\n\n\n\n\n\n\nexport default vkReducer;","import React, { useEffect } from 'react'\nimport { RichCell, Avatar, Group, FormItem, Textarea } from '@vkontakte/vkui'\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\nimport { dateToString, timeToString } from '../../../../utils/convertors/dateUtils';\n\nconst schet = {\n    fontWeight: 'bold', \n    color: 'yellow',\n    backgroundColor: 'gray',\n    padding: '1px 7px',\n    borderRadius: '10px',\n}\n\nconst win = {\n    fontWeight: 'bold',\n    //color: 'orange',\n}\n\nconst lose = {\n    color: 'darkgray',\n    //color: 'orange',\n}\n\nconst MatchItem = (props) => {\n    \n    \n    let match=props.match;\n    let place=props.Place;\n    let date = new Date(match.When);\n\n    return (\n        <Group>\n            <FormItem>\n                {match.Team1 ? match.Team1.Name : match.Team1Name} \n                {match && (match.Played ? `  ${match.Team1Goals} : ${match.Team2Goals}  ` : `  :  `)} \n                {match.Team2 ? match.Team2.Name : match.Team2Name}\n            </FormItem>\n            <FormItem top=\"Группа/лига\">\n                {match.TournamentGroup.Name}\n            </FormItem>\n            \n            <FormItem top=\"Комментарий к матчу\">\n                <Textarea \n                value={match.Description} \n                readOnly\n                style={{minHeight: '100px'}}\n                ></Textarea>\n            </FormItem>\n            <FormItem top=\"Дата\">\n                {new Date(match.When).toLocaleDateString()}\n            </FormItem>\n            \n            <FormItem top=\"Место\">\n                {match.Place.Name}\n            </FormItem>\n            <FormItem top=\"Статус матча\">\n                {match.Played ? \"Сыгран\" : \"Не сыгран\"}\n            </FormItem>\n            \n        </Group>\n    ) \n        // return (\n        //     <RichCell\n        //         onClick={props.ClickHandler}\n        //         caption={place ? place.Name : \"Ошибка загрузки данных о месте\"}\n        //         text={\n        //             match.Played ?\n        //                 <span style={{ \"color\": \"green\" }}>Сыгран <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span></span> :\n        //                 <span style={{ \"color\": \"blue\" }}>Состоится <span>в {`${dateToString(date, 0, 0, 0, true)}`}</span> в {timeToString(date.getHours(), date.getMinutes())}</span>\n        //         }\n        //     >\n        //         {match.Played ? <span>\n        //                 <span \n        //                     style={(+match.Team1Goals > +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n        //                     >{match.Team1.Name} </span>\n        //                 <span style={schet}>{match.Team1Goals} - {match.Team2Goals}</span>\n        //                 <span \n        //                     style={(+match.Team1Goals < +match.Team2Goals) ? win : (+match.Team1Goals == +match.Team2Goals) ? {} : lose}\n        //                 > {match.Team2.Name}</span>\n        //             </span> :\n        //             <span>{match.Team1.Name} - {match.Team2.Name}</span>\n        //         }\n        //     </RichCell>\n//         )\n }\n\nexport default MatchItem","import bridge from '@vkontakte/vk-bridge';\nimport { Button, calcInitialsAvatarColor, Caption, Card, CardGrid, Cell, DatePicker, Div, Epic, FormItem, Group, Header, InfoRow, InitialsAvatar, Input, List, Panel, PanelHeader, PullToRefresh, ScreenSpinner, Slider, Tabbar, Title, View } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport {getCurrentExpirienceName, useIsConnected} from './store/selectors/selectors'\nimport request from 'request'\nimport { connect } from 'react-redux';\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\nimport SimpleCollectItem from './components/Panels/AdminPanel/Collect/SimpleCollect/SimpleCollectItem';\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\nimport Hot from './components/Panels/Common/Hot/Hot';\nimport CardWithHistory from './components/Panels/Common/WithHistory/CardWithHistory';\nimport CellButtonWithHistory from './components/Panels/Common/WithHistory/CellButtonWithHistory';\nimport RichCellWithHistory from './components/Panels/Common/WithHistory/RichCellWithHistory';\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\nimport ButtonWithNotify from './components/Panels/Common/WithNotify/ButtonWithNotify';\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\nimport player from './img/common/player300-s.png';\nimport stadium from './img/common/stadium300-s.png';\nimport tournament from './img/common/tournament300.png';\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity } from './store/bidTeamsReducer';\nimport { getAllCitiesFromServer } from './store/cityReducer';\nimport { getAllSimpleCollectsInCityByCityUmbracoId, selectSimpleCollect, setCollectItemMode } from './store/collectReducer';\nimport { setActiveMenuItem } from './store/mainMenuReducer';\nimport { getMatchesInCurrentCity, setHotPanel, setSelectedMatch } from './store/matchReducer';\nimport { getAuthInfo, getUserProfile, setTriedToGetProfile, setUserProfileCity, setBirthDate,\n\tsaveUserProfile, setVkProfileInfo, setUserName, setUserSurName, setMyTotalExpirience } from './store/profileReducer';\nimport { getAllRentsInCityByCityId } from './store/rentReducer';\nimport { getAllSimplePlacesInCityByCityId } from './store/simplePlaceReducer';\nimport { goToPanel, resetError, setCurrentModalWindow, checkConnection, setGlobalPopout, \n\tsetLoading, setShowAdminTourneyTab, updateLoading } from './store/systemReducer';\nimport { getAllCityTournamentAdminsByCityId, getTournamentsByCityId, setSelectedTournament, setTournamentMode } from './store/tournamentsReducer';\nimport { getUser, setSelectedUser } from './store/vkReducer';\nimport { addToTime, dateToString, jSDateValueToDateSelectorValue } from './utils/convertors/dateUtils';\nimport MatchItem from './components/Panels/AdminPanel/Match/MatchItem';\nimport { useDispatch } from 'react-redux';\n\n\n\nconst App = (props) => {\n\tconst [fetchedUser, setUser] = useState(null);\n\tconst [isFetching, setIsFetching] = useState(false);\n\t\n\tconst debugModeOn = false; // флаг показа логов\n\t//const [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\n\t//const [modalWindow, setModalWindow] = useState(null);\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\n\tconst [timerStarts, setTimerStarts] = useState(false);\n\tlet connectionTimer = null;\n\n\tconst cardStyle = {\n\t\tposition: 'absolute', \n\t\tbottom: '0px', \n\t\tleft:'0px',  \n\t\twidth: '100%', \n\t\theight: '20%',\n\t\tbackground: 'white', \n\t\tpadding: '15px 0',\n\t\ttextAlign: 'center',\n\t\topacity: '0.9',\n\t\tborderRadius: '10px'\n\t}\n\n\n\n\t// функция вывода на консоль. легко отключается флагом\n\tconst consoleLog = (message) => {\n\t\tif (debugModeOn)\n\t\t\tconsole.log(message);\n\t}\n\n// интервальная проверка новых мест, сборов и аренд\n\tconst checkMovings = () => {\n\t\t//alert('Привет');\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t// загружаем места этого города\n\t\t\t{\n\t\t\t\t// получаем список простых мест по umbId города\n\t\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t\t// получаем список простых сборов\n\t\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\t\n\t\t\t\t// получаем список аренд\n\t\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\t\t\t}\n\t\t}\n\t}\n\n\n\n// интервальная проверка соединения\n\tconst CheckConnection = () => {\n\t\tlet ii = store.getState();\n\n\t\tif (ii.system.Connected) {\n\t\t\tconsoleLog(\"timer stopped in CheckConnection\");\n\t\t\tclearInterval(connectionTimer);\n\t\t}\n\t\telse{\n\t\t\tconsoleLog(\"timer fires in CheckConnection, props.Connected=\" + ii.system.Connected);\n\t\t\tprops.checkConnection();\n\t\t}\n\t}\n\n\n\tconst CloseModal = () => {\n\t\tprops.resetError()\n\t\tprops.setCurrentModalWindow(null)\n\t}\n\n\n\t// !! ================ useffects загрузка приложения ================== !!\n\n\t// загрузка информации о пользователе ВК (внутри первого useffect с пустыми параметрами)\n\tasync function fetchData() {\n\n\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n\t\tsetUser(user);\n\t\tprops.setVkProfileInfo(user);\n\n\t}\n\n\t// 1 это системное, загрузка приложения вк\n\tuseEffect(() => {\n\t\tif (props.myProfile && props.myProfile.CityUmbracoId != undefined){\n\t\t\tprops.setLoading(true);\n\t\t}\n\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\n\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n\t\t\t}\n\t\t});\n\n\t\tfetchData();\n\t\tconsoleLog(\"1 start fetchData()\")\n\n\t}, []);\n\n\t// 2 при загрузке приложения\n\tuseEffect(() => {\n\n\t\tif (!props.Connected) {\n\n\t\t\tconsoleLog(\"2 start checkConnection()\")\n\t\t\tprops.checkConnection();\n\t\t\tconnectionTimer = setInterval(() => {\n\t\t\t\tCheckConnection()\n\t\t\t}, 5000)\n\t\t}\n\t}, [props.vkProfile])\n\n\t// 3 после загрузки профиля вк проверяем инициируем соединение с сервером\n\tuseEffect(() => {\n\t\t// нужно узнать город, далее если этого города нет в списке поддерживаемых, предлжить выбрать другой город и отправить заявку на добавление города. Всё это в модалке\n\t\t// другой вопрос. если кто-то создает фейковый сбор, как гарантировать другим, что это не фейк?\n\t\t// ввести в рейтинг поле \"гарант сбора. если поступает жалоба на сбор (не было сбора), модератор засчитывает штрафной балл организатору\"\n\t\t// у людей, которые первый раз собирают, писать город из профиля, количество друзей и то, что человек еще не собирал ни разу, а значит может быть фейком\n\t\t// еще нужно запрашивать права на доступ к инфе: город, дата рождения, друзья, \n\t\t// а еще в бэке надо сделать так, чтобы записи в Leg и City не плодились, а искали соответствующие из умбрако и ставили их Id\n\t\tconsoleLog(\"3 check if. Connected=\" + (props.Connected) + \" , vkProfile=\" + (props.vkProfile!=null) + \", myProfile=\" + (props.myProfile==null))\n\t\t\n\t\tif (props.Connected && props.vkProfile && props.vkProfile.city && !props.myProfile) {\n\t\t\tconsoleLog(\"3 start getUserProfile()\")\n\t\t\tprops.getUserProfile(props.vkProfile);\n\t\t}\n\n\t\tif (props.Connected) {\n\t\t\tconsoleLog(\"3 timer stopped\");\n\t\t\t//clearInterval(connectionTimer);\n\t\t}\n\n\t}, [props.Connected, props.vkProfile])\n\n\t// 4 загрузка профиля\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city && props.myProfile) {\n\t\t\tconsoleLog(\"4 vkprofile and myprofile loaded\")\n\n\t\t\tif((props.vkProfile.bdate != undefined) && (props.vkProfile.bdate.split('.').length > 2) && (new Date(props.myProfile.Birth).getFullYear() > 1920)) // \n\t\t\t{\n\t\t\t\tconsoleLog(\"4 no error in birthdate from vk\")\n\n\t\t\t\tprops.setCurrentModalWindow(null);\n\t\t\t\tprops.getAllCitiesFromServer();\n\t\t\t\tconsoleLog(\"4 start getAllCitiesFromServer()\")\n\n\t\t\t\tif (props.myProfile.CityUmbracoId != null && props.myProfile.CityUmbracoId == -1) {\n\t\t\t\tconsoleLog(\"4 error in userprofile city\")\n\n\t\t\t\t\t//debugger\n\t\t\t\t\t// предлагаем выбрать город\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t//props.getUser(19757699);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconsoleLog(\"4  error in birthdate from vk or myProfile.Birth.getFullYear < 1920\")\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\t// не загрузился город или вк профиль или мой профиль\n\t\t}\n\n\t}, [props.myProfile])\n\t\n\t// 5 регистрация пользователя\n\tuseEffect(() => {\n\n\t\tif (props.vkProfile && props.vkProfile.city) {\n\t\t\tif ((!props.myProfile) && (props.triedToGetProfile>0)) { // не зарегистрирован\n\t\t\t\tconsoleLog(\"5 not registred\")\n\n\t\t\t\tif ((props.vkProfile) && (props.vkProfile.bdate == undefined))\n\t\t\t\t{\n\t\t\t\t\tconsoleLog(\"5 selectBirth\")\n\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} action2={props.setTriedToGetProfile} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t\telse if ((props.vkProfile) && (props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() < 1920)) {\n\t\t\t\t\tconsoleLog(\"5 selectBirthYear\")\n\t\t\t\t\t\n\t\t\t\t\tprops.setGlobalPopout(false);\n\t\t\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectBirthYear\" data={props.vkProfile} action={props.setVkProfileInfo} action2={props.setTriedToGetProfile} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tprops.getAuthInfo(props.vkProfile); // регаем\n\t\t\t\t\tconsoleLog(\"5 start getAuthInfo() - register\")\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [props.triedToGetProfile])\n\t\n\t// 6 загрузка мест, админов города, текущих турниров\n\tuseEffect(() => {\n\t\t//consoleLog(\"6 cities fire\")\n\t\t// а это уже когда прогрузился и выбран город профиля\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\n\t\t\t\n\t\t\tconsoleLog(\"6 start loadAll()\")\n\n\n\t\t\t// загружаем места этого города\n\t\t\tprops.goToPanel(\"hot\", false)\n\n\t\t\t// получаем список админов турниров города по umbId города\n\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список активных турниров города по umbId города и текущей дате\n\t\t\tprops.getTournamentsByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых мест по umbId города\n\t\t\tprops.getAllSimplePlacesInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список простых сборов\n\t\t\tprops.getAllSimpleCollectsInCityByCityUmbracoId(props.myProfile.CityUmbracoId);\n\n\t\t\t// получаем список аренд\n\t\t\tprops.getAllRentsInCityByCityId(props.myProfile.CityUmbracoId);\n\n\t\t\tif (!timerStarts)\n\t\t\t{\n\t\t\t\tsetTimerStarts(true);\n\t\t\t\tsetTimeout(() => setInterval(() => checkMovings(), 20000), 20000)\n\n\t\t\t}\n\n\t\t}\n\n\t\t// это пока не прогрузился город профиля (не выбран)\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\n\t\t{\n\n\t\t\t// предлагаем выбрать город\n\t\t\tprops.setGlobalPopout(false);\n\t\t\tprops.setCurrentModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => props.setCurrentModalWindow(null)}></ModalCommon>)\n\t\t}\n\n\n\t}, [ props.cities]) //props.myProfile, props.vkProfile,\n\n\t// 7 загрузка матчей в выбранном городе\n\tuseEffect(() => {\n\t\tif (props.places && props.places.length > 0) {\n\n\t\t\tprops.getMatchesInCurrentCity(props.myProfile);\n\t\t\tconsoleLog(\"7 start getMatchesInCurrentCity()\")\n\t\t\t\n\t\t\t// завершили загрузку\n\t\t\tif (props.Loading)\n\t\t\t\tprops.setLoading(false);\n\t\t}\n\t}, [props.places])\n\n\t// при смене глобального Popout и возникновении ошибки\n\tuseEffect(() => {\n\t\tif (props.errorObject && props.errorObject != \"\") {\n\t\t}\n\t\telse {\n\t\t}\n\t}, [props.errorObject])\n\n    // отобразить панель админа турниров\n\tuseEffect(() => {\n\t\t// если загрузились админы города\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\n\t\t\t// отображаем пункт меню администрирование турниров\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\n\t\t\t\tprops.setShowAdminTourneyTab(true)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprops.setShowAdminTourneyTab(false)\n\t\t\t}\n\t\t}\n\t}, [props.tournamentAdmins])\n\n\t// !! ================ useffects загрузка приложения ================== !!\n\n\tconst onRefresh = () => {\n\t\twindow.location.reload(true);\n\t\tsetIsFetching(false);\n\t}\n\n\tconst TournamentSelect = (item) => {\n\t\t//debugger\n\t\tprops.setTournamentMode(\"view\");\n\t\tprops.setSelectedTournament(item);\n\t\t// надо заполнять TournamentGroups!\n\t\t//props.setActiveMenuItem(\"tournamentitem\"); // отключил, тк установил компонент hoc withHistory\n\t\t//toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\"\n\t}\n\n\tconst CollectSelect = (item) => {\n\t\t//debugger\n\t\tprops.selectSimpleCollect(item);\n\t\tprops.setCollectItemMode(\"view\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил тк использовал компонент с hoc withHistory\n\t}\n\n\tconst CollectAdd = () => {\n\t\t//debugger\n\t\tprops.setCollectItemMode(\"add\");\n\t\t//props.setActiveMenuItem(\"collectadmin\"); // отключил, тк сделал кнопку через hoc withHistory\n\t}\n\n\tconst UpdateFromServer = () => {\n\t\twindow.location.reload(true);\n\t}\n\n\tlet goToViewMatch = (match) => {\n\n        props.setSelectedMatch(match)\n\n        props.goToPanel(\"matchitem\", false)\n    }\n\n\tlet test = () => {\n\t\t\n\t\t\n\t}\n\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\n\t\tif (menuItem.enabled && menuItem.show)\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\n\t\telse\n\t\t\treturn null\n\t}\n\t).filter(i => i);\n\n\t//if ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\n\n\n\n\treturn (\n\t\t<PullToRefresh\n            onRefresh={onRefresh}\n            isFetching={isFetching}\n          >\n\t\t\t  <PanelHeader left={<BackButton isBack={true} />}>\n\t\t\t\t  <h6>потяните вниз для обновления</h6>\n\t\t\t  </PanelHeader>\n\t\t\t<Epic\n\t\t\t\tactiveStory={props.mainMenu.activeItem.name}\n\t\t\t\ttabbar={props.Connected ? \n\t\t\t\t\t<Tabbar>\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\n\t\t\t\t\t\t{/* <TabbarItemWithHistory toMenuName=\"collectslist\" selected={\"collectslist\" === props.mainMenu.activeItem.name} data-story=\"collectslist\" text=\"Сборы\"></TabbarItemWithHistory> */}\n\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\n\t\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\n\t\t\t\t\t\t{\n\t\t\t\t\t\t//props.ShowAdminTeamTab \n\t\t\t\t\t\tprops.ShowAdminTourneyTab \n\t\t\t\t\t\t&& <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\n\t\t\t\t\t</Tabbar>\n\t\t\t\t: null\t\n\t\t\t\t}>\n\n\t\t\t\t<View id=\"hot\" \n\t\t\t\t//activePanel={props.matches.hotPanel} \n\t\t\t\tactivePanel=\"main\" \n\t\t\t\tmodal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t{/* <PanelHeader >Горячее в городе</PanelHeader> */}\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сервисы</Header>}>\n\t\t\t\t\t\t\t<CardGrid size=\"s\">\n\t\t\t\t\t\t\t\t<CardWithHistory\n\t\t\t\t\t\t\t\t\tdata-story=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\ttext=\"Перейти к турнирам\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\ttoMenuName=\"allTournaments\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t\t//handleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={tournament}></img>\n\t\t\t\t\t\t\t\t\t<span style={cardStyle}>Турниры<br />города</span>\n\t\t\t\t\t\t\t\t</CardWithHistory>\n\t\t\t\t\t\t\t\t<Card>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={player}></img>\n\t\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t<Card onClick={test}>\n\t\t\t\t\t\t\t\t\t<img style={{width: '100%'}} src={stadium}></img>\n\t\t\t\t\t\t\t\t\t<span style={cardStyle}>Скоро<br />запуск</span>\n\t\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Предстоящие матчи</Header>}>\n\t\t\t\t\t\t\t<Hot Name=\"Сегодня\" ClickHandler={goToViewMatch} Matches={props.matches.hot.today}></Hot>\n\t\t\t\t\t\t\t<Hot Name=\"Завтра\" ClickHandler={goToViewMatch} Matches={props.matches.hot.tomorrow}></Hot>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Сыграны вчера</Header>}>\n\t\t\t\t\t\t\t<Hot ClickHandler={goToViewMatch} Matches={props.matches.hot.yesterday}></Hot>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t\n\t\t\t\t</View>\n\t\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<Group header={<Header>Текущие турниры города</Header>}>\n\t\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.tournament.tournaments.map(t => {\n\n\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\tcaption={<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<p style={{lineHeight: '7px', fontSize: '12px', color: 'gray'}}>Организатор: {t.OrganizatorName}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t{/* <p style={{lineHeight: '7px', fontSize: '12px', color: 'gray'}}>Админ: {t.Founder.Name} {t.Founder.Surname}</p> */}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>}\n\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.WhenBegin) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t`Стартует \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.WhenBegin).getDate() <= 9 ? \"0\" + (new Date(t.WhenBegin).getDate()) : (new Date(t.WhenBegin).getDate())}.${new Date(t.WhenBegin).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.WhenBegin).getMonth() + 1) : (new Date(t.WhenBegin).getMonth() + 1)}.${new Date(t.WhenBegin).getFullYear()}`\n\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"}\n\t\t\t\t\t\t\t\t\t\t\thandleClick={() => TournamentSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\tdata-story=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"tournamentitem\"\n\t\t\t\t\t\t\t\t\t\t\tbefore={<InitialsAvatar\n\t\t\t\t\t\t\t\t\t\t\t\tgradientColor={calcInitialsAvatarColor(t.Id)}\n\t\t\t\t\t\t\t\t\t\t\t\tsize={56}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h6>{t.OrganizatorNameShort}</h6>\n\t\t\t\t\t\t\t\t\t\t\t</InitialsAvatar>}\n\t\t\t\t\t\t\t\t\t\t>{t.Name}</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</List>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group hidden header={<Header>Архивные турниры города</Header>}>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"collectslist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Все сборы</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t<CellButtonWithHistory\n\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttext=\"Создать сбор\" // необходимо для использования withHistory\n\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"  // необходимо для использования withHistory\n\t\t\t\t\t\t\t\thandleClick={CollectAdd} // необходимо для использования withHistory\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tАрендовать площадку и собрать людей</CellButtonWithHistory>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t<Group header={<Header>Текущие сборы города</Header>}>\n\t\t\t\t\t\t\t<List>\n\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tprops.collect.collects.sort((a, b) => new Date(a.When).getTime() - new Date(b.When).getTime())\n\t\t\t\t\t\t\t\t\t\t.map(t => {\n\t\t\t\t\t\t\t\t\t\t\tlet timeEnding = addToTime(new Date(t.When), 0, t.DurationMinutes);\n\n\t\t\t\t\t\t\t\t\t\t\treturn <RichCellWithHistory\n\t\t\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Creator.Name} ${t.Creator.Surname}`}\n\t\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.When) > new Date()) ?\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Начало \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getDate() <= 9 ? \"0\" + (new Date(t.When).getDate()) : (new Date(t.When).getDate())}.${new Date(t.When).getMonth() + 1 <= 9 ? \"0\" + (new Date(t.When).getMonth() + 1) : (new Date(t.When).getMonth() + 1)}.${new Date(t.When).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tв \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.When).getHours() <= 9 ? \"0\" + (new Date(t.When).getHours()) : (new Date(t.When).getHours())}:${new Date(t.When).getMinutes() <= 9 ? \"0\" + (new Date(t.When).getMinutes()) : (new Date(t.When).getMinutes())}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`\n\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t((timeEnding > new Date())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Закончен\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\thandleClick={() => CollectSelect(t)}\n\t\t\t\t\t\t\t\t\t\t\t\tafter={`${t.Cost} руб.`}\n\t\t\t\t\t\t\t\t\t\t\t\tdata-story=\"collectadmin\"\n\t\t\t\t\t\t\t\t\t\t\t\ttoMenuName=\"collectadmin\"\n\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t({t.Members.length}/{t.NeedMembers}) - {t.Name}\n\t\t\t\t\t\t\t\t\t\t\t</RichCellWithHistory>\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</List>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group hidden header={<Header>Архивные сборы</Header>}>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"collectadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Управление сборами</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<SimpleCollectItem></SimpleCollectItem>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"profile\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Мой профиль</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <FormItem>\n\t\t\t\t\t\t\t<InfoRow header=\"Город из профиля ВК\">{props.myProfile && props.myProfile.CityName}</InfoRow>\n\t\t\t\t\t\t\t<InfoRow header=\"Город привязки турниров и сборов\">{props.myProfile && props.myProfile.CityUmbracoName}</InfoRow>\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem top=\"Имя\">\n\t\t\t\t\t\t\t\t<Input value={props.myProfile && props.myProfile.Name} onChange={props.setUserName}></Input>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem top=\"Фамилия\">\n\t\t\t\t\t\t\t\t<Input value={props.myProfile && props.myProfile.Surname} onChange={props.setUserSurName}></Input>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t<InfoRow header=\"Уровень игры\">\n\t\t\t\t\t\t\t\t<Caption level=\"2\">Указанное здесь значение будет влиять на подбор партнеров по игре. Указав наиболее правдивое значение, вам будет удобнее пользоваться сервисом</Caption>\n\t\t\t\t\t\t\t\t<Caption level=\"2\">Для изменения уровня перетягивайте ползунок влево и вправо. После выбора уровня нажмите на кнопку \"Сохранить\"</Caption>\n\t\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t\t<Slider\n\t\t\t\t\t\t\t\t\tmin={0}\n\t\t\t\t\t\t\t\t\tmax={100}\n\t\t\t\t\t\t\t\t\tvalue={props.myProfile && Number(props.myProfile.TotalExpirience)}\n\t\t\t\t\t\t\t\t\tonChange={(e) => props.setMyTotalExpirience(e)}\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</Slider>\n\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t\t<Caption level=\"2\" weight=\"semibold\">Выбранный уровень: {getCurrentExpirienceName(props.myProfile.TotalExpirience)}</Caption>\n\t\t\t\t\t\t\t</InfoRow>\n\t\t\t\t\t\t\t<FormItem top=\"Дата рождения\">\n\t\t\t\t\t\t\t<DatePicker\n                            min={{ day: 1, \n\t\t\t\t\t\t\t\tmonth: 0, \n\t\t\t\t\t\t\t\tyear: new Date().getFullYear()-100 }}\n                            max={{ day: 31, \n\t\t\t\t\t\t\t\tmonth: 12, \n\t\t\t\t\t\t\t\tyear: new Date().getFullYear() }}\n                            //defaultValue={new Date(props.myProfile.Birth)}\n\t\t\t\t\t\t\tdefaultValue={{\n\t\t\t\t\t\t\t\tday: new Date(props.myProfile.Birth).getDate(), \n\t\t\t\t\t\t\t\tmonth: new Date(props.myProfile.Birth).getMonth()+1, \n\t\t\t\t\t\t\t\tyear: new Date(props.myProfile.Birth).getFullYear()}\n\t\t\t\t\t\t\t\t}\n                            onDateChange={(value) => { props.setBirthDate(value) }}\n                        />\n\t\t\t\t\t\t\t\t{/* <DatePicker\n\t\t\t\t\t\t\t\t\tmin={{ day: 1, month: 1, year: 1901 }}\n\t\t\t\t\t\t\t\t\tmax={{ day: 1, month: 1, year: new Date().getFullYear() - 10 }}\n\t\t\t\t\t\t\t\t\t// dayPlaceholder=\"ДД\"\n\t\t\t\t\t\t\t\t\t// monthPlaceholder=\"ММММ\"\n\t\t\t\t\t\t\t\t\t// yearPlaceholder=\"ГГГГ\" \n\t\t\t\t\t\t\t\t\tdefaultValue={{\n\t\t\t\t\t\t\t\t\t\tday: new Date(props.myProfile.Birth).getDate(), \n\t\t\t\t\t\t\t\t\t\tmonth: new Date(props.myProfile.Birth).getMonth(), \n\t\t\t\t\t\t\t\t\t\tyear: new Date(props.myProfile.Birth).getFullYear()}\n\t\t\t\t\t\t\t\t\t\t}/> */}\n\t\t\t\t\t\t\t</FormItem>\n\n\t\t\t\t\t\t\t{/* <InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow> */}\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<Button onClick={() => props.saveUserProfile(props.myProfile)}>Сохранить данные профиля</Button>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group hidden>\n\t\t\t\t\t\t\tОписание проекта, возможность написать автору, выбор амплуа, выбор уровня (не играл, новичек, город и тд)\n\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\tСсылка на сайт и на канал на ютубе, где документация есть по проекту\n\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\tсделать кнопку \"подписаться на уведомления\"\n\t\t\t\t\t\t\tзапросить разрешение на отправку сообщения от имени приложения (или сообщества?)\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group header=\"Опции\" hidden>\n\t\t\t\t\t\t\t<FormItem>\n\t\t\t\t\t\t\t\t<ButtonWithNotify Message=\"Подписаться на уведомления от сервиса?\" mode=\"primary\" Yes={() => bridge.send(\"VKWebAppAllowNotifications\")}>Подписаться на события</ButtonWithNotify>\n\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<ProfilePanel></ProfilePanel>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Управление турнирами</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Мои команды</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<Group\n\t\t\t\t\t\t\t\theader={<Header>\n\t\t\t\t\t\t\t\t\t<h4>{props.tournament.selected.Name}</h4>\n\t\t\t\t\t\t\t\t\t</Header>}\n\t\t\t\t\t\t\t>\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<TournamentItem\n\t\t\t\t\t\t\t\t\tmode={props.tournament.mode}\n\t\t\t\t\t\t\t\t//Tab=\"shedule\"\n\t\t\t\t\t\t\t\t//mode=\"view\"\n\t\t\t\t\t\t\t\t></TournamentItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Команда</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"matchitem\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\t// header={<Header>Матч</Header>}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<MatchItem match={props.matches.selected}></MatchItem>\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Доступно для заявки</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t<Group>\n\t\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\n\t\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\n\t\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\n\t\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \n\t\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \n\t\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\n\t\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \n\t\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\n\t\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \n\t\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t<Group\n\t\t\t\t\t\t\theader={<Header>Игрок</Header>}\n\t\t\t\t\t\t>\n\n\t\t\t\t\t\t</Group>\n\t\t\t\t\t\t\n\t\t\t\t\t</Panel>\n\t\t\t\t</View>\n\t\t\t\t<View id=\"notauthorized\" activePanel=\"main\" modal={props.CurrentModalWindow} popout={props.globalPopout ? <ScreenSpinner></ScreenSpinner> : null }>\n\t\t\t\t\t<Panel id=\"main\">\n\t\t\t\t\t\t<CardGrid size=\"l\">\n\t\t\t\t\t\t\t<Card style={{height: '100%'}}>\n\t\t\t\t\t\t\t\t<FormItem style={{height: '100px'}}>\n\t\t\t\t\t\t\t\t\t<span style={cardStyle}><Title>{!props.Connected ? 'Соединение...' : 'Авторизация...'}</Title></span>\n\t\t\t\t\t\t\t\t</FormItem>\n\t\t\t\t\t\t\t</Card>\n\t\t\t\t\t\t</CardGrid>\n\t\t\t\t\t\t\n\t\t\t\t\t</Panel>\n\t\t\t\t\t\n\t\t\t\t</View>\n\n\n\t\t\t</Epic>\n\t\t</PullToRefresh>\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\n\treturn {\n\t\tmainMenu: state.mainMenu,\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\n\t\tCurrentModalWindow: state.system.CurrentModalWindow,\n\t\tLoading: state.system.Loading,\n\t\tConnected: state.system.Connected,\n\t\tCheckLoading: state.system.CheckLoading,\n\t\tcities: state.cityEntity.cities,\n\t\t//places: state.placeEntity.places,\n\t\tplaces: state.simplePlaceEntity.places,\n\t\tglobalPopout: state.system.GlobalPopout,\n\t\tvkProfile: state.profileEntity.vkProfile,\n\t\tmyProfile: state.profileEntity.myProfile,\n\t\terrorObject: state.system.ErrorObject,\n\t\t//`errorMessage: state.system.ErrorObject.message,\n\t\ttriedToGetProfile: state.profileEntity.triedToGetProfile,\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\n\t\ttournament: state.tournamentsEntity,\n\t\tcollect: state.collectEntity,\n\t\tteam: state.teamsEntity,\n\t\tbidTeams: state.bidTeamsEntity,\n\t\tmatches: state.matches,\n\t\ttournamentsForBids: state.bidTeamsEntity,\n\t}\n}\n\nexport default connect(mapStateToProps, { \n\tsetBirthDate, setSelectedMatch,\n\tsetCurrentModalWindow, setLoading, goToPanel, checkConnection, updateLoading, saveUserProfile, setUserName, setUserSurName, setMyTotalExpirience, \n\tgetAllSimpleCollectsInCityByCityUmbracoId, getAllSimplePlacesInCityByCityId, getAllRentsInCityByCityId, getUser, setSelectedUser,\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity, getTournamentsByCityId, setSelectedTournament, setTournamentMode, setCollectItemMode,\n\tsetActiveMenuItem, setVkProfileInfo, setGlobalPopout, getUserProfile, getAuthInfo, setTriedToGetProfile, setHotPanel, resetError, selectSimpleCollect,\n\tgetAllCitiesFromServer, setUserProfileCity, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab, getMatchesInCurrentCity,\n})(App);\n","import { users } from \"./constants/commonConstants\";\n\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\n\nconst initState = {\n    users: [\n        users[0],\n        users[1],\n    ]\n}\n\n\nlet userReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\n\nexport const ampluaCathegoryTypes = [\n    {id: 0, name: \"Вратарь\"},\n    {id: 1, name: \"Защитник\"},\n    {id: 2, name: \"Полузащитник\"},\n    {id: 3, name: \"Нападающий\"},\n    {id: 4, name: \"Тренер\"},\n    {id: 5, name: \"Административный персонал\"},\n]\n\nexport const ampluaTypes = [\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\n]\n\nconst initState = {\n\n}\n\n\nlet ampluaReducer = (state = initState, action) => \n{\n    switch (action.type){\n        case ANY_ACTION_TYPE: {\n            return state;\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\n\nexport const anyActionCreator = (val) => {\n    return {\n        type: ANY_ACTION_TYPE,\n        anyVal: val\n    }\n}\n\n\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport profileReducer from './profileReducer.js'\nimport collectReducer from './collectReducer.js'\nimport userReducer from './userReducer.js'\nimport hot from './hotReducer.js'\nimport tournaments from './tournamentsReducer.js'\nimport teams from './teamsReducer.js'\nimport bidTeams from './bidTeamsReducer.js'\nimport ampluaReducer from './ampluaReducer.js'\n//import placeReducer from './placeReducer.js'\nimport rentReducer from './rentReducer.js'\nimport simplePlaceReducer from './simplePlaceReducer.js'\nimport paymentReducer from './paymentReducer.js'\nimport mainMenuReducer from './mainMenuReducer.js'\nimport systemReducer from './systemReducer.js'\nimport cityReducer from './cityReducer.js'\nimport matchReducer from './matchReducer.js'\nimport vkReducer from './vkReducer.js'\nimport {composeWithDevTools} from 'redux-devtools-extension'\nimport thunkMiddleware from 'redux-thunk'\n\nconst composeEnhancers =\n  process.env.NODE_ENV !== 'production' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\n    }) : compose;\n\n\nlet reducers = combineReducers({\n    profileEntity: profileReducer,\n    collectEntity: collectReducer,\n    hotEntity: hot,\n    tournamentsEntity: tournaments,\n    teamsEntity: teams,\n    teamsEntity: teams,\n    bidTeamsEntity: bidTeams,\n    matches: matchReducer,\n    userEntity: userReducer,\n    cityEntity: cityReducer,\n    ampluaEntity: ampluaReducer,\n    //placeEntity: placeReducer,\n    rentEntity: rentReducer,\n    vkcom: vkReducer,\n    simplePlaceEntity: simplePlaceReducer,\n    paymentEntity: paymentReducer,\n    mainMenu: mainMenuReducer,\n    system: systemReducer,\n})\n\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\n// composeEnhancers(\n//     applyMiddleware(thunk))\n\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\nwindow.store = store;\n\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\nimport store from './store/store'\nimport { Provider } from \"react-redux\";\nimport { AdaptivityProvider, AppRoot, ConfigProvider, usePlatform } from \"@vkontakte/vkui\";\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConfigProvider>\n      <AdaptivityProvider>\n        <AppRoot>\n          <App />\n        </AppRoot>\n      </AdaptivityProvider>\n    </ConfigProvider>\n  </Provider>, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => { }); //runtime download\n}\n"],"sourceRoot":""}