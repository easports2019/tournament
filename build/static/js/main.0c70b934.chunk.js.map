{"version":3,"sources":["store/mainMenuReducer.js","store/constants/commonConstants.js","store/systemReducer.js","utils/api/server.js","utils/api/api.js","store/placeReducer.js","store/profileReducer.js","store/tournamentsReducer.js","store/bidTeamsReducer.js","store/cityReducer.js","components/Panels/ProfilePanel/ProfilePanel.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Modals/ModalCommon/ModalCommon.jsx","img/common/defaultPlace.jpg","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","utils/convertors/dateUtils.js","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/teamsReducer.js","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","id","name","title","position","enabled","show","activeItem","setActiveMenuItem","menuName","type","mainMenuReducer","state","action","find","it","currentDate","Date","BidTeam","Id","AdminTournamentComment","TeamName","When","day","getDay","month","getMonth","year","getFullYear","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Name","Year","WhenBegin","WhenEnd","Details","Reglament","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","places","PlaceId","val","Address","Index","Street","SubjectType","House","Photo","Path","Stages","Parking","BicycleParking","Worktime","FromHour","FromMinute","ToHour","ToMinute","Works24","NoBreaks","BreakTimes","DressingRooms","RoomNumber","Shower","HotWater","Areas","Width","Length","Height","CapacitySport","CapacityViewers","Price","Enabled","Access","Main","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","undefined","keys","length","map","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","City","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","ANY_ACTION_TYPE","SYSTEM_PUSH_TO_HISTORY","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","currentMenu","history","GlobalPopout","ErrorObject","resultcode","result","data","message","ShowAdminTourneyTab","ShowAdminTeamTab","setGlobalPopout","on","setErrorMessage","errorObject","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","item","pushToHistory","systemReducer","slice","showAdminTourneyTab","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","okObj","dat","CityAPI","post","then","ErrorMessage","catch","error","PlaceAPI","startindex","formData","FormData","append","cityId","ProfileAPI","vkUserData","JSON","stringify","vkUser","bdate","split","UTC","city","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","userProfileId","userprofile","tournamentToSend","CityUmbracoId","userProfile","publish","tournamentGroupId","tournamentGroup","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllByAdminProfileId","saveTeam","team","teamToSend","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","admintext","tournamentgroup","teamName","bidTeamToTournament","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","setPlaces","placeReducer","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_TRIED_TO_GET_PROFILE","myProfile","vkProfile","triedToGetProfile","setUserProfile","setTriedToGetProfile","tried","profileReducer","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","emptyTournament","tournaments","bidsNew","selected","myTournaments","cityTournamentAdmins","mode","setMyTournament","mytournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","value","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","delGroupFromTournamentByKeyId","tournamentId","groupId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","pl","deleteTournament","getMyTournaments","tournamentReducer","tour","filter","max","forEach","KeyId","getDate","x","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setTournaments","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","groups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","CITY_GET_ALL_FROM_SERVER","cities","cityReducer","ProfilePanel","props","withHistorySave","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","evt","this","handleClick","toMenuName","isBack","prevProps","prevState","onClick","React","Component","connect","ModalCommon","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","bidCity","setBidCity","useEffect","activeModal","modalName","header","top","placeholder","onClose","Close","actions","size","Surname","Birth","Register","isNaN","onChange","e","currentTarget","options","start","count","current","push","label","renderOption","option","restProps","profile","style","color","CityName","CityUmbracoName","dateToString","date","newDate","dateOptions","weekday","toLocaleString","TournamentAdminList","List","multiline","Button1Handle","Button2Handle","caption","after","CellClick","data-story","mainMenu","profileEntity","tournamentsEntity","TeamAdminList","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","teamsEntity","publishTeam","ListItem","removable","onRemove","Delete","BidListItem","adminText","setAdminText","Accept","Item","Decline","SelectedName","cityEntity","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","tempGroupName","setTempGroupName","currentTab","setCurrentTab","addToTournament","trim","DelGroupFromTournament","keyId","AcceptBid","DeclineBid","bottom","defaultValue","min","onDateChange","before","activePanel","BidList","Tournament","Founder","BidTeamTournamentList","Bids","TournamentId","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","bidSelectMode","getTournamentGroups","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","placeEntity","globalPopout","tournamentAdmins","getAllPlaces","setVkProfileInfo","getUserProfile","getAuthInfo","vkProfileInfo","getAllCitiesFromServer","setUserProfileCity","getAllPlacesInCityByCityId","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","setUser","popout","setPopout","modalWindow","setModalWindow","a","bridge","send","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","toString","menuItem","Array","isArray","activeStory","tabbar","modal","left","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","collectEntity","collectReducer","hotEntity","hot","paymentReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.0c70b934.chunk.js","sourcesContent":["const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\r\n\r\n\r\n\r\nconst initState = {\r\n    menuItems: [{\r\n        id: 0,\r\n        name: \"hot\",\r\n        title: \"Горячее\",\r\n        position: 0,\r\n        enabled: true,\r\n        show: true,\r\n    },{\r\n        id: 1,\r\n        name: \"allTournaments\",\r\n        title: \"Турниры\",\r\n        position: 1,\r\n        enabled: true,\r\n        show: true,\r\n    },{\r\n        id: 2,\r\n        name: \"profile\",\r\n        title: \"Профиль\",\r\n        position: 3,\r\n        enabled: true,\r\n        show: true,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"tournamentadmin\",\r\n        title: \"Управление турнирами\",\r\n        position: 4,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"tournamentitem\",\r\n        title: \"Турнир\",\r\n        position: 5,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"teamadmin\",\r\n        title: \"Управление командами\",\r\n        position: 6,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"teamitem\",\r\n        title: \"Команда\",\r\n        position: 7,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"addcollect\",\r\n        title: \"Новый сбор\",\r\n        position: 8,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"viewcollect\",\r\n        title: \"Сбор\",\r\n        position: 9,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"viewuser\",\r\n        title: \"Игрок\",\r\n        position: 10,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"bidlist\",\r\n        title: \"Доступно для заявки\",\r\n        position: 11,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n],\r\n    activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\r\n}\r\n\r\n\r\nlet mainMenuReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\r\n            \r\n            return {...state,\r\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setActiveMenuItem = (menuName) => {\r\n    \r\n    return {\r\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\r\n        menuName\r\n    }\r\n}\r\n\r\n\r\nexport default mainMenuReducer;","const currentDate = new Date();\r\n\r\n\r\n// таймслотов в одном часе\r\nexport const timeSlotsInOneHour = () => {\r\n    return +2\r\n}\r\n\r\nexport const getMaxNumberOfMembersInCollect = () => {\r\n    return +30\r\n}\r\n\r\nexport const getMinNumberOfMembersInCollect = () => {\r\n    return +2\r\n}\r\n\r\nexport const accessTypes = [\r\n    {Id: 0, Name: \"public\"},\r\n    {Id: 1, Name: \"private\"},\r\n    {Id: 2, Name: \"moderate\"},\r\n]\r\n\r\n// тип участия в сборе\r\nexport const memberingCollectTypes = {\r\n    Invite: 0, // приглашен\r\n    Member: 1, // уже подтвержден (участник)\r\n    Organizator: 2, // организатор\r\n    Participate: 3, // попросился\r\n    All: 4, // без фильтрации, все сборы\r\n}\r\n\r\nexport const cityTournamentAdmins = \r\n[\r\n    {\r\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \r\n    },\r\n]\r\n\r\nexport const TeamAdmins = \r\n[\r\n    {\r\n        Id : 0,\r\n        Name: \"Тестовая команда\",\r\n        Year: 2021,\r\n        WhenBorn: {day: 1, month: 2, year: 2021},\r\n        Details: \"Системная\",\r\n        Logo: \"\",\r\n        CityId: -1,\r\n        TournamentGroups: [], \r\n        Admins: [],\r\n        Matches: [],\r\n        Players: [],\r\n        Published: true,\r\n        Deleted: false,\r\n    },\r\n]\r\n\r\nexport const BidTeam = {\r\n    Id: -1,\r\n    AdminTournamentComment: \"\",\r\n    TeamName: \"\",\r\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\r\n    TeamId: -1, \r\n    Team: [],\r\n    TournamentGroupId: -1,\r\n    TournamentGroup: [],\r\n    UserProfileId: -1,\r\n    UserProfile: {},\r\n    Approved: false,\r\n    Deleted: false,\r\n    Published: false,\r\n\r\n}\r\n\r\nexport const EmptyTournament = {\r\n    Id : -1,\r\n    Name: \"\",\r\n    Year: 0,\r\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\r\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\r\n    Details: \"\",\r\n    Reglament: \"\", \r\n    Logo: \"\",\r\n    CityId: -1,\r\n    TournamentGroups: [], \r\n    Admins: [],\r\n    Published: false,\r\n    Deleted: false,\r\n}\r\n\r\n\r\nexport const geo = {\r\n    Cities: [\r\n        {\r\n            Id: 0,\r\n            Name: \"Кострома\",\r\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\r\n            Population: 250000, // население города\r\n            //users: 0, // сколько футболистов в городе\r\n            //places: 0, // сколько мест для аренды\r\n        },\r\n        {\r\n            Id: 1,\r\n            Name: \"Иваново\",\r\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\r\n            Population: 800000, // население города\r\n            //users: 0, // сколько футболистов в городе\r\n            //places: 0, // сколько мест для аренды\r\n        },\r\n    ],\r\n    Owners: [\r\n        {\r\n            Id: 0, \r\n            Name: \"Владелец 1\",\r\n        },\r\n        {\r\n            Id: 1, \r\n            Name: \"Владелец 2\",\r\n        }\r\n    ],\r\n}\r\n\r\nexport const places =  [\r\n        {\r\n            PlaceId: 0,\r\n            Name: \"Динамо\", /* placename*/\r\n            get Owner() { return geo.Owners[0]},\r\n            set Owner(val) { geo.Owners[0] = val},\r\n            get City() { return geo.Cities[0]},\r\n            set City(val) { geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\r\n            Geo: \"\",\r\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\r\n            DressingRooms: [\r\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\r\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\r\n            ],\r\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        },\r\n        {\r\n            PlaceId: 1,\r\n            Name: \"МЧС\",  /* placename*/\r\n            get Owner() {return geo.Owners[0]},\r\n            set Owner(val) {geo.Owners[0] = val},\r\n            get City() {return geo.Cities[0]},\r\n            set City(val) {geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\r\n            Geo: \"\",\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\r\n            DressingRooms: [\r\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n            ],\r\n            Price: 1800, /* цена за час занятий, перенести в areas */\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        },\r\n        {   \r\n            PlaceId: 2,\r\n            Name: \"КГТУ\",  /* placename*/\r\n            get Owner() {return geo.Owners[0]},\r\n            set Owner(val) {geo.Owners[0] = val},\r\n            get City() {return geo.Cities[0]},\r\n            set City(val) {geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\r\n            Geo: \"\",\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\r\n            DressingRooms: [\r\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n            ],\r\n            Price: 1800, /* цена за час занятий, перенести в areas */\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        }\r\n    ]\r\n\r\n    export const ampluaCathegoryTypes = [\r\n        {Id: 0, Name: \"Вратарь\"},\r\n        {Id: 1, Name: \"Защитник\"},\r\n        {Id: 2, Name: \"Полузащитник\"},\r\n        {Id: 3, Name: \"Нападающий\"},\r\n        {Id: 4, Name: \"Тренер\"},\r\n        {Id: 5, Name: \"Административный персонал\"},\r\n        {Id: 6, Name: \"Игрок\"},\r\n    ]\r\n     \r\n    export const ampluaTypes = [\r\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\r\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\r\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\r\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\r\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\r\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\r\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\r\n    ]\r\n\r\n\r\nexport const users = [\r\n    {\r\n        Id: 0,\r\n        FirstName: \"Александр\",\r\n        SurName: \"Смирнов\",\r\n        FatherName: \"Евгеньевич\",\r\n        NickName: \"easports\",\r\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\r\n        Datebirth: new Date(\"05.29.1987\"),\r\n        Leg: 0, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n                Stamina: 100, // выносливость\r\n                Feints: 100, // финты\r\n                Reaction: 100, // реакция\r\n                ScoringFlair: 100, // голевое чутье\r\n                Intellect: 100, // ум\r\n                Rejection: 100, // отбор мяча\r\n                SlideEffect: 100, // игра в подкате\r\n                Header: 100, // игра головой\r\n                Creativity: 100, // креативность\r\n                Dribble: 100, // дрибблинг\r\n                Opening: 100, // открывание под пас\r\n                Charisma: 100, // харизма\r\n                BallTaking: 100, // прием мяча\r\n                FieldVision: 100, // видение поля\r\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n        },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n    {\r\n        Id: 1,\r\n        FirstName: \"Евгений\",\r\n        SurName: \"Иванов\",\r\n        FatherName: \"Валерьевич\",\r\n        NickName: \"eivanov\",\r\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\r\n        Datebirth: new Date(\"28.02.1983\"),\r\n        Leg: 1, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n            Stamina: 100, // выносливость\r\n            Feints: 100, // финты\r\n            Reaction: 100, // реакция\r\n            ScoringFlair: 100, // голевое чутье\r\n            Intellect: 100, // ум\r\n            Rejection: 100, // отбор мяча\r\n            SlideEffect: 100, // игра в подкате\r\n            Header: 100, // игра головой\r\n            Creativity: 100, // креативность\r\n            Dribble: 100, // дрибблинг\r\n            Opening: 100, // открывание под пас\r\n            Charisma: 100, // харизма\r\n            BallTaking: 100, // прием мяча\r\n            FieldVision: 100, // видение поля\r\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n    },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n    {\r\n        Id: 2,\r\n        FirstName: \"Фёдор\",\r\n        SurName: \"Смолов\",\r\n        FatherName: \"Валерьевич\",\r\n        NickName: \"fsmolov\",\r\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\r\n        Datebirth: new Date(\"01.01.1989\"),\r\n        Leg: 0, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n            Stamina: 100, // выносливость\r\n            Feints: 100, // финты\r\n            Reaction: 100, // реакция\r\n            ScoringFlair: 100, // голевое чутье\r\n            Intellect: 100, // ум\r\n            Rejection: 100, // отбор мяча\r\n            SlideEffect: 100, // игра в подкате\r\n            Header: 100, // игра головой\r\n            Creativity: 100, // креативность\r\n            Dribble: 100, // дрибблинг\r\n            Opening: 100, // открывание под пас\r\n            Charisma: 100, // харизма\r\n            BallTaking: 100, // прием мяча\r\n            FieldVision: 100, // видение поля\r\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n    },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n]\r\n\r\nexport const myProfile = {\r\n    myProfile: users[0],\r\n}\r\n\r\n\r\nexport class commonUtils  {\r\n\r\n    static deepClone = (obj) => {\r\n        const clObj = {};\r\n        for(const i in obj) {\r\n            if (obj[i] instanceof Object) {\r\n                clObj[i] = this.deepClone(obj[i]);\r\n                continue;\r\n            }\r\n            clObj[i] = obj[i];\r\n        }\r\n        return clObj;\r\n    }\r\n\r\n    static copyCity = (city_source) => {\r\n        return city_source;\r\n    }\r\n\r\n    static copyAmplua = (amplua_source) => {\r\n        return amplua_source\r\n    }\r\n\r\n    static copyKeyFunction = (keyFunction_source) => {\r\n        return keyFunction_source\r\n    }\r\n\r\n    static copyUser = (user_source) => {\r\n        if (user_source == undefined || Object.keys(user_source).length === 0)\r\n            return undefined\r\n\r\n        return {\r\n            Id: user_source.Id,\r\n            FirstName: user_source.FirstName,\r\n            SurName: user_source.SurName,\r\n            FatherName: user_source.FatherName,\r\n            NickName: user_source.NickName,\r\n            Datebirth: user_source.Datebirth,\r\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\r\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\r\n            CityNow: { ...this.copyCity(user_source.CityNow) },\r\n            Level: {...user_source.Level\r\n            },\r\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\r\n            Injury: {...user_source.Injury},\r\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\r\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n        }\r\n            \r\n    }\r\n\r\n    static copyOwner = (owner_source) => {\r\n        return {...owner_source}\r\n    }\r\n    \r\n    static copyAccess = (access_source) => {\r\n        return {...access_source}\r\n    }\r\n\r\n    static copyPlace = (place_source) => {\r\n        \r\n        if (place_source == undefined || Object.keys(place_source).length === 0)\r\n            return undefined\r\n\r\n        return {\r\n            Id: place_source.Id,\r\n            Name: place_source.Name,\r\n            Owner: {...this.copyOwner(place_source.Owner)},\r\n            City: {...this.copyCity(place_source.City)},\r\n            Address: {...place_source.Address},\r\n            Geo: {...place_source.Geo},\r\n            Photo: [...place_source.Photo],\r\n            Stages: place_source.Stages,\r\n            Parking: place_source.Parking,\r\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\r\n            DressingRooms: [...place_source.DressingRooms],\r\n            Areas: [...place_source.Areas],\r\n            Price: place_source.Price, // цена за час занятий\r\n            Enabled: place_source.Enabled,\r\n            Access: {...this.copyAccess(place_source.Access)},\r\n        }\r\n    }\r\n\r\n    static copyCollect = (collect_source) => {\r\n        \r\n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \r\n            return undefined\r\n\r\n        return {\r\n            Id: collect_source.Id,\r\n            Place: this.copyPlace(collect_source.Place),\r\n            Date: collect_source.Date,\r\n            Hour: collect_source.Hour,\r\n            Minute: collect_source.Minute,\r\n            DurationMinutes: collect_source.DurationMinutes,\r\n            Price: collect_source.Price, // цена за весь период\r\n            Options: [...collect_source.Options],\r\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\r\n            /*\r\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\r\n\r\n            */\r\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\r\n            return {\r\n                Id: uGroup.Id,\r\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\r\n                NumberOf: uGroup.NumberOf,  // количество участников \r\n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \r\n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \r\n                    {\r\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\r\n                    }): \r\n                [{}])],\r\n                Price: uGroup.Price,\r\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\r\n            }\r\n        })],\r\n            UsersInvited: [\r\n                ...collect_source.UsersInvited.map(uInvited => {\r\n                    \r\n                    return {\r\n                        Id: uInvited.Id,\r\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \r\n                        User: {...this.copyUser(uInvited.User)},\r\n                    }\r\n                })\r\n            ],\r\n            UsersWantsToParticipate: [\r\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\r\n                    \r\n                    return {\r\n                        \r\n                        Id: uWP.Id,\r\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \r\n                        User: {...this.copyUser(uWP.User)},\r\n                    }\r\n                })\r\n            ],\r\n            Access: { ...this.copyAccess(collect_source.Access) },\r\n            Permanent: collect_source.Permanent,\r\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\r\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \r\n            Organizer: {...this.copyUser(collect_source.Organizer)}\r\n        }\r\n    }\r\n\r\n}","import {ampluaTypes, users} from './constants/commonConstants'\r\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\r\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\r\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\r\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\r\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\r\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\r\n\r\n\r\nconst initState = {\r\n    currentMenu: {},\r\n    history: [\"hot\"],\r\n    GlobalPopout: false,\r\n    ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\r\n    ShowAdminTourneyTab: false,\r\n    ShowAdminTeamTab: true,\r\n\r\n     // level \r\n\r\n}\r\n\r\n\r\nexport let systemReducer = (state = initState, action) => \r\n{\r\n    \r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        case SYSTEM_PUSH_TO_HISTORY: {\r\n            return {...state,\r\n                history: [...state.history, action.item]\r\n            };\r\n        }\r\n        case SYSTEM_SET_GLOBAL_POPOUT: {\r\n            return {...state,\r\n                GlobalPopout: action.on,\r\n            };\r\n        }\r\n        case SYSTEM_SET_ERROR_MESSAGE: {\r\n            return {...state,\r\n                ErrorObject: {...action.errorObject},\r\n            };\r\n        }\r\n        case SYSTEM_RESET_ERROR: {\r\n            return {...state,\r\n                ErrorObject: {...initState.ErrorObject},\r\n            };\r\n        }\r\n        case SYSTEM_POP_FROM_HISTORY: {\r\n            \r\n            return {...state,\r\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\r\n            };\r\n        }\r\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\r\n            \r\n            return {...state,\r\n                ShowAdminTourneyTab: action.showAdminTourneyTab\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\nexport const pushToHistory = (val) => {\r\n    return {\r\n        type: SYSTEM_PUSH_TO_HISTORY,\r\n        item: val\r\n    }\r\n}\r\n\r\nexport const setShowAdminTourneyTab = (val) => {\r\n    return {\r\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\r\n        showAdminTourneyTab: val\r\n    }\r\n}\r\n\r\nexport const popFromHistory = (val) => {\r\n    return {\r\n        type: SYSTEM_POP_FROM_HISTORY,\r\n        item: val\r\n    }\r\n}\r\n\r\nexport const setGlobalPopout = (on) => {\r\n    return {\r\n        type: SYSTEM_SET_GLOBAL_POPOUT,\r\n        on\r\n    }\r\n}\r\n\r\nexport const setErrorMessage = (errorObject) => {\r\n    return {\r\n        type: SYSTEM_SET_ERROR_MESSAGE,\r\n        errorObject\r\n    }\r\n}\r\n\r\nexport const resetError = () => {\r\n    return {\r\n        type: SYSTEM_RESET_ERROR\r\n    }\r\n}\r\n\r\n// export const setLastFromHistoryMenuItem = (val) => {\r\n//     return {\r\n//         type: POP_FROM_HISTORY,\r\n//         item: val\r\n//     }\r\n// }\r\n\r\nexport const goToPanel = (nextPanel, back) => {\r\n    return (dispatch, getState) => {\r\n        \r\n        if (back){\r\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\r\n            dispatch(setActiveMenuItem(preLast));\r\n            dispatch(popFromHistory(nextPanel));\r\n        }\r\n        else{\r\n            dispatch(pushToHistory(nextPanel));\r\n            dispatch(setActiveMenuItem(nextPanel));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default systemReducer;","import Axios from 'axios'\r\n\r\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\r\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\";\r\nexport const backserver = \"https://oblakosporta.ru\";\r\n//export const backserver = \"https://localhost:44325\";\r\nexport const URL = backserver + \"/umbraco/api/\";\r\nexport const authQueryString = window.location.search;\r\n\r\n\r\nexport\tconst PostJsonInstance = Axios.create(\r\n\t\t{\r\n\t\t\tbaseURL: URL,\r\n\t\t\ttimeout: 15000,\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"}\r\n\t\t}\r\n\t)","import { PostJsonInstance, authQueryString } from './server';\r\n\r\nexport let errorObj = (text) => {\r\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\r\n}\r\n\r\nexport let okObj = (dat) => {\r\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\r\n}\r\n\r\n\r\n// export let ApiSendInfo =\r\n// {\r\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\r\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \r\n//     system: {},\r\n//     addRequest: function(name){\r\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\r\n//         if (requestInQueue && requestInQueue.length > 0){\r\n//             return false;\r\n//         }\r\n//         let currentDT = new Date();\r\n//         this.requests.push({name, time: currentDT});\r\n//         return {name, time: currentDT};\r\n//     },\r\n//     checkRequest: function(name){\r\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\r\n//         if (requestInQueue && requestInQueue.length > 0){\r\n//             return true;\r\n//         }\r\n//         return false;\r\n//     },\r\n//     check: function(){\r\n//         //debugger\r\n//         this_.requests = this_.requests ? this_.requests.map(req => {\r\n//             let now = new Date();\r\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\r\n//                 return req;\r\n//             }\r\n//         }) : []\r\n//     },\r\n// }\r\n\r\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\r\n\r\nexport const CityAPI = {\r\n    // запрос всех мест\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n}\r\n\r\nexport const PlaceAPI = {\r\n\r\n    // запрос всех мест\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    // запрос всех мест города по Id города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\r\n        ////debugger\r\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\r\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityId);\r\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n        //}\r\n    },\r\n\r\n\r\n\r\n    // запрос места по его Id\r\n    // placeId - Id места\r\n    getById(placeId) {\r\n        let formData = new FormData();\r\n        formData.append(\"placeid\", placeId);\r\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n\r\n}\r\n\r\nexport const CollectAPI = {\r\n\r\n    getAll() {\r\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // запрос всех сборов в месте по его Id\r\n    // placeId - Id места\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"placeid\", placeId);\r\n\r\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // запрос всех сборов в городе по его Id\r\n    // cityId - Id города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInCityByCityId(cityId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityid\", cityId);\r\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    add(collect_source) {\r\n        //debugger\r\n\r\n        let collect = {\r\n            'Id': collect_source.id,\r\n            'Place': collect_source.place,\r\n            'WhenDate': collect_source.date,\r\n            'Hour': collect_source.hour,\r\n            'Minute': collect_source.minute,\r\n            'DurationMinutes': collect_source.durationMinutes,\r\n            'Price': collect_source.price, // цена за весь период\r\n            'Options': [...collect_source.options],\r\n            'FixedByMemberPrice': collect_source.fixedByMemberPrice,\r\n            /*\r\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\r\n \r\n            */\r\n            'UsersGroups': [...collect_source.usersGroups.map(uGroup => {\r\n                return {\r\n                    'Id': uGroup.id,\r\n                    'Amplua': { ...uGroup.amplua },\r\n                    'NumberOf': uGroup.numberOf,  // количество участников \r\n                    'Access': { ...uGroup.access }, // доступ на \r\n                    'Players': [...(uGroup.players && uGroup.players.length ? uGroup.players.map(user => {\r\n                        return { 'User': { ...user.user }, payment: {} }\r\n                    }) :\r\n                        [{}])],\r\n                    'Price': uGroup.price,\r\n                    'OrganizatorIsMember': uGroup.organizatorIsMember,\r\n                }\r\n            })],\r\n            'UsersInvited': [\r\n                ...collect_source.usersInvited.map(uInvited => {\r\n\r\n                    return {\r\n                        'Id': uInvited.id,\r\n                        'ToBe': { ...uInvited.toBe },\r\n                        'User': { ...uInvited.user },\r\n                    }\r\n                })\r\n            ],\r\n            'UsersWantsToParticipate': [\r\n                ...collect_source.usersWantsToParticipate.map(uWP => {\r\n\r\n                    return {\r\n\r\n                        'Id': uWP.id,\r\n                        'ToBe': { ...uWP.toBe },\r\n                        'User': { ...uWP.user },\r\n                    }\r\n                })\r\n            ],\r\n            'Access': collect_source.access.id,\r\n            'Permanent': collect_source.permanent,\r\n            'OrganizatorIsMember': collect_source.organizatorIsMember,\r\n            // 'AcceptedByPlaceOwner': collect_source.acceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \r\n            'Organizer': { ...collect_source.organizer }\r\n        }\r\n        return PostJsonInstance.post(\"Collects/Add2\" + authQueryString, JSON.stringify({ ...collect }))\r\n        //return PostJsonInstance.post(\"Collects/Add\" + authQueryString, JSON.stringify({...collect}))\r\n        //.then(x => \r\n        //     {\r\n        //     \tconsole.log(collect);\r\n        //     \tconsole.log(\"Collects/Add: \" + x);\r\n        //     }).catch(y => {\r\n        //     \tconsole.log(collect);\r\n        //     \tconsole.log(\"error Collects/Add: \" + y);\r\n        //     })\r\n    }\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    // запрос информации о пользователе\r\n    getUserProfile(vkUserData) {\r\n\r\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\r\n    getAuthInfo_old(formData) {\r\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // регистрация/обновление даты рождения + получение данных о профиле\r\n    getAuthInfo(vkUser) {\r\n\r\n        let [day, month, year] = vkUser.bdate.split('.');\r\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\r\n\r\n        let vkUserData = {\r\n            'bdate': bDate,\r\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\r\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\r\n            'first_name': vkUser.first_name,\r\n            'id': vkUser.id,\r\n            'last_name': vkUser.last_name,\r\n            'photo_100': vkUser.photo_100,\r\n            'photo_200': vkUser.photo_200,\r\n            'photo_max_orig': vkUser.photo_max_orig,\r\n            'sex': vkUser.sex,\r\n            'timezone': vkUser.timezone,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // изменение города привязки пользователя\r\n    setUserProfileCity(userData) {\r\n        if (userData) {\r\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\r\n\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else {\r\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const CityTournamentAdminAPI = {\r\n    // запрос всех админов города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityUmbracoId);\r\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// запрос групп турнира\r\n    getTournamentGroups(tournament, startindex) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"tournamentId\", tournament.Id);\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"adminprofileid\", userProfileId);\r\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    saveTournament(tournament, userprofile) {\r\n        //debugger\r\n        \r\n\r\n        if (tournament.Id < 0){\r\n            let tournamentToSend = {\r\n                ...tournament,\r\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n                Year: tournament.WhenEnd.year,\r\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                //debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    //debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else{\r\n            let tournamentToSend = {\r\n                ...tournament,\r\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n                Year: tournament.WhenEnd.year,\r\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\r\n                    return {\r\n                        Name: item.Name,\r\n                        Id: item.Id != undefined ? item.Id : -1,\r\n                    }\r\n                })],\r\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                //debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    //debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n    },\r\n\r\n    /// публикация турнира (или снятие с публикации, если publish=false)\r\n    publishTournament(tournament, userprofile, publish) {\r\n        \r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Published: publish,\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление турнира (пометка на удаление)\r\n    deleteTournament(tournament, userprofile) {\r\n        //debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление группы турнира\r\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\r\n        //debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n\r\n        let tournamentGroup = {\r\n            Id: tournamentGroupId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n   \r\n    /// добавление группы турнира\r\n    addTournamentGroup(tournament, userprofile, tGroup) {\r\n        //debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n\r\n        let tournamentGroup = {\r\n            Id: tGroup.Id,\r\n            Name: tGroup.Name,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n\r\n    // AddContact(contact){\r\n    //     //debugger\r\n    //     //return instace.get('/contacts/getcontacts');\r\n    //     let Contact= contact;\r\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\r\n    //         //debugger\r\n    //         return x.data;\r\n    //     }).catch(y => {\r\n    //         //debugger\r\n    //         console.log(y)\r\n    //     });\r\n    // },\r\n}\r\n\r\nexport const TeamAdminAPI = {\r\n    // запрос всех админов города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityUmbracoId);\r\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"adminprofileid\", userProfileId);\r\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    saveTeam(team, userprofile) {\r\n        \r\n        if (team.Id < 0){\r\n            let teamToSend = {\r\n                ...team,\r\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n                Year: team.WhenBorn.year,\r\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                //debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    //debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else{\r\n            let teamToSend = {\r\n                ...team,\r\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n                Year: team.WhenBorn.year,\r\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                //debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    //debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n    },\r\n\r\n    /// публикация турнира (или снятие с публикации, если publish=false)\r\n    publishTournament(tournament, userprofile, publish) {\r\n        \r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Published: publish,\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление турнира (пометка на удаление)\r\n    deleteTeam(team, userprofile) {\r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n}\r\n\r\nexport const BidTeamAPI = {\r\n    \r\n    getActualTournaments(userprofile, team, startindex = 0) {\r\n        //debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\r\n        //debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    // возвращает заявки по турниру (для админа турнира)\r\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\r\n        //debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\ndebugger\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // согласовывает заявку (для админа турнира)\r\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\r\n        //debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n   debugger     \r\n        bid.AdminTournamentComment = admintext;\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    \r\n    // отклоняет заявку (для админа турнира)\r\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\r\n        //debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n   debugger     \r\n        bid.AdminTournamentComment = admintext;\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\r\n        //debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        let bid = {\r\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \r\n                    When: new Date(),\r\n                    TournamentGroupId: tournamentgroup.Id,\r\n                    UserProfileId: userprofile.UserProfileId,\r\n                    TeamId: team.Id,\r\n                    Team: null,\r\n                    Approved: false,\r\n                    UserProfile: null,\r\n                    ErrorMessage: \"\",\r\n                    AdminTournamentComment : \"\",\r\n                    TournamentGroup: null,\r\n                }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    delBidTeamToTournament(bid, userprofile, team) {\r\n        //debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    /// допуск комады к турниру\r\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\r\n        //debugger \r\n        let bidToSend = {...bid,\r\n            AdminTournamentComment: admincomment,\r\n            Approve: approve,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n}","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { places } from './constants/commonConstants'\r\nimport { PlaceAPI } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nconst demoPlaces = places;\r\n\r\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\r\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\r\n\r\n\r\n\r\nconst initState = {\r\n    places: [],\r\n}\r\n\r\n\r\nlet placeReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case PLACES_SET_ALL_PLACES: {\r\n            return {\r\n                ...state,\r\n                places: [...action.places],\r\n            };\r\n        }\r\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\r\n            return {\r\n                ...state,\r\n                places: [...action.places],\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPlaces = (places) => {\r\n    return {\r\n        type: PLACES_SET_ALL_PLACES,\r\n        places\r\n    }\r\n}\r\n\r\nexport const setPlace = (placeId, placeData) => {\r\n    return {\r\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\r\n        placeId,\r\n        placeData\r\n    }\r\n}\r\n\r\n\r\n// все места\r\nexport const getAllPlaces = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        debugger\r\n                        dispatch(setPlaces(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        debugger\r\n                        dispatch(setPlaces(demoPlaces))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    debugger\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            debugger\r\n            dispatch(setPlaces(demoPlaces))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все места с сервера по UmbracoId города\r\nexport const getAllPlacesInCityByCityId = (cityId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        dispatch(setPlaces(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setPlaces(demoPlaces))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setPlaces(demoPlaces))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// место с сервера по Id\r\nexport const getPlaceById = (placeId) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getById(placeId)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0)\r\n                        dispatch(setPlace(placeId, pl.data));\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setGlobalPopout(false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default placeReducer;","import {ampluaTypes, users} from './constants/commonConstants'\r\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\r\n\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\r\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\r\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\r\n\r\nlet demoUser = users[0];\r\n\r\nconst initState = {\r\n    myProfile: null,\r\n    vkProfile: null,\r\n    triedToGetProfile: false,\r\n\r\n     // level \r\n\r\n}\r\n\r\n\r\nexport let profileReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case PROFILE_SET_VK_PROFILE_INFO: {\r\n            return {...state,\r\n                vkProfile: {...action.user},\r\n            };\r\n        }\r\n        case PROFILE_SET_USER_PROFILE: {\r\n            return {...state,\r\n                myProfile: {...action.user},\r\n            };\r\n        }\r\n        case PROFILE_SET_TRIED_TO_GET_PROFILE: {\r\n            return {...state,\r\n                triedToGetProfile: action.tried,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setVkProfileInfo = (user) => {\r\n    return {\r\n        type: PROFILE_SET_VK_PROFILE_INFO,\r\n        user\r\n    }\r\n}\r\n\r\nexport const setUserProfile = (user) => {\r\n    return {\r\n        type: PROFILE_SET_USER_PROFILE,\r\n        user\r\n    }\r\n}\r\n\r\nexport const setTriedToGetProfile = (tried) => {\r\n    return {\r\n        type: PROFILE_SET_TRIED_TO_GET_PROFILE,\r\n        tried\r\n    }\r\n}\r\n\r\n\r\n\r\n// получение данных профиля (без авторегистрации)\r\nexport const getUserProfile = (vkUserData) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.getUserProfile(vkUserData)\r\n                .then(pl => {\r\n                    \r\n                    if (pl && pl.data) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setTriedToGetProfile(false));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setTriedToGetProfile(true))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n            //dispatch(setUserProfile(demoUser))\r\n            //dispatch(setTriedToGetProfile(true))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// установка нового города пользователю\r\nexport const setUserProfileCity = (userProfile) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n        debugger\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.setUserProfileCity(userProfile).then()\r\n                .then(pl => {\r\n                    debugger\r\n                    if (pl && pl.data) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\r\n                        //dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// авторизация (со встроенной регистрацией)\r\nexport const getAuthInfo = (vkProfileInfo) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.getAuthInfo(vkProfileInfo)\r\n                .then(pl => {\r\n                    if (pl) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setTriedToGetProfile(false));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { CityTournamentAdminAPI, BidTeamAPI } from './../utils/api/api.js'\r\nimport { cityTournamentAdmins } from './constants/commonConstants'\r\nimport { EmptyTournament } from './constants/commonConstants'\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoCityTournamentAdmins = cityTournamentAdmins;\r\n\r\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\r\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\r\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\r\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\r\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\r\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\r\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\r\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\r\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\r\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\r\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\r\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\r\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\r\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\r\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\r\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\r\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\r\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\r\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\r\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\r\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\r\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\r\n\r\nconst currentDate = new Date();\r\nconst emptyTournament = EmptyTournament\r\n\r\nconst initState = {\r\n    tournaments: [], // все турниры\r\n    bidsNew: [], // новые заявки на турниры\r\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\r\n    myTournaments: [], // те, что я создал\r\n    cityTournamentAdmins: [], // админы текущего города\r\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n}\r\n\r\n\r\nlet tournamentReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                tournaments: [...action.tournaments],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                myTournaments: [...action.myTournaments],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MODE: {\r\n            return {\r\n                ...state,\r\n                mode: action.mode,\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MYTOURNAMENT: {\r\n            \r\n            return {\r\n                ...state,\r\n                myTournaments: [...state.myTournaments.map(tour => {\r\n                    \r\n                    if (tour.Id == action.mytournament.Id) {{\r\n                        tour = {...action.mytournament};\r\n                    }}\r\n                    return tour;\r\n                })],\r\n            };\r\n        }\r\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\r\n            \r\n            return {\r\n                ...state,\r\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\r\n            let index = -1;\r\n            let max = -1;\r\n            \r\n            \r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined){\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n\r\n\r\n            return {\r\n                ...state,\r\n                selected: {...action.tournament,\r\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \r\n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \r\n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\r\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \r\n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \r\n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\r\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\r\n                        return {...item, KeyId: ++max}\r\n                    })]\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_RESET_TOURNAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {...emptyTournament},\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\r\n            return {\r\n                ...state,\r\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_NEW_BIDS: {\r\n            return {\r\n                ...state,\r\n                bidsNew: [...action.bids],\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_BID: {\r\n            return {\r\n                ...state,\r\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_WHEN_BEGIN: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    WhenBegin: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_WHEN_END: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    WhenEnd: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_NAME: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Name: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_REGLAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Reglament: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_DETAILS: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Details: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_PUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Published: true,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_UNPUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Published: false,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_ADD_GROUP: {\r\n            let max = -1;\r\n            debugger\r\n            \r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined){\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n\r\n            // if (action.group.Id < 0)\r\n            //     return {\r\n            //         ...state,\r\n            //         selected: {...state.selected, \r\n            //             TournamentGroups: [...state.selected.TournamentGroups, \r\n            //                 {\r\n            //                     KeyId: max + 1,    \r\n            //                     Name: action.group.Name\r\n            //                 }],\r\n            //         },\r\n            //     };\r\n            // else\r\n                return {\r\n                    ...state,\r\n                    selected: {...state.selected, \r\n                        TournamentGroups: [...state.selected.TournamentGroups, \r\n                            {\r\n                                ...action.group,\r\n                                KeyId: max + 1,    \r\n                                Id: action.group.Id,\r\n                                Name: action.group.Name\r\n                            }],\r\n                    },\r\n                };\r\n\r\n        }\r\n        case TOURNAMENT_SET_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\r\n                        if (item.Id == action.groupId)\r\n                        {\r\n                            item.Id = action.groupId;\r\n                            item.KeyId = action.groupId;\r\n                            item.Name = action.groupName;\r\n                        }\r\n                        return item;\r\n                    }),\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTournaments = (tournaments) => {\r\n    return {\r\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\r\n        tournaments\r\n    }\r\n}\r\n\r\nexport const setMyTournament = (mytournament) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MYTOURNAMENT,\r\n        mytournament\r\n    }\r\n}\r\n\r\nexport const setSelectedTournament = (tournament) => {\r\n    return {\r\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\r\n        tournament\r\n    }\r\n}\r\n\r\nexport const deleteMyTournament = (mytournament) => {\r\n    return {\r\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\r\n        mytournament\r\n    }\r\n}\r\n\r\nexport const setMyTournaments = (myTournaments) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\r\n        myTournaments\r\n    }\r\n}\r\n\r\nexport const tournamentPublish = () => {\r\n    return {\r\n        type: TOURNAMENT_PUBLISH,\r\n    }\r\n}\r\n\r\nexport const tournamentUnpublish = () => {\r\n    return {\r\n        type: TOURNAMENT_UNPUBLISH,\r\n    }\r\n}\r\n\r\nexport const resetTournament = () => {\r\n    return {\r\n        type: TOURNAMENT_RESET_TOURNAMENT\r\n    }\r\n}\r\n\r\nexport const setTournamentWhenBegin = (when) => {\r\n    return {\r\n        type: TOURNAMENT_SET_WHEN_BEGIN,\r\n        when\r\n    }\r\n}\r\n\r\nexport const setTournamentWhenEnd = (when) => {\r\n    return {\r\n        type: TOURNAMENT_SET_WHEN_END,\r\n        when\r\n    }\r\n}\r\n\r\nexport const setTournamentMode = (mode) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport const setTournamentName = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_NAME,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentDetails = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_DETAILS,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentReglament = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_REGLAMENT,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentNewBids = (bids) => {\r\n    return {\r\n        type: TOURNAMENT_SET_NEW_BIDS,\r\n        bids\r\n    }\r\n}\r\n\r\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\r\n    return {\r\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\r\n        cityTournamentAdmins\r\n    }\r\n}\r\n\r\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\r\n    return {\r\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\r\n        tournamentId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\r\n    debugger\r\n    return {\r\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\r\n        tournamentId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const addGroupToTournament = (group) => {\r\n    return {\r\n        type: TOURNAMENT_ADD_GROUP,\r\n        group\r\n    }\r\n}\r\n\r\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\r\n    return {\r\n        type: TOURNAMENT_SET_GROUP,\r\n        tournamentId,\r\n        groupId,\r\n        groupName\r\n    }\r\n}\r\n\r\nexport const deleteTournamentBid = (bid) => {\r\n    return {\r\n        type: TOURNAMENT_DEL_BID,\r\n        bid\r\n    }\r\n}\r\n\r\n\r\n// все админы турниров города\r\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    \r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            \r\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все админы города с сервера по Id города\r\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// сохраняет (добавляет) в базу новый турнир\r\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\r\n    return dispatch => {\r\n        if (tournament != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(resetTournament());\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// опубликовывает турнир\r\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setMyTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет турнир\r\nexport const deleteTournament = (tournament = null, userprofile = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(deleteMyTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// запрашивает новые заявки в турнир\r\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setTournamentNewBids(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Подтверждает заявку в турнир\r\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            debugger\r\n                            dispatch(deleteTournamentBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Отклоняет заявку в турнир\r\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            debugger\r\n                            dispatch(deleteTournamentBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет группу турнира\r\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\r\n    debugger\r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0){\r\n                if (tournamentGroupId < 0)\r\n                {\r\n                    debugger\r\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\r\n                    dispatch(setGlobalPopout(false))\r\n                }\r\n                else\r\n                {\r\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            debugger\r\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// добавляет группу турнира\r\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\r\n    debugger\r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0){\r\n                if (tournament.Id < 0)\r\n                {\r\n                    debugger\r\n                    dispatch(addGroupToTournament(tournamentGroup));\r\n                    dispatch(setGlobalPopout(false))\r\n                }\r\n                else\r\n                {\r\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            debugger\r\n                            dispatch(addGroupToTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// возвращает с сервера все турниры для админа по его UserProfileId\r\nexport const getMyTournaments = (userProfileId = -1) => {\r\n    return dispatch => {\r\n        if (userProfileId != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            \r\n                \r\n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(setMyTournaments(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            \r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\r\nimport { BidTeam } from './constants/commonConstants'\r\nimport { EmptyTournament } from './constants/commonConstants'\r\n\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoBidTeam = BidTeam;\r\n\r\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\r\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\r\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\r\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\r\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\r\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\r\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\r\n\r\n\r\nconst currentDate = new Date();\r\n\r\nconst emptyBidTeam = BidTeam\r\n\r\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\r\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\r\nexport const BID_TEAM_MODE_VIEW = \"view\"\r\n\r\nconst initState = {\r\n    tournaments: [], // все турниры\r\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\r\n    selectedTournament: {...EmptyTournament},\r\n    myBids: [], // те, что я создал\r\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\r\n}\r\n\r\n\r\nlet bidBidTeamReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case BID_TEAM_SET_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                tournaments: [...action.tournaments],\r\n            };\r\n        }\r\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\r\n            return {\r\n                ...state,\r\n                selectedTournament: {...state.selectedTournament, \r\n                    TournamentGroups: [...action.groups],\r\n                },\r\n            };\r\n        }\r\n        case BID_TEAM_SET_SELECTED_MODE: {\r\n            return {\r\n                ...state,\r\n                selectMode: action.mode,\r\n            };\r\n        }\r\n        case BID_TEAM_SET_MY_BIDS: {\r\n            return {\r\n                ...state,\r\n                myBids: [...action.bids],\r\n            };\r\n        }\r\n        case BID_TEAM_ADD_MY_BID: {\r\n            //debugger\r\n            return {\r\n                ...state,\r\n                myBids: [...state.myBids, action.bid],\r\n            };\r\n        }\r\n        case BID_TEAM_DEL_MY_BID: {\r\n            //debugger\r\n            return {\r\n                ...state,\r\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\r\n            };\r\n        }\r\n        case BID_TEAM_APPROVE_BID: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                \r\n            };\r\n        }\r\n        \r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTournaments = (tournaments) => {\r\n    return {\r\n        type: BID_TEAM_SET_TOURNAMENTS,\r\n        tournaments\r\n    }\r\n}\r\n\r\nexport const setMyBids = (bids) => {\r\n    return {\r\n        type: BID_TEAM_SET_MY_BIDS,\r\n        bids\r\n    }\r\n}\r\n\r\nexport const approveBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_APPROVE_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const addMyBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_ADD_MY_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const delMyBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_DEL_MY_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\r\n    return {\r\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\r\n        groups\r\n    }\r\n}\r\n\r\nexport const setBidTeamSelectedMode = (mode) => {\r\n    return {\r\n        type: BID_TEAM_SET_SELECTED_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\n// все админы турниров города\r\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getActualTournaments(userprofile, team)\r\n                .then(pl => {\r\n                    //debugger\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setTournaments(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n\r\n                        dispatch(setCityBidTeamAdmins(demoBidTeam))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n\r\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// запрос групп турнира\r\nexport const getTournamentGroups = (tournament = null) => {\r\n    \r\n    return dispatch => {\r\n        if (tournament != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                           // debugger\r\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// запрос заявок команды\r\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((team != null) && (userprofile != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(setMyBids(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// добавление заявки от команды\r\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(addMyBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаление заявки от команды\r\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((team != null) && (userprofile != null) && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\r\n            .then(pl => {\r\n                        \r\n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\r\n                            dispatch(delMyBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                    else {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\r\n                        dispatch(setGlobalPopout(false))\r\n                        \r\n                    }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n\r\n// согласование/отмена заявки от команды\r\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(approveBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default bidBidTeamReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\r\nimport { setUserProfile } from \"./profileReducer\";\r\n\r\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\r\n\r\n\r\nconst initState = {\r\n    cities: [],\r\n}\r\n\r\n\r\nlet cityReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case CITY_GET_ALL_FROM_SERVER: {\r\n            return {...state,\r\n                cities: [...action.cities],\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setCities = (cities) => {\r\n    return {\r\n        type: CITY_GET_ALL_FROM_SERVER,\r\n        cities\r\n    }\r\n}\r\n\r\nexport const getAllCitiesFromServer = () => {\r\n    return dispatch => {\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityAPI.getAll().then()\r\n                .then(pl => {\r\n                    \r\n                    if (pl && pl.data) {\r\n                        dispatch(setCities(pl.data));\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    \r\n                    dispatch(setErrorMessage(error))\r\n                })\r\n        else {\r\n            \r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default cityReducer;","import React from 'react'\r\n\r\nconst ProfilePanel = (props) => {\r\n    return (\r\n        <div>\r\n            Панель Мой Профиль\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfilePanel","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\r\n\r\n\r\n/*\r\nisBack={false} - флаг возврата на предыдущую панель\r\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\r\nitem = {itm} - объект, передаваемый в параметр handleClick\r\nhandleClick = {selectCollect} - функция, выполняемая по клику\r\n*/\r\n\r\n\r\nexport const withHistorySave = (WrappedComponent) => {\r\n    \r\n    const mapStateToProps = state => ({\r\n        history: state.system.history,\r\n    })\r\n    \r\n    const mapDispatchToProps = {\r\n        goToPanel\r\n    }\r\n\r\n    class hocComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n            this.clickEvent = this.clickEvent.bind(this);\r\n\r\n        }\r\n\r\n        clickEvent(evt){\r\n            \r\n            if (this.props.handleClick != undefined && this.props.item != undefined)\r\n                this.props.handleClick(this.props.item);\r\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\r\n                this.props.handleClick();\r\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\r\n        }\r\n\r\n        componentDidUpdate(prevProps, prevState){\r\n            \r\n        }\r\n\r\n\r\n        render(){\r\n            \r\n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\r\n            \r\n        }\r\n    }\r\n\r\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\r\n}\r\n","import React, { Component } from 'react'\r\nimport {PanelHeaderBack } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst BackButton = (props) => {\r\n  \r\n \r\n    return (\r\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(BackButton)","import React, { Component } from 'react'\r\nimport {TabbarItem } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst TabbarItemWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <TabbarItem isBack={false} {...props}></TabbarItem>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(TabbarItemWithHistory)","import React, { useState, useEffect } from 'react';\r\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input } from '@vkontakte/vkui'\r\n\r\n\r\n\r\nlet ModalCommon = (props) => {\r\n    // при первом запуске подгрузить города\r\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\r\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\r\n    let [bidCity, setBidCity] = useState(\"\")\r\n\r\n\tuseEffect(() => {\r\n\t\t// загрузка городов здесь\r\n\t\t\r\n    }, [])\r\n    \r\n\r\n    return (\r\n        <ModalRoot activeModal={props.modalName}>\r\n            <ModalPage id=\"CitySelect\"\r\n                header={\r\n                <ModalPageHeader>\r\n                \r\n              </ModalPageHeader>\r\n            }\r\n          >\r\n                <Group>\r\n                    <InfoRow>\r\n                        Ваш город определен как: {props.data.title}\r\n                    </InfoRow>\r\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\r\n                    <InfoRow top=\"Город\">            \r\n                        <SelectMimicry placeholder=\"Выбрать город\" />\r\n                    </InfoRow>\r\n                </Group>    \r\n            </ModalPage>\r\n\r\n            <ModalCard\r\n                id=\"Error\"\r\n                onClose={props.Close}\r\n                header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\r\n                    {/* <Textarea defaultValue=\"\" /> */}\r\n            </ModalCard>\r\n\r\n            <ModalCard\r\n                id=\"MyProfile\"\r\n                onClose={props.Close}\r\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\r\n                    {/* <Textarea defaultValue=\"\" /> */}\r\n                    {\r\n                        (props.data.Name) ?\r\n                        `Имя: ${props.data.Name} \\r\\n\r\n                        Фамилия: ${props.data.Surname} \\r\\n\r\n                        Дата рождения: ${props.data.Birth} \\r\\n\r\n                        Зарегистрирован: ${props.data.Register} \\r\\n\r\n                        Город: ${props.data.City.Name}\r\n                        ` : \"\"\r\n                    }\r\n            </ModalCard>\r\n            <ModalCard\r\n                id=\"SelectBirth\"\r\n                // onClose={props.Close}\r\n                header=\"Укажите Ваш год рождения\"\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => props.action({...props.data, bdate: props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)})}>Закрыть</Button>}>\r\n                    <FormLayout>\r\n                        <FormLayoutGroup>\r\n                        <InfoRow header=\"Год рождения не определен\">\r\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\r\n                        </InfoRow>\r\n                            <FormItem top=\"Год рождения\">            \r\n                            <Select\r\n                                placeholder=\"Не выбран\" \r\n                                onChange={(e) => {\r\n                                    setSelectedYear(+e.currentTarget.value)\r\n                                    }}\r\n                                options={[...((start, count) => {\r\n                                    \r\n                                        let current = start;\r\n                                        let result = [];\r\n                                        while (current < start + count){\r\n                                            result.push(current);\r\n                                            current += 1;\r\n                                        }\r\n                                        \r\n                                        return result\r\n                                    })(new Date().getFullYear() - 100, 90)\r\n                                ].map(year => ({ label: year, value: year }))}\r\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\r\n                                />\r\n                            </FormItem>\r\n                        </FormLayoutGroup>\r\n                    </FormLayout>\r\n            </ModalCard>\r\n            <ModalCard\r\n                id=\"SelectCity\"\r\n                // onClose={props.Close}\r\n                header=\"Выберите город\"\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => {\r\n                        debugger\r\n                        props.action({...props.data.profile, CityUmbracoId: selectedCity})\r\n                        }\r\n                    }>Закрыть</Button>}>\r\n                    <FormLayout>\r\n                        <FormLayoutGroup>\r\n                            <InfoRow header=\"Город не найден\">\r\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \r\n                                Выберите из списка ближайший к вам город, в котором вы готовы участвовать в сборах.\r\n                            </InfoRow>\r\n                            <FormItem top=\"Город\">            \r\n                            <Select\r\n                                placeholder=\"Не выбран\" \r\n                                onChange={(e) => {\r\n                                    debugger\r\n                                    setSelectedCity(+e.currentTarget.value)\r\n                                    }}\r\n                                options={props.data.cities && props.data.cities.map(city => {\r\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\r\n                                }\r\n                                )}\r\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\r\n                                />\r\n                            </FormItem>\r\n                        </FormLayoutGroup>\r\n                        <InfoRow>или</InfoRow>\r\n                        <FormLayoutGroup>\r\n                            <InfoRow header=\"Укажите название вашего города\">\r\n                                Оставьте заявку администратору на добавление Вашего города в систему\r\n                                (После отправки сказать спасибо и перевести профиль в режим просмотра... Не нужно предлагать другой город, пожалуй)\r\n                            </InfoRow>\r\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\r\n                        </FormLayoutGroup>\r\n                    </FormLayout>\r\n            </ModalCard>\r\n      </ModalRoot>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalCommon","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","import React, { Component } from 'react'\r\nimport { RichCell } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst RichCellWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <RichCell isBack={false} {...props}></RichCell>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(RichCellWithHistory)","import React, { Component } from 'react'\r\nimport {TabbarItem } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\nimport { Icon24ChevronRight } from '@vkontakte/icons';\r\n\r\nconst Icon24ChevronRightWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\r\n\r\nexport function isDate(str) {\r\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\r\n  }\r\n\r\nexport const getAge = (date) => {\r\n    if (date != undefined) \r\n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\r\n    else\r\n        return 0;\r\n    \r\n}\r\n\r\nexport const timeToString = (hours, minutes, seconds) => {\r\n    \r\n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\r\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\r\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\r\n    let res = \"\";\r\n\r\n    if (h.length > 0 && m.length > 0 && s.length > 0)\r\n        res = h + \":\" + m + \":\" + s;\r\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\r\n        res = h + \":\" + m;\r\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\r\n        res = h;\r\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\r\n        res = m + \":\" + s;\r\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\r\n        res = s;\r\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\r\n        res = m;\r\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\r\n        res = h + \":\" + s;\r\n    else\r\n        res = \"\";\r\n    return res;\r\n}\r\n\r\nexport const dateToString = (date, ...args) => {\r\n    if (typeof date == \"string\")\r\n        date = new Date(date);\r\n\r\n    let newDate = date;\r\n    let dateOptions = {\r\n        // era: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        weekday: 'long',\r\n        // timezone: 'UTC',\r\n        // hour: 'numeric',\r\n        // minute: 'numeric',\r\n        // second: 'numeric'\r\n    };\r\n\r\n    if (args[0])\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\r\n\r\n    if (args[1])\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\r\n\r\n    if (args[2])\r\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\r\n\r\n    return newDate.toLocaleString(\"ru\", dateOptions)\r\n}\r\n\r\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\r\nexport const addToDate = (date, ...args) => {\r\n        \r\n    if (typeof date == \"string\")\r\n        date = new Date(date);\r\n    \r\n    let newDate = date;\r\n    \r\n    if (args[0]) // добавить дни\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\r\n\r\n    if (args[1]) // добавить месяцы\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\r\n\r\n    if (args[2]) // добавить годы\r\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\r\n\r\n    return newDate;\r\n}\r\n\r\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\r\nexport const datesWithoutTimeIsSame = (date1, date2) => {\r\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\r\n}\r\n\r\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\r\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\r\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\r\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\r\n    let slots = [] // слоты\r\n    \r\n    for (let i = 0; i < slotsNumber; i++){\r\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\r\n    }\r\n    \r\n    return slots\r\n}","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport TournamentListItem from './TournamentListItem'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\r\n\r\n\r\n\r\n\r\nconst TournamentAdminList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n        \r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        let date = new Date(item.WhenBegin);\r\n                        return (\r\n                            <RichCell\r\n                                multiline\r\n                                actions={\r\n                                    <>\r\n                                    {!item.Published ? \r\n                                    <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\r\n                                    : \r\n                                    <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>}\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</Button>\r\n                                    </>\r\n                                    }\r\n                                caption={date && `Начало: ${dateToString(date)}`}\r\n                                after={<Icon24ChevronRightWithHistory\r\n                                handleClick={() => props.CellClick(item)} \r\n                                    toMenuName=\"tournamentitem\" \r\n                                    data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\r\n                                }\r\n                                text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\r\n                            >\r\n                                {item.Name}\r\n                            </RichCell>\r\n                        )\r\n                    })\r\n                    : <InfoRow>Нет турниров</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default TournamentAdminList","import React, { Component } from 'react'\r\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst ButtonWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <Button isBack={false} {...props}></Button>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TournamentAdminList from './TournamentAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\n\r\n\r\nconst TournamentAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTournament = (tour, publish) => {\r\n        \r\n        props.publishTournament(tour, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTournament = (tour) => {\r\n        props.deleteTournament(tour, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        props.setSelectedTournament(item);\r\n        props.setTournamentMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        props.resetTournament();\r\n        props.setTournamentMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTournaments(props.myProfile.UserProfileId);\r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <Header>Мои турниры</Header>\r\n                <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\r\n                <TournamentAdminList \r\n                    CellClick={CellClick}\r\n                    Button1Handle = {PublishTournament}\r\n                    Button2Handle = {DeleteTournament}\r\n                    List={props.tournament.myTournaments}\r\n                >\r\n                    \r\n                </TournamentAdminList>\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(TournamentAdminPanel);","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\n\r\n\r\n\r\nconst TeamAdminList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n        \r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        let date = new Date(item.WhenBorn);\r\n                        return (\r\n                            <RichCell\r\n                                multiline\r\n                                actions={\r\n                                    <>\r\n                                    {/* {!item.Published ? \r\n                                    <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\r\n                                    : \r\n                                    <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</Button>\r\n                                    </>\r\n                                    }\r\n                                // caption={date && `Основана: ${dateToString(date)}`}\r\n                                after={\r\n                                    <Icon24ChevronRightWithHistory\r\n                                        handleClick={() => props.CellClick(item)} \r\n                                        toMenuName=\"teamitem\" \r\n                                        data-story=\"teamitem\"\r\n                                    >\r\n\r\n                                    </Icon24ChevronRightWithHistory>\r\n                                }\r\n                                // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\r\n                            >\r\n                                {item.Name}\r\n                            </RichCell>\r\n                        )\r\n                    })\r\n                    : <InfoRow>Нет команд</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { TeamAdminAPI } from './../utils/api/api.js'\r\nimport { TeamAdmins } from './constants/commonConstants'\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoCityTeamAdmins = TeamAdmins;\r\n\r\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\r\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\r\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\r\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\r\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\r\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\r\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\r\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\r\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\r\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\r\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\r\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\r\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\r\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\r\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\r\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\r\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\r\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\r\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\r\n\r\nconst currentDate = new Date();\r\n\r\nconst emptyTeam = {\r\n    Id: -1,\r\n    Name: \"\",\r\n    Year: 0,\r\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\r\n    Details: \"\",\r\n    Logo: \"\",\r\n    CityId: -1,\r\n    TournamentGroups: [],\r\n    Admins: [],\r\n    Matches: [],\r\n    Players: [],\r\n    Published: false,\r\n    Deleted: false,\r\n}\r\n\r\nconst initState = {\r\n    teams: [], // все турниры\r\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\r\n    myTeams: [], // те, что я создал\r\n    cityTeamAdmins: [], // админы текущего города\r\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n}\r\n\r\n\r\nlet teamReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case TEAM_SET_ALL_TEAMS: {\r\n            return {\r\n                ...state,\r\n                teams: [...action.teams],\r\n            };\r\n        }\r\n        case TEAM_SET_MY_TEAMS: {\r\n           // debugger\r\n            return {\r\n                ...state,\r\n                myTeams: [...action.myTeams],\r\n            };\r\n        }\r\n        case TEAM_SET_MODE: {\r\n            return {\r\n                ...state,\r\n                mode: action.mode,\r\n            };\r\n        }\r\n        case TEAM_ADD_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams, { ...action.myteam }]\r\n            };\r\n        }\r\n        case TEAM_SET_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams.map(tour => {\r\n\r\n                    if (tour.Id == action.myteam.Id) {\r\n                        {\r\n                            tour = { ...action.myteam, };\r\n                        }\r\n                    }\r\n                    return tour;\r\n                })],\r\n            };\r\n        }\r\n        case TEAM_DELETE_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\r\n            };\r\n        }\r\n        case TEAM_SET_SELECTED_TEAM: {\r\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\r\n        //    debugger\r\n\r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxT)\r\n                        maxT = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Admins.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxA)\r\n                        maxA = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Matches.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxM)\r\n                        maxM = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Players.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxP)\r\n                        maxP = item.KeyId;\r\n                }\r\n            });\r\n\r\n\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...action.team,\r\n                    WhenBorn: {\r\n                        day: new Date(action.team.WhenBorn).getDate(),\r\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\r\n                        year: new Date(action.team.WhenBorn).getFullYear()\r\n                    },\r\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\r\n                        return { ...item, KeyId: ++maxT }\r\n                    })],\r\n                    Admins: [...action.team.Admins.map(item => {\r\n                        return { ...item, KeyId: ++maxA }\r\n                    })],\r\n                    Matches: [...action.team.Matches.map(item => {\r\n                        return { ...item, KeyId: ++maxM }\r\n                    })],\r\n                    Players: [...action.team.Players.map(item => {\r\n                        return { ...item, KeyId: ++maxP }\r\n                    })],\r\n                },\r\n            };\r\n        }\r\n        case TEAM_RESET_TEAM: {\r\n            return {\r\n                ...state,\r\n                selected: { ...emptyTeam },\r\n            };\r\n        }\r\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\r\n            return {\r\n                ...state,\r\n                cityTeamAdmins: [...action.cityTeamAdmins],\r\n            };\r\n        }\r\n        case TEAM_SET_WHEN_BORN: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    WhenBorn: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_NAME: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Name: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_REGLAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Reglament: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_DETAILS: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Details: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_PUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Published: true,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_UNPUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Published: false,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_ADD_GROUP: {\r\n            let max = -1;\r\n            state.selected.TeamGroups.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: [...state.selected.TeamGroups,\r\n                    {\r\n                        KeyId: max + 1,\r\n                        Name: action.groupName\r\n                    }],\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: state.selected.TeamGroups.map(item => {\r\n                        if (item.Id == action.groupId) {\r\n                            item.Id = action.groupId;\r\n                            item.KeyId = action.groupId;\r\n                            item.Name = action.groupName;\r\n                        }\r\n                        return item;\r\n                    }),\r\n                },\r\n            };\r\n        }\r\n        case TEAM_DEL_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTeams = (teams) => {\r\n    return {\r\n        type: TEAM_SET_ALL_TEAMS,\r\n        teams\r\n    }\r\n}\r\n\r\nexport const setMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_SET_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const addMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_ADD_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const setSelectedTeam = (team) => {\r\n    return {\r\n        type: TEAM_SET_SELECTED_TEAM,\r\n        team\r\n    }\r\n}\r\n\r\nexport const deleteMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_DELETE_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const setMyTeams = (myTeams) => {\r\n    return {\r\n        type: TEAM_SET_MY_TEAMS,\r\n        myTeams\r\n    }\r\n}\r\n\r\nexport const teamPublish = () => {\r\n    return {\r\n        type: TEAM_PUBLISH,\r\n    }\r\n}\r\n\r\nexport const teamUnpublish = () => {\r\n    return {\r\n        type: TEAM_UNPUBLISH,\r\n    }\r\n}\r\n\r\nexport const resetTeam = () => {\r\n    return {\r\n        type: TEAM_RESET_TEAM\r\n    }\r\n}\r\n\r\nexport const setTeamWhenBorn = (when) => {\r\n    return {\r\n        type: TEAM_SET_WHEN_BORN,\r\n        when\r\n    }\r\n}\r\n\r\n\r\nexport const setTeamMode = (mode) => {\r\n    return {\r\n        type: TEAM_SET_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport const setTeamName = (value) => {\r\n    return {\r\n        type: TEAM_SET_NAME,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTeamDetails = (value) => {\r\n    return {\r\n        type: TEAM_SET_DETAILS,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTeamReglament = (value) => {\r\n    return {\r\n        type: TEAM_SET_REGLAMENT,\r\n        value\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\r\n    return {\r\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\r\n        cityTeamAdmins\r\n    }\r\n}\r\n\r\nexport const delGroupFromTeam = (teamId, groupId) => {\r\n    return {\r\n        type: TEAM_DEL_GROUP,\r\n        teamId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const addGroupToTeam = (teamId, groupName) => {\r\n    return {\r\n        type: TEAM_ADD_GROUP,\r\n        teamId,\r\n        groupName\r\n    }\r\n}\r\n\r\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\r\n    return {\r\n        type: TEAM_SET_GROUP,\r\n        teamId,\r\n        groupId,\r\n        groupName\r\n    }\r\n}\r\n\r\n\r\n// все админы турниров города\r\nexport const getAllCityTeamAdmins = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            TeamAdminAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setCityTeamAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n\r\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n\r\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все админы города с сервера по Id города\r\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setCityTeamAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// сохраняет (добавляет) в базу новую команду\r\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\r\n    return dispatch => {\r\n        if (team != null) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n            {\r\n                if (team.Id < 0) // добавление\r\n                {\r\n                    TeamAdminAPI.saveTeam(team, userprofile)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(addMyTeam(pl.data));\r\n                                dispatch(resetTeam());\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                }\r\n                else{ // изменение\r\n                    TeamAdminAPI.saveTeam(team, userprofile)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(setMyTeam(pl.data));\r\n                                dispatch(resetTeam());\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// опубликовывает турнир\r\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\r\n\r\n    return dispatch => {\r\n        if ((team != null) || (userprofile == null)) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\r\n                    .then(pl => {\r\n\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setMyTeam(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет команду\r\nexport const deleteTeam = (team = null, userprofile = null) => {\r\n\r\n    return dispatch => {\r\n        if ((team != null) || (userprofile == null)) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n                TeamAdminAPI.deleteTeam(team, userprofile)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(deleteMyTeam(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// возвращает с сервера все турниры для админа по его UserProfileId\r\nexport const getMyTeams = (userProfileId = -1) => {\r\n    return dispatch => {\r\n        if (userProfileId != null) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n\r\n\r\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n\r\n                            dispatch(setMyTeams(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default teamReducer;","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TeamAdminList from './TeamAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\n\r\n\r\nconst TeamAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTeam = (team, publish) => {\r\n        \r\n        props.publishTeam(team, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTeam = (team) => {\r\n        props.deleteTeam(team, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        props.setSelectedTeam(item);\r\n        props.setTeamMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        props.resetTeam();\r\n        props.setTeamMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTeams(props.myProfile.UserProfileId);\r\n        \r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <Header>Мои команды</Header>\r\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\r\n                <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\r\n                <TeamAdminList \r\n                    CellClick={CellClick}\r\n                    Button1Handle = {PublishTeam}\r\n                    Button2Handle = {DeleteTeam}\r\n                    List={props.team.myTeams}\r\n                >\r\n                    \r\n                </TeamAdminList>\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n        team: state.teamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(TeamAdminPanel);","import React from 'react'\r\nimport { Cell } from '@vkontakte/vkui'\r\n\r\n\r\n\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \r\n            removable \r\n            onRemove={() => props.Delete(props.KeyId)}\r\n            >\r\n                {props.Name}\r\n            </Cell>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ListItem","import React, {useState} from 'react'\r\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\r\n\r\n\r\n\r\n\r\nconst BidListItem = (props) => {\r\n\r\n    let [adminText, setAdminText] = useState(\"\");\r\n\r\n\r\n    return (\r\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \r\n            actions={\r\n                <>\r\n                    <Button mode=\"primary\" onClick={() => props.Accept(props.Item)}>Принять</Button>\r\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\r\n                    <Button mode=\"destructive\" onClick={() => props.Decline(props.Item, adminText)}>Отклонить</Button>\r\n                </>\r\n            }\r\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\r\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\r\n            >\r\n                Команда {props.Item.Team.Name}\r\n            </RichCell>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BidListItem","import React, { useEffect, useState } from 'react'\r\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport {\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\r\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, acceptTeamToTournamentBid, declineTeamToTournamentBid,\r\n} from '../../../../store/tournamentsReducer'\r\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\r\nimport { connect } from 'react-redux';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport BidListItem from '../ListItem/BidListItem';\r\n\r\n\r\n\r\n\r\nconst TournamentItem = (props) => {\r\n    let currentDate = new Date();\r\n    let [tempGroupName, setTempGroupName] = useState(\"\");\r\n    let [currentTab, setCurrentTab] = useState(\"info\");\r\n\r\n    useEffect(() => {\r\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\r\n    }, props.tournaments.selected)\r\n\r\n    const addToTournament = () => {\r\n        debugger\r\n        if (tempGroupName.trim() != \"\") {\r\n            //addGroupToTournament\r\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\r\n            setTempGroupName(\"\");\r\n        }\r\n    }\r\n\r\n    const DelGroupFromTournament = (keyId, groupId) => {\r\n        //props.tournaments.selected.Id, item.KeyId, item.Id\r\n        debugger\r\n        if (groupId < 0)\r\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\r\n        else\r\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\r\n    }\r\n    \r\n    const AcceptBid = (item) => {\r\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\r\n        \r\n    }\r\n\r\n    const DeclineBid = (item, text) => {\r\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\r\n        \r\n    }\r\n\r\n    switch (props.mode) {\r\n        case \"view\": {\r\n            return (\r\n                <>\r\n                    <FormItem top=\"Ваш город\">\r\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Название турнира\" bottom=\"Имя турнира должно быть уникальным\">\r\n                        <InfoRow>{props.tournaments.selected.Name}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Дата начала\">\r\n                        <InfoRow>{props.tournaments.selected.WhenBegin}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Дата окончания\">\r\n                        <InfoRow>{props.tournaments.selected.WhenEnd}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Описание турнира\">\r\n                        <InfoRow>{props.tournaments.selected.Details}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Регламент турнира\">\r\n                        <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\r\n                    </FormItem>\r\n                    <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                            <List>\r\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\r\n                            </List>\r\n                            :\r\n                            <FormItem>\r\n                                <InfoRow>Нет групп</InfoRow>\r\n                            </FormItem>\r\n                        }\r\n                    </Group>\r\n                </>\r\n            )\r\n        }; break;\r\n        case \"add\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Новый турнир</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название турнира\">\r\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата начала\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                defaultValue={props.tournaments.selected.WhenBegin}\r\n                                value={props.tournaments.selected.WhenBegin}\r\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата окончания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                defaultValue={props.tournaments.selected.WhenEnd}\r\n                                value={props.tournaments.selected.WhenEnd}\r\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание турнира\">\r\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Регламент турнира\">\r\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group>\r\n                        <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem>\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Сохранить</Button>\r\n                            <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        }; break;\r\n        case \"edit\": {\r\n            return (\r\n                <View activePanel={currentTab}>\r\n                    <Panel id=\"info\">\r\n                        <Group>\r\n                            <Header>Управление турниром</Header>\r\n                            <Tabs mode=\"buttons\">\r\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                            </Tabs>\r\n                            <FormLayout>\r\n                                <FormItem top=\"Ваш город\">\r\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                                </FormItem>\r\n                                <FormItem top=\"Название турнира\">\r\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\r\n                                </FormItem>\r\n                                <FormItem top=\"Дата начала\">\r\n                                    <DatePicker\r\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                        defaultValue={props.tournaments.selected.WhenBegin}\r\n                                        value={props.tournaments.selected.WhenBegin}\r\n                                        onDateChange={value => props.setTournamentWhenBegin(value)}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top=\"Дата окончания\">\r\n                                    <DatePicker\r\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                        defaultValue={props.tournaments.selected.WhenEnd}\r\n                                        value={props.tournaments.selected.WhenBegin}\r\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top=\"Описание турнира\">\r\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\r\n                                </FormItem>\r\n                                <FormItem top=\"Регламент турнира\">\r\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\r\n                                </FormItem>\r\n                                {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                        <List>\r\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\r\n                                        </List>\r\n                                        :\r\n                                        <FormItem>\r\n                                            <InfoRow>Нет групп</InfoRow>\r\n                                        </FormItem>\r\n                                    }\r\n                                </Group>\r\n                                <FormItem top=\"Новая группа/лига\">\r\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\r\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\r\n                                </FormItem>\r\n                                <FormItem top=\"Подверждение\">\r\n                                    <Button onClick={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</Button>\r\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\r\n                                </FormItem>\r\n                            </FormLayout>\r\n                        </Group>\r\n                    </Panel>\r\n                    <Panel id=\"bids\">\r\n                        <Header>Заявки от команд</Header>\r\n                        <Tabs mode=\"buttons\">\r\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                        </Tabs>\r\n                        <FormLayout>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\r\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\r\n                                    <List>\r\n                                        {props.tournaments.bidsNew.map((item) => \r\n                                        <BidListItem\r\n                                            KeyId={item.KeyId} \r\n                                            Accept={AcceptBid}\r\n                                            Decline={DeclineBid}\r\n                                            Item={item}\r\n                                            >\r\n\r\n                                        </BidListItem>)}\r\n                                    </List>\r\n                                    :\r\n                                    <FormItem>\r\n                                        <InfoRow>Нет новых заявок</InfoRow>\r\n                                    </FormItem>\r\n                                }\r\n                            </Group>\r\n                        </FormLayout>\r\n                    </Panel>\r\n                </View>\r\n                // <Tabs>\r\n                //     <TabsItem>\r\n\r\n                //     </TabsItem>\r\n                // </Tabs>\r\n\r\n            )\r\n        }; break;\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        SelectedName: state.tournamentsEntity.selected.Name,\r\n        cities: state.cityEntity.cities,\r\n        myProfile: state.profileEntity.myProfile,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid, \r\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, \r\n})(TournamentItem)","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\n\r\n\r\nconst BidList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        \r\n                        if (item.Approved && !item.Published)\r\n                            return (\r\n                                <RichCell\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                        else if (!item.Approved && !item.Published)\r\n                            return (\r\n                                <RichCell\r\n                                    //onClick={() => props.CellClick(item)}\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\r\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                        else\r\n                            return (\r\n                                <RichCell\r\n                                    onClick={() => props.CellClick(item)}\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                    })\r\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\n\r\n\r\nconst BidTeamTournamentList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        \r\n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\r\n                            //debugger\r\n                            return <>{props.Bids.map(bid => {\r\n                                debugger\r\n                                // просмотреть и вывести заявки\r\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\r\n                                    debugger\r\n                                    return (\r\n                                        <RichCell\r\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\r\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\r\n                                            onClick={() => props.CellClick(item)}\r\n                                            \r\n                                        >\r\n                                            {item.Name}\r\n                                        </RichCell>\r\n                                    )}\r\n                                }\r\n                            )}</>\r\n                            \r\n\r\n\r\n                        }\r\n                        else{\r\n                            return (\r\n                                <RichCell\r\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\r\n                                    onClick={() => props.CellClick(item)}\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                    })\r\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem, Input } from '@vkontakte/vkui'\r\n\r\n\r\nconst BidTeamTournamentGroupsList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n    //debugger\r\n\r\n    return (\r\n        <Group header=\"Выберите группу/лигу\">\r\n            <Group mode=\"plain\">\r\n                <FormItem>\r\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\r\n                </FormItem>\r\n                <FormItem top=\"Название команды на этот турнир\">\r\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\r\n                </FormItem>\r\n                <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        //debugger\r\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\r\n                        {\r\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\r\n                            // props.Bids.map\r\n\r\n                            return (\r\n                                <RichCell\r\n                                after={\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</Button>\r\n                                }\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                        else{\r\n                            return (\r\n                                <RichCell\r\n                                after={\r\n                                    <Button onClick={() => props.Button1Handle(item)}>Заявиться сюда</Button>\r\n                                }\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                        \r\n                    })\r\n                    : <InfoRow>Нет групп в турнире</InfoRow>\r\n                }\r\n\r\n            </List>\r\n            </Group>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TeamAdminList from '../Team/TeamAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\r\n\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\nimport BidList from './BidList';\r\n\r\n\r\n\r\nconst BidTeamAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTeam = (team, publish) => {\r\n        \r\n        // props.publishTeam(team, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTeam = (team) => {\r\n        // props.deleteTeam(team, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        // props.setSelectedTeam(item);\r\n        // props.setTeamMode(\"edit\");\r\n    }\r\n\r\n    const CancelBid = (item) => {\r\n        \r\n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\r\n        // props.setTeamMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        // props.resetTeam();\r\n        // props.setTeamMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTeams(props.myProfile.UserProfileId);\r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\r\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\r\n                <BidList\r\n                    CellClick={CellClick}\r\n                    Button1Handle = {CancelBid}\r\n                    //Button2Handle = {DeleteTeam}\r\n                    List={props.tournamentsForBids.myBids}\r\n                >\r\n                    \r\n                </BidList>\r\n                \r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n        team: state.teamsEntity,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    cancelBidTeamToTournamentGroup, \r\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\r\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport {\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\r\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\r\n} from '../../../../store/tournamentsReducer'\r\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \r\n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\r\nimport {\r\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \r\n} from '../../../../store/teamsReducer'\r\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\r\nimport { connect } from 'react-redux';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport BidTeamList from '../BidTeam/BidList';\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\r\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\r\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\r\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\r\n\r\n\r\n\r\n\r\n\r\nconst TeamItem = (props) => {\r\n    let currentDate = new Date();\r\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\r\n\r\n    const teamDate = new Date(\r\n        props.teams.selected.WhenBorn.year,\r\n        props.teams.selected.WhenBorn.month-1,\r\n        props.teams.selected.WhenBorn.day\r\n        );\r\n\r\n        useEffect(() =>{\r\n            if (props.teams.selected != null){\r\n                props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\r\n                props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\r\n            }\r\n        }, props.teams.selected)\r\n        \r\n    \r\n    const MakeBid = (tournamentgroup) => {\r\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n        //setTempGroupName(\"\");\r\n    }\r\n\r\n    const CancelBid = (tournamentgroup) => {\r\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n        //setTempGroupName(\"\");\r\n    }\r\n    \r\n    const SelectTournament = (tournament) => {\r\n        props.getTournamentGroups(tournament)\r\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\r\n        props.setBidTeamSelectedMode(\"groups\")\r\n    }\r\n    \r\n    const BackToTournaments = () => {\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n    }\r\n\r\n    switch (props.mode) {\r\n        case \"view\": {\r\n            return (\r\n                <>\r\n                    <FormItem top=\"Ваш город\">\r\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Название команды\" bottom=\"Имя турнира должно быть уникальным\">\r\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Дата основания\">\r\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Описание турнира\">\r\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Логотип\">\r\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\r\n                    </FormItem>\r\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                            <List>\r\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\r\n                            </List>\r\n                            :\r\n                            <FormItem>\r\n                                <InfoRow>Нет групп</InfoRow>\r\n                            </FormItem>\r\n                        }\r\n                    </Group> */}\r\n                </>\r\n            )\r\n        }; break;\r\n        case \"add\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Новая команда</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название команды\">\r\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата основания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\r\n                                defaultValue={props.teams.selected.WhenBorn}\r\n                                value={props.teams.selected.WhenBorn}\r\n                                onDateChange={value => props.setTeamWhenBorn(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание команды\">\r\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group> */}\r\n                        {/* <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem> */}\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTeam(props.teams.selected, props.myProfile)}>Создать</Button>\r\n                            <Button onClick={props.resetTeam} mode=\"secondary\">Отмена</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        }; break;\r\n        case \"edit\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Управление командой</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название команды\">\r\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата основания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\r\n                                defaultValue={props.teams.selected.WhenBorn}\r\n                                value={props.teams.selected.WhenBorn}\r\n                                onDateChange={value => props.setTeamWhenBorn(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание команды\">\r\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group> */}\r\n                        {/* <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem> */}\r\n                        <FormItem top=\"Заявки на турнир\">\r\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\r\n                        </FormItem>\r\n                        <FormItem top=\"Куда можно заявиться\">\r\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\r\n                                <BidTeamTournamentList\r\n                                    CellClick={SelectTournament}\r\n                                    // Button1Handle = {MakeBid}\r\n                                    // Button2Handle = {CancelBid}\r\n                                    Bids = {props.tournamentsForBids.myBids}\r\n                                    List={props.tournamentsForBids.tournaments}\r\n                                ></BidTeamTournamentList>\r\n                        :\r\n                                <BidTeamTournamentGroupsList\r\n                                    CellClick={BackToTournaments}\r\n                                    Button1Handle = {MakeBid}\r\n                                    Button2Handle = {CancelBid}\r\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\r\n                                    Bids = {props.tournamentsForBids.myBids}\r\n                                    TeamName={teamNameOnTournament}\r\n                                    SetTeamName={SetTeamNameOnTournament}\r\n                                ></BidTeamTournamentGroupsList>\r\n                        }\r\n                        </FormItem>\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTeam(props.teams.selected, props.myProfile)}>Внести изменения</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        };break;\r\n        default:{\r\n            <Group>\r\n                Не выбран режим отображения компонента (view, add, edit)\r\n            </Group>\r\n        };break;\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        teams: state.teamsEntity,\r\n        bidTeams: state.bidTeamsEntity,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n        SelectedName: state.teamsEntity.selected.Name,\r\n        bidSelectMode: state.bidTeamsEntity.selectMode, \r\n        cities: state.cityEntity.cities,\r\n        myProfile: state.profileEntity.myProfile,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\r\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\r\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \r\n})(TeamItem)","import React, { useState, useEffect } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot, ConfigProvider, Badge, Header } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport { setActiveMenuItem } from './store/mainMenuReducer';\r\nimport { getAllPlaces, getAllPlacesInCityByCityId } from './store/placeReducer';\r\nimport { setVkProfileInfo, getUserProfile, getAuthInfo, setTriedToGetProfile, setUserProfileCity } from './store/profileReducer';\r\nimport { setGlobalPopout } from './store/systemReducer';\r\nimport { getAllCityTournamentAdminsByCityId } from './store/tournamentsReducer';\r\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity  } from './store/bidTeamsReducer';\r\nimport { getAllCitiesFromServer } from './store/cityReducer';\r\nimport { setShowAdminTourneyTab } from './store/systemReducer';\r\n\r\n\r\nimport { Epic, Tabbar, TabbarItem, Panel, PanelHeader, PanelHeaderButton, PanelHeaderBack, Tabs, TabsItem, Div, Avatar, Group, SimpleCell, InfoRow } from '@vkontakte/vkui';\r\nimport { connect } from 'react-redux';\r\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\r\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\r\nimport { memberingCollectTypes } from './store/constants/commonConstants'\r\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\r\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\r\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\r\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\r\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\r\nimport BidTeamTournamentGroupsList from './components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList';\r\n\r\n\r\nconst App = (props) => {\r\n\tconst [fetchedUser, setUser] = useState(null);\r\n\tconst [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\tconst [modalWindow, setModalWindow] = useState(null);\r\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\r\n\r\n\t\r\n\r\n\tuseEffect(() => {\r\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\r\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\r\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\r\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\r\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tasync function fetchData() {\r\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\r\n\r\n\r\n\t\t\tsetUser(user);\r\n\t\t\tprops.setVkProfileInfo(user);\r\n\t\t\tprops.getAllCitiesFromServer();\r\n\r\n\r\n\t\t\t//Build an object which matches the structure of our view model class\r\n\t\t\t//setPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\t\t}\r\n\r\n\t\tasync function getDataFromServer() {\r\n\r\n\t\t\t// грузим профиль. \r\n\t\t\t//props.getUserProfile();\r\n\t\t\t//props.getAllPlaces();\r\n\r\n\r\n\t\t\t// если не загрузился, значит регистрируем пользователя.\r\n\t\t\t// в хранилище у нас уже лежит инфа о пользователе (может кроме друзей и года рождения)\r\n\t\t\t// запросить у пользователя реальную дату рождения [и список друзей]\r\n\t\t\t// отправить запрос на регстрицию профиля (Имя, фамилия, дата рождения, город, профиль ВК, [друзья])\r\n\t\t\t// загрузить с сервера профиль пользователя\r\n\t\t\t// если город пользователя найден среди городов работы приложения, тогда\r\n\t\t\t// загружаем все сборы по этому городу\r\n\t\t\t// если не найден, тогда говорим, что его город не найден и предлагаем выбрать город из списка\r\n\r\n\t\t\t// после выбора города из списка, сохраняем его в профиль пользователю, загружаем снова профиль и \r\n\t\t\t// грузим сборы по этому городу\r\n\r\n\t\t\t// у организатора должен быть указан телефон и ссылка на профиль ВК, куда можно написать вопрос.\r\n\t\t\t// роль организатора - нужен доступ к телефону\r\n\r\n\r\n\t\t\t// загрузка сборов (по городу)\r\n\t\t\t// загрузка мест (надо по городу)\r\n\t\t\t//props.getAllPlaces();\r\n\r\n\t\t\t// получение всех городов\r\n\t\t}\r\n\r\n\r\n\t\t//getDataFromServer();\r\n\t\tfetchData();\r\n\r\n\t\t// загружаем сборы (в полях должны быть айдишники и текстовое описание. чтобы далее подробности подгружались при переходе к подробностям)\r\n\t\t//props.getHotCollects();\r\n\r\n\r\n\t\t// загружаем пользователей \r\n\r\n\r\n\t}, []);\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\t// а это уже когда прогрузился и выбран город профиля\r\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\r\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\r\n\t\t\t// загружаем места этого города\r\n\r\n\t\t\t// получаем список мест по umbId города\r\n\t\t\tprops.getAllPlacesInCityByCityId(props.myProfile.CityUmbracoId);\r\n\r\n\t\t\t// получаем список админов турниров города по umbId города\r\n\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\r\n\t\t}\r\n\r\n\t\t// это пока не прогрузился город профиля (не выбран)\r\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\r\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\r\n\t\t{\r\n\r\n\t\t\t// предлагаем выбрать город\r\n\t\t\tsetPopout(null);\r\n\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t}\r\n\r\n\r\n\t}, [props.myProfile, props.vkProfile, props.cities])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.places && props.places.length > 0) {\r\n\r\n\t\t}\r\n\t}, [props.places])\r\n\r\n\t// при смене глобального Popout и возникновении ошибки\r\n\tuseEffect(() => {\r\n\t\tif (props.errorObject && props.errorObject.resultcode != 0)\r\n\t\t\tsetModalWindow(<ModalCommon modalName=\"Error\" data={props.errorObject} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\telse {\r\n\t\t\tsetPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\t\t}\r\n\t}, [props.globalPopout, props.errorObject])\r\n\r\n\r\n\t// при загрузке профиля (по факту приложения)\r\n\tuseEffect(() => {\r\n\t\t// нужно узнать город, далее если этого города нет в списке поддерживаемых, предлжить выбрать другой город и отправить заявку на добавление города. Всё это в модалке\r\n\t\t// другой вопрос. если кто-то создает фейковый сбор, как гарантировать другим, что это не фейк?\r\n\t\t// ввести в рейтинг поле \"гарант сбора. если поступает жалоба на сбор (не было сбора), модератор засчитывает штрафной балл организатору\"\r\n\t\t// у людей, которые первый раз собирают, писать город из профиля, количество друзей и то, что человек еще не собирал ни разу, а значит может быть фейком\r\n\t\t// еще нужно запрашивать права на доступ к инфе: город, дата рождения, друзья, \r\n\t\t// а еще в бэке надо сделать так, чтобы записи в Leg и City не плодились, а искали соответствующие из умбрако и ставили их Id\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\r\n\t\t\tprops.getUserProfile(props.vkProfile);\r\n\t\t}\r\n\r\n\t}, [props.vkProfile])\r\n\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\t\t\tif ((!props.myProfile) & (props.triedToGetProfile)) { // не зарегистрирован\r\n\t\t\t\tprops.getAuthInfo(props.vkProfile); // регаем\r\n\t\t\t}\r\n\t\t}\r\n\t}, [props.triedToGetProfile])\r\n\r\n\tuseEffect(() => {\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\t\t\tif (props.myProfile) // зарегистрирован и получил данные\r\n\t\t\t{\r\n\t\t\t\t// если не год рождения скрыт настройками приватности и из-за этого при регистрации на бэкэнде дата рождения не определилась, \r\n\t\t\t\t// выводим окно выбора года рождения и после выбора правим его в профиле ВК\r\n\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() < 1920)) {\r\n\t\t\t\t\tsetPopout(null);\r\n\t\t\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// после регистрации, загрузки новых данных с сервера и указания года рождения необходимо обновить данные на сервере\r\n\t\t\t\t\tif (new Date(props.myProfile.Birth).getFullYear() < 1920) {\r\n\t\t\t\t\t\tprops.getAuthInfo(props.vkProfile);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { // если данные обновлены и все в порядке с профилями\r\n\t\t\t\t\t\tsetModalWindow(null);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// поправка даты в vk профиле (правится, когда профиль грузится с бэкэнда без регистрации)\r\n\t\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() >= 1920)) {\r\n\t\t\t\t\t\tprops.setVkProfileInfo({ ...props.vkProfile, bdate: props.vkProfile.bdate + \".\" + new Date(props.myProfile.Birth).getFullYear().toString() })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (props.myProfile.CityUmbracoId != null && props.myProfile.CityUmbracoId == -1) {\r\n\t\t\t\t\t\tdebugger\r\n\t\t\t\t\t\t// предлагаем выбрать город\r\n\t\t\t\t\t\tsetPopout(null);\r\n\t\t\t\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t\t// if (props.myProfile.Name)\r\n\t\t// {\r\n\t\t// \tsetModalWindow(<ModalCommon modalName=\"MyProfile\" data={props.myProfile} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t// }\r\n\t}, [props.myProfile])\r\n\r\n\tuseEffect(() => {\r\n\t\t// если загрузились админы города\r\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\r\n\t\t\t// отображаем пункт меню администрирование турниров\r\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\r\n\t\t\t\tprops.setShowAdminTourneyTab(true)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprops.setShowAdminTourneyTab(false)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [props.tournamentAdmins])\r\n\r\n\t// useEffect(() =>{\r\n\t// \tdebugger\r\n\t// \tif (props.vkProfile && props.vkProfile.city) {\r\n\t// \t\tif (props.myProfile) // зарегистрирован и получил данные\r\n\t// \t\t{\r\n\t// \t\t\tif (props.team.selected != null){\r\n\t// \t\t\t\tprops.getActualTournamentsInCity(props.myProfile, props.team.selected);\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }, [props.team.selected])\r\n\r\n\t// const changeView = (e) => {\r\n\t// \tprops.setActiveMenuItem(e.currentTarget.dataset.story)\r\n\t// }\r\n\r\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\r\n\t\tif (menuItem.enabled && menuItem.show)\r\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\r\n\t\telse\r\n\t\t\treturn null\r\n\t}\r\n\t).filter(i => i);\r\n\r\n\tif ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\r\n\t\tdebugger\r\n\r\n\treturn (\r\n\t\t<ConfigProvider>\r\n\t\t\t<AdaptivityProvider>\r\n\t\t\t\t<AppRoot>\r\n\t\t\t\t\t<Epic\r\n\t\t\t\t\t\tactiveStory={props.mainMenu.activeItem.name}\r\n\t\t\t\t\t\ttabbar={\r\n\t\t\t\t\t\t\t<Tabbar>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\r\n\t\t\t\t\t\t\t\t{props.ShowAdminTeamTab && <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\r\n\t\t\t\t\t\t\t</Tabbar>}>\r\n\r\n\t\t\t\t\t\t<View id=\"hot\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tГорячее\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t{/* <AddCollectButton isBack={false} toMenuName=\"addcollect\">Создать сбор</AddCollectButton> */}\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Информация\">\r\n\t\t\t\t\t\t\t\t\t\tТурниры любительской лиги твоего города\r\n\t\t\t\t\t\t\t\t\t</InfoRow>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n\t\t\t\t\t\t\t\t\t<Tabs>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />}>Сегодня</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem selected after={<Badge mode=\"prominent\" />}>\r\n\t\t\t\t\t\t\t\t\t\t\tЗавтра\r\n        \t\t\t\t\t\t\t\t</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />}>\r\n\t\t\t\t\t\t\t\t\t\t\tПозже\r\n        \t\t\t\t\t\t\t\t</TabsItem>\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tВсе сборы\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"profile\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tПрофиль\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Город\">{props.myProfile && props.myProfile.CityName}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Год рождения\">{props.myProfile && new Date(props.myProfile.Birth).getFullYear()}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Город привязки\">{props.myProfile && props.myProfile.CityUmbracoName}</InfoRow>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<ProfilePanel></ProfilePanel>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tУправление турнирами\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tМои команды\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tТурнир\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TournamentItem mode={props.tournament.mode}></TournamentItem>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tКоманда\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tДоступно для заявки\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\r\n\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\r\n\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\r\n\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \r\n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \r\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \r\n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\r\n\t\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \r\n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\r\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \r\n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tИгрок\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\tИгрок\r\n\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\r\n\t\t\t\t\t</Epic>\r\n\t\t\t\t</AppRoot>\r\n\t\t\t</AdaptivityProvider>\r\n\t\t</ConfigProvider>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\r\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\r\n\t\tcities: state.cityEntity.cities,\r\n\t\tplaces: state.placeEntity.places,\r\n\t\tglobalPopout: state.system.GlobalPopout,\r\n\t\tvkProfile: state.profileEntity.vkProfile,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n\t\terrorObject: state.system.ErrorObject,\r\n\t\ttriedToGetProfile: state.profileEntity.triedToGetProfile,\r\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\r\n\t\ttournament: state.tournamentsEntity,\r\n\t\tteam: state.teamsEntity,\r\n\t\tbidTeams: state.bidTeamsEntity,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity,\r\n\tsetActiveMenuItem, getAllPlaces, setVkProfileInfo, setGlobalPopout, getUserProfile, getAuthInfo, setTriedToGetProfile,\r\n\tgetAllCitiesFromServer, setUserProfileCity, getAllPlacesInCityByCityId, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab,\r\n})(App);\r\n","import { users } from \"./constants/commonConstants\";\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\n\r\n\r\nconst initState = {\r\n    users: [\r\n        users[0],\r\n        users[1],\r\n    ]\r\n}\r\n\r\n\r\nlet userReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\n\r\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\n\r\nexport const ampluaCathegoryTypes = [\r\n    {id: 0, name: \"Вратарь\"},\r\n    {id: 1, name: \"Защитник\"},\r\n    {id: 2, name: \"Полузащитник\"},\r\n    {id: 3, name: \"Нападающий\"},\r\n    {id: 4, name: \"Тренер\"},\r\n    {id: 5, name: \"Административный персонал\"},\r\n]\r\n\r\nexport const ampluaTypes = [\r\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n]\r\n\r\nconst initState = {\r\n\r\n}\r\n\r\n\r\nlet ampluaReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\n\r\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport profileReducer from './profileReducer.js'\r\nimport collectReducer from './collectReducer.js'\r\nimport userReducer from './userReducer.js'\r\nimport hot from './hotReducer.js'\r\nimport tournaments from './tournamentsReducer.js'\r\nimport teams from './teamsReducer.js'\r\nimport bidTeams from './bidTeamsReducer.js'\r\nimport ampluaReducer from './ampluaReducer.js'\r\nimport placeReducer from './placeReducer.js'\r\nimport paymentReducer from './paymentReducer.js'\r\nimport mainMenuReducer from './mainMenuReducer.js'\r\nimport systemReducer from './systemReducer.js'\r\nimport cityReducer from './cityReducer.js'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\r\n    }) : compose;\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileEntity: profileReducer,\r\n    collectEntity: collectReducer,\r\n    hotEntity: hot,\r\n    tournamentsEntity: tournaments,\r\n    teamsEntity: teams,\r\n    teamsEntity: teams,\r\n    bidTeamsEntity: bidTeams,\r\n    userEntity: userReducer,\r\n    cityEntity: cityReducer,\r\n    ampluaEntity: ampluaReducer,\r\n    placeEntity: placeReducer,\r\n    paymentEntity: paymentReducer,\r\n    mainMenu: mainMenuReducer,\r\n    system: systemReducer,\r\n})\r\n\r\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\r\n// composeEnhancers(\r\n//     applyMiddleware(thunk))\r\n\r\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nwindow.store = store;\r\n\r\nexport default store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\nimport store from './store/store'\r\nimport { Provider } from \"react-redux\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n  <App />\r\n  </Provider>, document.getElementById(\"root\"));\r\nif (process.env.NODE_ENV === \"development\") {\r\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}