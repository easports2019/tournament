{"version":3,"sources":["store/mainMenuReducer.js","store/constants/commonConstants.js","store/systemReducer.js","utils/api/server.js","utils/api/api.js","store/placeReducer.js","store/profileReducer.js","store/tournamentsReducer.js","store/matchReducer.js","store/bidTeamsReducer.js","store/cityReducer.js","components/Panels/ProfilePanel/ProfilePanel.jsx","components/Panels/Common/HOCs/withHistorySave.jsx","components/Panels/Common/BackButton/BackButton.jsx","components/Panels/Common/WithHistory/TabbarItemWithHistory.jsx","components/Modals/ModalCommon/ModalCommon.jsx","img/common/defaultPlace.jpg","components/Panels/Common/WithHistory/RichCellWithHistory.jsx","components/Panels/Common/WithHistory/Icon24ChevronRightWithHistory.jsx","utils/convertors/dateUtils.js","components/Panels/AdminPanel/Tournament/TournamentAdminList.jsx","components/Panels/Common/WithHistory/ButtonWithHistory.jsx","components/Panels/AdminPanel/Tournament/TournamentAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamAdminList.jsx","store/teamsReducer.js","components/Panels/AdminPanel/Team/TeamAdminPanel.jsx","components/Panels/AdminPanel/ListItem/ListItem.jsx","components/Panels/AdminPanel/ListItem/BidListItem.jsx","components/Panels/Common/Shedule/Shedule.jsx","components/Panels/AdminPanel/Tournament/TournamentItem.jsx","components/Panels/AdminPanel/BidTeam/BidList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList.jsx","components/Panels/AdminPanel/BidTeam/BidTeamAdminPanel.jsx","components/Panels/AdminPanel/Team/TeamItem.jsx","components/Panels/Common/Hot/Hot.jsx","App.js","store/userReducer.js","store/ampluaReducer.js","store/store.js","index.js"],"names":["ACTION_SET_ACTIVE_MENU_ITEM","initState","menuItems","id","name","title","position","enabled","show","activeItem","setActiveMenuItem","menuName","type","mainMenuReducer","state","action","find","it","currentDate","Date","BidTeam","Id","AdminTournamentComment","TeamName","When","day","getDay","month","getMonth","year","getFullYear","TeamId","Team","TournamentGroupId","TournamentGroup","UserProfileId","UserProfile","Approved","Deleted","Published","EmptyTournament","Name","Year","WhenBegin","WhenEnd","Details","Reglament","MatchLength","Logo","CityId","TournamentGroups","Admins","geo","Cities","Geo","Latitude","Longitude","Population","Owners","places","PlaceId","val","Address","Index","Street","SubjectType","House","Photo","Path","Stages","Parking","BicycleParking","Worktime","FromHour","FromMinute","ToHour","ToMinute","Works24","NoBreaks","BreakTimes","DressingRooms","RoomNumber","Shower","HotWater","Areas","Width","Length","Height","CapacitySport","CapacityViewers","Price","Enabled","Access","Main","ampluaCathegoryTypes","ampluaTypes","IsPlayer","AmpluaCathegory","users","FirstName","SurName","FatherName","NickName","Datebirth","Leg","CityFrom","CityNow","Level","Total","ShotStrong","LongShotAccuracy","ShortShotAccuracy","RunSpeed","ShortPassingSpeed","LongPassingSpeed","ShortPassingAccuracy","LongPassingAccuracy","Stamina","Feints","Reaction","ScoringFlair","Intellect","Rejection","SlideEffect","Header","Creativity","Dribble","Opening","Charisma","BallTaking","FieldVision","BallWorkTime","OneTouchGameAccuracy","OneTouchGameFrequency","PsichologyStability","CurrentPhisicalForm","Injury","WhenInjuried","Comment","Amplua","KeyValuePercent","amplua","KeyFunctions","commonUtils","deepClone","obj","clObj","i","Object","copyCity","city_source","copyAmplua","amplua_source","copyKeyFunction","keyFunction_source","copyUser","user_source","undefined","keys","length","map","amp","keyF","copyOwner","owner_source","copyAccess","access_source","copyPlace","place_source","Owner","City","copyCollect","collect_source","Place","Hour","Minute","DurationMinutes","Options","FixedByMemberPrice","UsersGroups","uGroup","NumberOf","Players","user","User","Payment","OrganizatorIsMember","UsersInvited","uInvited","ToBe","UsersWantsToParticipate","uWP","Permanent","AcceptedByPlaceOwner","Organizer","ANY_ACTION_TYPE","SYSTEM_PUSH_TO_HISTORY","SYSTEM_POP_FROM_HISTORY","SYSTEM_SET_GLOBAL_POPOUT","SYSTEM_SET_ERROR_MESSAGE","SYSTEM_RESET_ERROR","SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB","currentMenu","history","GlobalPopout","ErrorObject","resultcode","result","data","message","ShowAdminTourneyTab","ShowAdminTeamTab","setGlobalPopout","on","setErrorMessage","errorObject","resetError","goToPanel","nextPanel","back","dispatch","getState","preLast","system","item","pushToHistory","systemReducer","slice","showAdminTourneyTab","authQueryString","window","location","search","PostJsonInstance","Axios","create","baseURL","backserver","timeout","method","headers","errorObj","text","okObj","dat","CityAPI","post","then","ErrorMessage","catch","error","PlaceAPI","startindex","formData","FormData","append","cityId","TeamAPI","teamId","ProfileAPI","vkUserData","JSON","stringify","vkUser","bdate","split","UTC","city","country","first_name","last_name","photo_100","photo_200","photo_max_orig","sex","timezone","userData","CityTournamentAdminAPI","cityUmbracoId","tournament","team","newgroup","oldgroup","userprofile","teamToSend","newgroupToSend","TournamentId","oldgroupToSend","newGroup","oldGroup","userProfile","tournamentToSend","userProfileId","CityUmbracoId","publish","tg","admintext","tournamentGroupToSend","tournamentGroup","tournamentGroupId","tGroup","TeamAdminAPI","getAll","getAllInCityByCityId","getAllByAdminProfileId","saveTeam","WhenBorn","publishTournament","deleteTeam","BidTeamAPI","bid","tournamentgroup","teamName","bidTeamToTournament","MatchAPI","matchInfo","hours","minutes","match","TournamentAPI","tournamentId","demoPlaces","PLACES_SET_ALL_PLACES","PLACES_SET_PLACE_BY_UMBRACO_ID","setPlaces","placeReducer","PROFILE_SET_VK_PROFILE_INFO","PROFILE_SET_USER_PROFILE","PROFILE_SET_TRIED_TO_GET_PROFILE","myProfile","vkProfile","triedToGetProfile","setUserProfile","setTriedToGetProfile","tried","profileReducer","demoCityTournamentAdmins","TOURNAMENT_SET_ALL_TOURNAMENTS","TOURNAMENT_SET_SELECTED_TOURNAMENT","TOURNAMENT_SET_TOURNAMENTGROUPS","TOURNAMENT_SET_TOURNAMENTTEAMS","TOURNAMENT_SET_MYTOURNAMENT","TOURNAMENT_DELETE_MYTOURNAMENT","TOURNAMENT_SET_MODE","TOURNAMENT_MATCH_LENGTH","TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS","TOURNAMENT_SET_WHEN_BEGIN","TOURNAMENT_SET_WHEN_END","TOURNAMENT_SET_NAME","TOURNAMENT_SET_DETAILS","TOURNAMENT_SET_REGLAMENT","TOURNAMENT_DEL_GROUP_BY_KEY_ID","TOURNAMENT_DEL_GROUP_BY_ID","TOURNAMENT_ADD_GROUP","TOURNAMENT_SET_GROUP","TOURNAMENT_RESET_TOURNAMENT","TOURNAMENT_PUBLISH","TOURNAMENT_UNPUBLISH","TOURNAMENT_SET_MY_TOURNAMENTS","TOURNAMENT_SET_NEW_BIDS","TOURNAMENT_DEL_BID","TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES","emptyTournament","tournaments","bidsNew","selectedForView","selected","selectedTables","myTournaments","cityTournamentAdmins","mode","setTournaments","setTournamentTables","tables","setMyTournament","mytournament","setSelectedTournament","deleteMyTournament","setMyTournaments","resetTournament","setTournamentWhenBegin","when","setTournamentWhenEnd","setTournamentMode","setTournamentName","value","setTournamentDetails","setTournamentReglament","setTournamentNewBids","bids","setCityTournamentAdmins","setSelectedTournamentGroups","groups","setTournamentTeams","bidsWithTeamsAndGroups","delGroupFromTournamentByKeyId","groupId","delGroupFromTournamentById","addGroupToTournament","group","editGroupInTournament","groupName","deleteTournamentBid","saveSelectedTournament","pl","deleteTournament","getTournamentTeams","getMyTournaments","tournamentReducer","tour","filter","max","forEach","KeyId","getDate","x","newTGroups","Teams","MATCH_SET_ALL_MATCHES","MATCH_SET_HOT_MATCHES","MATCH_SET_ACCESS","MATCH_SET_MODE","MATCH_SET_PLAYED","MATCH_SET_HOT_PANEL","prototype","addDays","days","date","this","setDate","matches","hot","yesterday","today","tomorrow","hotPanel","access","setAllMatches","setHotMatches","setAccess","setMode","getAllMatchesByTournament","addMatchToShedule","Number","delMatchFromShedule","matchReducer","tomorrow_begin","tomorrow_end","played","panelName","demoBidTeam","BID_TEAM_SET_TOURNAMENTS","BID_TEAM_SET_MY_BIDS","BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS","BID_TEAM_SET_SELECTED_MODE","BID_TEAM_ADD_MY_BID","BID_TEAM_DEL_MY_BID","BID_TEAM_APPROVE_BID","emptyBidTeam","selectedTournament","myBids","selectMode","setMyBids","addMyBid","delMyBid","setBidTeamSelectedTournamentGroups","getActualTournamentsInCity","setCityBidTeamAdmins","addBidTeamToTournamentGroup","cancelBidTeamToTournamentGroup","bidBidTeamReducer","CITY_GET_ALL_FROM_SERVER","cities","cityReducer","ProfilePanel","props","withHistorySave","WrappedComponent","mapDispatchToProps","hocComponent","clickEvent","bind","evt","handleClick","toMenuName","isBack","prevProps","prevState","onClick","React","Component","connect","ModalCommon","useState","selectedYear","setSelectedYear","selectedCity","setSelectedCity","bidCity","setBidCity","useEffect","activeModal","modalName","header","top","placeholder","onClose","Close","actions","size","Surname","Birth","Register","isNaN","onChange","e","currentTarget","options","start","count","current","push","label","renderOption","option","restProps","profile","style","color","CityName","CityUmbracoName","dateToString","newDate","dateOptions","weekday","toLocaleString","TournamentAdminList","List","multiline","Button1Handle","Button2Handle","caption","after","CellClick","data-story","mainMenu","profileEntity","tournamentsEntity","TeamAdminList","TEAM_SET_ALL_TEAMS","TEAM_SET_SELECTED_TEAM","TEAM_SET_MYTEAM","TEAM_ADD_MYTEAM","TEAM_DELETE_MYTEAM","TEAM_SET_MODE","TEAM_SET_ALL_CITYTEAMADMINS","TEAM_SET_WHEN_BORN","TEAM_SET_NAME","TEAM_SET_DETAILS","TEAM_SET_REGLAMENT","TEAM_DEL_GROUP","TEAM_ADD_GROUP","TEAM_SET_GROUP","TEAM_RESET_TEAM","TEAM_PUBLISH","TEAM_UNPUBLISH","TEAM_SET_MY_TEAMS","emptyTeam","Matches","teams","myTeams","cityTeamAdmins","setMyTeam","myteam","addMyTeam","setSelectedTeam","deleteMyTeam","setMyTeams","resetTeam","setTeamMode","getMyTeams","teamReducer","maxT","maxA","maxM","maxP","TeamGroups","teamsEntity","publishTeam","ListItem","removable","onRemove","Delete","BidListItem","adminText","setAdminText","Accept","Item","Decline","placeEntity","optMaker","todayIs","makeZeroBefore","m","g","p","teamGoals","Array","isArray","selectedTournamentGroup","setSelectedTournamentGroup","selectedTournamentGroupTeamList","setSelectedTournamentGroupTeamList","selectedTeam1","setSelectedTeam1","selectedTeam2","setSelectedTeam2","selectedTeam1Goals","setTeam1Goals","selectedTeam2Goals","setTeam2Goals","selectedPlace","setSelectedPlace","selectedId","setSelectedId","selectedPlayed","setSelectedPlayed","selectedDate","setSelectedDate","selectedHour","setSelectedHour","selectedMinute","setSelectedMinute","getGroup","changeGroup","league_id","allMatchesInAllGroups","addMatch","editId","Team1Id","Team2Id","BidTeamToTournamentId1","BidTeamToTournamentId2","Team1Goals","Team2Goals","Played","groupAndMatchesItem","place","toLocaleDateString","toLocaleTimeString","Team1","Team2","getHours","getMinutes","goToEditMatch","otherProps","min","defaultValue","onDateChange","Checkbox","checked","delCurrentMatch","align","SelectedName","TournamentTables","cityEntity","getTournamentGroups","replaceTeam","tOldGoup","tNewGroup","tGoup","getTeamInfo","changeTournamentTeamBidTournamentGroup","deleteTeamFromTournament","setTournamentMatchLength","acceptTeamToTournamentBid","declineTeamToTournamentBid","deleteTournamentGroup","addTournamentGroup","getTournamentNewBids","getTournamentTablesByTournamentId","tempGroupName","setTempGroupName","Tab","currentTab","setCurrentTab","activePopout","setActivePopout","AcceptBid","DeclineBid","SetPopup","oldTg","iosCloseItem","autoclose","newTg","SelectTournamentGroup","popout","activePanel","bottom","table","tT","sort","firstItem","secondItem","row","Games","Wins","Loses","Draws","GoalsScored","GoalsMissed","GoalsDifference","Points","keyId","trim","before","DeleteTeam","BidList","Tournament","Founder","BidTeamTournamentList","Bids","BidTeamTournamentGroupsList","SetTeamName","tournamentsForBids","bidTeamsEntity","bidTeams","bidSelectMode","setBidTeamSelectedMode","getTeamBidsByTeam","setTeamWhenBorn","setTeamDetails","setTeamName","saveSelectedTeam","teamNameOnTournament","SetTeamNameOnTournament","teamDate","Team1Name","Team2Name","globalPopout","tournamentAdmins","getTournamentsByCityId","cityUmbId","getAllPlaces","setVkProfileInfo","getUserProfile","getAuthInfo","vkProfileInfo","setHotPanel","getAllCitiesFromServer","setUserProfileCity","getAllPlacesInCityByCityId","getAllCityTournamentAdminsByCityId","cityTournamentId","setShowAdminTourneyTab","getMatchesInCurrentCity","setUser","setPopout","modalWindow","setModalWindow","a","bridge","send","subscribe","detail","schemeAttribute","document","createAttribute","scheme","body","attributes","setNamedItem","fetchData","toString","menuItem","activeStory","tabbar","modal","left","t","hidden","userReducer","ampluaReducer","composeEnhancers","compose","reducers","combineReducers","collectEntity","collectReducer","hotEntity","paymentReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.f9f58b83.chunk.js","sourcesContent":["const ACTION_SET_ACTIVE_MENU_ITEM = \"football/mainMenu/ACTION_SET_ACTIVE_MENU_ITEM\";\r\n\r\n\r\n\r\nconst initState = {\r\n    menuItems: [{\r\n        id: 0,\r\n        name: \"hot\",\r\n        title: \"Горячее\",\r\n        position: 0,\r\n        enabled: true,\r\n        show: true,\r\n    },{\r\n        id: 1,\r\n        name: \"allTournaments\",\r\n        title: \"Турниры\",\r\n        position: 1,\r\n        enabled: true,\r\n        show: true,\r\n    },{\r\n        id: 2,\r\n        name: \"profile\",\r\n        title: \"Профиль\",\r\n        position: 3,\r\n        enabled: true,\r\n        show: true,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"tournamentadmin\",\r\n        title: \"Управление турнирами\",\r\n        position: 4,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"tournamentitem\",\r\n        title: \"Турнир\",\r\n        position: 5,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"teamadmin\",\r\n        title: \"Управление командами\",\r\n        position: 6,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"teamitem\",\r\n        title: \"Команда\",\r\n        position: 7,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 5,\r\n        name: \"addcollect\",\r\n        title: \"Новый сбор\",\r\n        position: 8,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 6,\r\n        name: \"viewcollect\",\r\n        title: \"Сбор\",\r\n        position: 9,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 7,\r\n        name: \"viewuser\",\r\n        title: \"Игрок\",\r\n        position: 10,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    {\r\n        id: 8,\r\n        name: \"bidlist\",\r\n        title: \"Доступно для заявки\",\r\n        position: 11,\r\n        enabled: true,\r\n        show: false,\r\n    },\r\n    \r\n],\r\n    activeItem: {id: 0, name: \"hot\", title: \"Горячее\", position: 0, enabled: true, show: true,},\r\n}\r\n\r\n\r\nlet mainMenuReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ACTION_SET_ACTIVE_MENU_ITEM: {\r\n            \r\n            return {...state,\r\n                activeItem: {...state.menuItems.find(it => it.name == action.menuName)}\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setActiveMenuItem = (menuName) => {\r\n    \r\n    return {\r\n        type: ACTION_SET_ACTIVE_MENU_ITEM,\r\n        menuName\r\n    }\r\n}\r\n\r\n\r\nexport default mainMenuReducer;","const currentDate = new Date();\r\n\r\n\r\n// таймслотов в одном часе\r\nexport const timeSlotsInOneHour = () => {\r\n    return +2\r\n}\r\n\r\nexport const getMaxNumberOfMembersInCollect = () => {\r\n    return +30\r\n}\r\n\r\nexport const getMinNumberOfMembersInCollect = () => {\r\n    return +2\r\n}\r\n\r\nexport const accessTypes = [\r\n    {Id: 0, Name: \"public\"},\r\n    {Id: 1, Name: \"private\"},\r\n    {Id: 2, Name: \"moderate\"},\r\n]\r\n\r\n// тип участия в сборе\r\nexport const memberingCollectTypes = {\r\n    Invite: 0, // приглашен\r\n    Member: 1, // уже подтвержден (участник)\r\n    Organizator: 2, // организатор\r\n    Participate: 3, // попросился\r\n    All: 4, // без фильтрации, все сборы\r\n}\r\n\r\nexport const cityTournamentAdmins = \r\n[\r\n    {\r\n        Id: 0, Name: \"Тестовый админ\", UserProfileId: 49, CityId: 71, ErrorMessage: \"\", Published: true, Deleted: false, \r\n    },\r\n]\r\n\r\nexport const TeamAdmins = \r\n[\r\n    {\r\n        Id : 0,\r\n        Name: \"Тестовая команда\",\r\n        Year: 2021,\r\n        WhenBorn: {day: 1, month: 2, year: 2021},\r\n        Details: \"Системная\",\r\n        Logo: \"\",\r\n        CityId: -1,\r\n        TournamentGroups: [], \r\n        Admins: [],\r\n        Matches: [],\r\n        Players: [],\r\n        Published: true,\r\n        Deleted: false,\r\n    },\r\n]\r\n\r\nexport const BidTeam = {\r\n    Id: -1,\r\n    AdminTournamentComment: \"\",\r\n    TeamName: \"\",\r\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\r\n    TeamId: -1, \r\n    Team: [],\r\n    TournamentGroupId: -1,\r\n    TournamentGroup: [],\r\n    UserProfileId: -1,\r\n    UserProfile: {},\r\n    Approved: false,\r\n    Deleted: false,\r\n    Published: false,\r\n\r\n}\r\n\r\nexport const Match = {\r\n    Id: -1,\r\n    Name: \"Матч\",\r\n    Description: \"Описание матча\",\r\n    Picture: \"\",\r\n    When: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\r\n    TournamentGroup: {},\r\n    TournamentGroupId: -1,\r\n    Place: {},\r\n    PlaceId: -1,\r\n    Team1: {},\r\n    Team1Id: -1,\r\n    Team2: {},\r\n    Team2Id: -1,\r\n    Team1Bid: {},\r\n    Team1BidId: -1,\r\n    Team2Bid: {},\r\n    Team2BidId: -1,\r\n    Team1Goals: 0,\r\n    Team2Goals: 0,\r\n    MatchEvents: [],\r\n    Deleted: false,\r\n    Published: false,\r\n    ErrorMessage: \"\",\r\n\r\n}\r\n\r\nexport const EmptyTournament = {\r\n    Id : -1,\r\n    Name: \"\",\r\n    Year: 0,\r\n    WhenBegin: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\r\n    WhenEnd: {day: currentDate.getDay(), month: currentDate.getMonth()+1, year: currentDate.getFullYear()},\r\n    Details: \"\",\r\n    Reglament: \"\", \r\n    MatchLength: 60,\r\n    Logo: \"\",\r\n    CityId: -1,\r\n    TournamentGroups: [], \r\n    Admins: [],\r\n    Published: false,\r\n    Deleted: false,\r\n}\r\n\r\n\r\nexport const geo = {\r\n    Cities: [\r\n        {\r\n            Id: 0,\r\n            Name: \"Кострома\",\r\n            Geo: {Latitude: 0.0000, Longitude: 0.0000},\r\n            Population: 250000, // население города\r\n            //users: 0, // сколько футболистов в городе\r\n            //places: 0, // сколько мест для аренды\r\n        },\r\n        {\r\n            Id: 1,\r\n            Name: \"Иваново\",\r\n            Geo: {Latitude: 1.0000, Longitude: 1.0000},\r\n            Population: 800000, // население города\r\n            //users: 0, // сколько футболистов в городе\r\n            //places: 0, // сколько мест для аренды\r\n        },\r\n    ],\r\n    Owners: [\r\n        {\r\n            Id: 0, \r\n            Name: \"Владелец 1\",\r\n        },\r\n        {\r\n            Id: 1, \r\n            Name: \"Владелец 2\",\r\n        }\r\n    ],\r\n}\r\n\r\nexport const places =  [\r\n        {\r\n            PlaceId: 0,\r\n            Name: \"Динамо\", /* placename*/\r\n            get Owner() { return geo.Owners[0]},\r\n            set Owner(val) { geo.Owners[0] = val},\r\n            get City() { return geo.Cities[0]},\r\n            set City(val) { geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Профсоюзная\", SubjectType: 'ул.', House: \"\"},\r\n            Geo: \"\",\r\n            //mainpicture: [{id: 0, name: \"\", path: \"\"},],  главная картинка\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\"},], // убрать свойство main\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 8, FromMinute: 0, ToHour: 23, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 0, ToHour: 14, ToMinute: 0,}]},\r\n            DressingRooms: [\r\n                { Id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { Id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, name: \"\", Width: 50, Length: 30, Height: 10, CapacitySport: 10, CapacityViewers: 30, Price: 2000 },\r\n                { Id: 1, name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 2000 },\r\n            ],\r\n            Price: 2000, // цена за час занятий  (перенести в игровые зоны)\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        },\r\n        {\r\n            PlaceId: 1,\r\n            Name: \"МЧС\",  /* placename*/\r\n            get Owner() {return geo.Owners[0]},\r\n            set Owner(val) {geo.Owners[0] = val},\r\n            get City() {return geo.Cities[0]},\r\n            set City(val) {geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Вертолетчиков\", SubjectType: 'городок ', House: \"\"},\r\n            Geo: \"\",\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\r\n            DressingRooms: [\r\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n                { Id: 1, Name: \"\", Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n            ],\r\n            Price: 1800, /* цена за час занятий, перенести в areas */\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        },\r\n        {   \r\n            PlaceId: 2,\r\n            Name: \"КГТУ\",  /* placename*/\r\n            get Owner() {return geo.Owners[0]},\r\n            set Owner(val) {geo.Owners[0] = val},\r\n            get City() {return geo.Cities[0]},\r\n            set City(val) {geo.Cities[0] = val},\r\n            Address: {Index: 0, Street: \"Дзжержинского\", SubjectType: 'улица ', House: \"12\"},\r\n            Geo: \"\",\r\n            Photo: [{Id: 0, Name: \"\", Path: \"\", Main: true},],\r\n            Stages: 0,\r\n            Parking: true,\r\n            BicycleParking: false, // велопарковка\r\n            Worktime: {FromHour: 9, FromMinute: 0, ToHour: 22, ToMinute: 0, Works24: false, NoBreaks: false, BreakTimes: [{FromHour: 13, FromMinute: 30, ToHour: 14, ToMinute: 30,}]},\r\n            DressingRooms: [\r\n                { id: 0, RoomNumber: \"\", Shower: true, HotWater: true, },\r\n                { id: 1, RoomNumber: \"\", Shower: false, HotWater: false, },\r\n            ],\r\n            Areas: [\r\n                { Id: 0, Name: \"\", /* areaname */ Width: 0, Length: 0, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n                { Id: 1, Name: \"\", Width: 40, Length: 20, Height: 0, CapacitySport: 0, CapacityViewers: 0, Price: 1800  },\r\n            ],\r\n            Price: 1800, /* цена за час занятий, перенести в areas */\r\n            Enabled: true,\r\n            Access: {},\r\n            \r\n        }\r\n    ]\r\n\r\n    export const ampluaCathegoryTypes = [\r\n        {Id: 0, Name: \"Вратарь\"},\r\n        {Id: 1, Name: \"Защитник\"},\r\n        {Id: 2, Name: \"Полузащитник\"},\r\n        {Id: 3, Name: \"Нападающий\"},\r\n        {Id: 4, Name: \"Тренер\"},\r\n        {Id: 5, Name: \"Административный персонал\"},\r\n        {Id: 6, Name: \"Игрок\"},\r\n    ]\r\n     \r\n    export const ampluaTypes = [\r\n        {Id: 0, Name: \"Вратарь\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[0]},\r\n        {Id: 1, Name: \"Правый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 2, Name: \"Левый защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 3, Name: \"Центральный защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 4, Name: \"Передний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 5, Name: \"Последний защитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[1]},\r\n        {Id: 6, Name: \"Правый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 7, Name: \"Левый полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 8, Name: \"Центральный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 9, Name: \"Атакующий полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 10, Name: \"Опорный полузащитник\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 11, Name: \"Левый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 12, Name: \"Правый вингер\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[2]},\r\n        {Id: 13, Name: \"Левый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 14, Name: \"Правый нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 15, Name: \"Центральный нападающий\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 16, Name: \"Игрок под нападающими\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[3]},\r\n        {Id: 17, Name: \"Тренер\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\r\n        {Id: 18, Name: \"Помощник тренера\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[4]},\r\n        {Id: 19, Name: \"Администратор команды\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\r\n        {Id: 20, Name: \"Организатор сбора\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[5]},\r\n        {Id: 21, Name: \"Игрок\", IsPlayer: true, AmpluaCathegory: ampluaCathegoryTypes[6]},\r\n        {Id: 22, Name: \"\", IsPlayer: false, AmpluaCathegory: ampluaCathegoryTypes[0]},\r\n    ]\r\n\r\n\r\nexport const users = [\r\n    {\r\n        Id: 0,\r\n        FirstName: \"Александр\",\r\n        SurName: \"Смирнов\",\r\n        FatherName: \"Евгеньевич\",\r\n        NickName: \"easports\",\r\n        Photo: \"/img/users/kostroma/alexsmirnov290587-01.jpg\",\r\n        Datebirth: new Date(\"05.29.1987\"),\r\n        Leg: 0, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n                ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n                Stamina: 100, // выносливость\r\n                Feints: 100, // финты\r\n                Reaction: 100, // реакция\r\n                ScoringFlair: 100, // голевое чутье\r\n                Intellect: 100, // ум\r\n                Rejection: 100, // отбор мяча\r\n                SlideEffect: 100, // игра в подкате\r\n                Header: 100, // игра головой\r\n                Creativity: 100, // креативность\r\n                Dribble: 100, // дрибблинг\r\n                Opening: 100, // открывание под пас\r\n                Charisma: 100, // харизма\r\n                BallTaking: 100, // прием мяча\r\n                FieldVision: 100, // видение поля\r\n                BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n                OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n                OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n                PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n        },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {id: 3, amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n    {\r\n        Id: 1,\r\n        FirstName: \"Евгений\",\r\n        SurName: \"Иванов\",\r\n        FatherName: \"Валерьевич\",\r\n        NickName: \"eivanov\",\r\n        Photo: \"/img/users/kostroma/eivanov010180-01.jpg\",\r\n        Datebirth: new Date(\"28.02.1983\"),\r\n        Leg: 1, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n            Stamina: 100, // выносливость\r\n            Feints: 100, // финты\r\n            Reaction: 100, // реакция\r\n            ScoringFlair: 100, // голевое чутье\r\n            Intellect: 100, // ум\r\n            Rejection: 100, // отбор мяча\r\n            SlideEffect: 100, // игра в подкате\r\n            Header: 100, // игра головой\r\n            Creativity: 100, // креативность\r\n            Dribble: 100, // дрибблинг\r\n            Opening: 100, // открывание под пас\r\n            Charisma: 100, // харизма\r\n            BallTaking: 100, // прием мяча\r\n            FieldVision: 100, // видение поля\r\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n    },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n    {\r\n        Id: 2,\r\n        FirstName: \"Фёдор\",\r\n        SurName: \"Смолов\",\r\n        FatherName: \"Валерьевич\",\r\n        NickName: \"fsmolov\",\r\n        Photo: \"/img/users/kostroma/fsmolov010189-01.jpg\",\r\n        Datebirth: new Date(\"01.01.1989\"),\r\n        Leg: 0, // 0-both, 1-left, 2-right\r\n        CityFrom: {...geo.Cities[0] },\r\n        CityNow: {...geo.Cities[0] },\r\n        Level: {Total: 100, ShotStrong: 100, LongShotAccuracy: 100, ShortShotAccuracy: 100, RunSpeed: 100, ShortPassingSpeed: 100, LongPassingSpeed: 100,\r\n            ShortPassingAccuracy: 100, LongPassingAccuracy: 100, \r\n            Stamina: 100, // выносливость\r\n            Feints: 100, // финты\r\n            Reaction: 100, // реакция\r\n            ScoringFlair: 100, // голевое чутье\r\n            Intellect: 100, // ум\r\n            Rejection: 100, // отбор мяча\r\n            SlideEffect: 100, // игра в подкате\r\n            Header: 100, // игра головой\r\n            Creativity: 100, // креативность\r\n            Dribble: 100, // дрибблинг\r\n            Opening: 100, // открывание под пас\r\n            Charisma: 100, // харизма\r\n            BallTaking: 100, // прием мяча\r\n            FieldVision: 100, // видение поля\r\n            BallWorkTime: 100, // время работы с мячом (передерживает или сразу отдает передачу)\r\n            OneTouchGameAccuracy: 100, // точность игры в одно касание\r\n            OneTouchGameFrequency: 100, // частота игры в одно касание (всегда человек отдает сразу ли редко играет в одно касание),\r\n            PsichologyStability: 100, // психическая устойчивость (чем выше, тем стабильнее и спокойнее человек, чем ниже, тем взрывнее, вспыльчивее)\r\n    },\r\n        CurrentPhisicalForm: 100, // текущая физическая форма\r\n        Injury: {WhenInjuried: new Date(), Comment: \"\"},\r\n        Amplua: [{\r\n            Id: 0, \r\n            Amplua: {...ampluaTypes[0] }, //  амплуа \r\n            KeyValuePercent: 90 // выборка из 100% насколько это моя ключевая позиция (в совокупности все поля не могут превышать 100%)\r\n        }, {Id: 3, Amplua: {...ampluaTypes[1] }, KeyValuePercent: 10}],\r\n        KeyFunctions: [{Id: 2, Name: \"Монстр выходов\", Comment: \"Идеальная игра на выходах\"}, \r\n                        {Id: 8, Name: \"Вырвинога\", Comment: \"Не жалеет соперника, играет всегда до конца\"}], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n\r\n    },\r\n]\r\n\r\nexport const myProfile = {\r\n    myProfile: users[0],\r\n}\r\n\r\n\r\nexport class commonUtils  {\r\n\r\n    static deepClone = (obj) => {\r\n        const clObj = {};\r\n        for(const i in obj) {\r\n            if (obj[i] instanceof Object) {\r\n                clObj[i] = this.deepClone(obj[i]);\r\n                continue;\r\n            }\r\n            clObj[i] = obj[i];\r\n        }\r\n        return clObj;\r\n    }\r\n\r\n    static copyCity = (city_source) => {\r\n        return city_source;\r\n    }\r\n\r\n    static copyAmplua = (amplua_source) => {\r\n        return amplua_source\r\n    }\r\n\r\n    static copyKeyFunction = (keyFunction_source) => {\r\n        return keyFunction_source\r\n    }\r\n\r\n    static copyUser = (user_source) => {\r\n        if (user_source == undefined || Object.keys(user_source).length === 0)\r\n            return undefined\r\n\r\n        return {\r\n            Id: user_source.Id,\r\n            FirstName: user_source.FirstName,\r\n            SurName: user_source.SurName,\r\n            FatherName: user_source.FatherName,\r\n            NickName: user_source.NickName,\r\n            Datebirth: user_source.Datebirth,\r\n            Leg: user_source.Leg, // 0-both, 1-left, 2-right\r\n            CityFrom: { ...this.copyCity(user_source.CityFrom) },\r\n            CityNow: { ...this.copyCity(user_source.CityNow) },\r\n            Level: {...user_source.Level\r\n            },\r\n            CurrentPhisicalForm: user_source.CurrentPhisicalForm, // текущая физическая форма\r\n            Injury: {...user_source.Injury},\r\n            Amplua: [...(user_source.Amplua && user_source.Amplua.length ? user_source.Amplua.map(amp => this.copyAmplua(amp)): [{}] )],\r\n            KeyFunctions: [...(user_source.KeyFunctions && user_source.KeyFunctions.length ? user_source.KeyFunctions.map(keyF => this.copyKeyFunction(keyF)): [{}])], // прозвища, характеризующие стиль игры человека, дают другие пользователи, \r\n        }\r\n            \r\n    }\r\n\r\n    static copyOwner = (owner_source) => {\r\n        return {...owner_source}\r\n    }\r\n    \r\n    static copyAccess = (access_source) => {\r\n        return {...access_source}\r\n    }\r\n\r\n    static copyPlace = (place_source) => {\r\n        \r\n        if (place_source == undefined || Object.keys(place_source).length === 0)\r\n            return undefined\r\n\r\n        return {\r\n            Id: place_source.Id,\r\n            Name: place_source.Name,\r\n            Owner: {...this.copyOwner(place_source.Owner)},\r\n            City: {...this.copyCity(place_source.City)},\r\n            Address: {...place_source.Address},\r\n            Geo: {...place_source.Geo},\r\n            Photo: [...place_source.Photo],\r\n            Stages: place_source.Stages,\r\n            Parking: place_source.Parking,\r\n            Worktime: {...place_source.Worktime, BreakTimes: [...place_source.Worktime.BreakTimes]},\r\n            DressingRooms: [...place_source.DressingRooms],\r\n            Areas: [...place_source.Areas],\r\n            Price: place_source.Price, // цена за час занятий\r\n            Enabled: place_source.Enabled,\r\n            Access: {...this.copyAccess(place_source.Access)},\r\n        }\r\n    }\r\n\r\n    static copyCollect = (collect_source) => {\r\n        \r\n        if (collect_source == undefined || Object.keys(collect_source).length === 0) \r\n            return undefined\r\n\r\n        return {\r\n            Id: collect_source.Id,\r\n            Place: this.copyPlace(collect_source.Place),\r\n            Date: collect_source.Date,\r\n            Hour: collect_source.Hour,\r\n            Minute: collect_source.Minute,\r\n            DurationMinutes: collect_source.DurationMinutes,\r\n            Price: collect_source.Price, // цена за весь период\r\n            Options: [...collect_source.Options],\r\n            FixedByMemberPrice: collect_source.FixedByMemberPrice,\r\n            /*\r\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\r\n\r\n            */\r\n        UsersGroups: [...collect_source.UsersGroups.map(uGroup => {\r\n            return {\r\n                Id: uGroup.Id,\r\n                Amplua: {...this.copyAmplua(uGroup.Amplua)},\r\n                NumberOf: uGroup.NumberOf,  // количество участников \r\n                Access: {...this.copyAccess(uGroup.Access)}, // доступ на \r\n                Players: [...(uGroup.Players && uGroup.Players.length ? uGroup.Players.map(user => \r\n                    {\r\n                        return {User: {...this.copyUser(user.User)}, Payment: {}}\r\n                    }): \r\n                [{}])],\r\n                Price: uGroup.Price,\r\n                OrganizatorIsMember: uGroup.OrganizatorIsMember,\r\n            }\r\n        })],\r\n            UsersInvited: [\r\n                ...collect_source.UsersInvited.map(uInvited => {\r\n                    \r\n                    return {\r\n                        Id: uInvited.Id,\r\n                        ToBe: {...this.copyAmplua(uInvited.ToBe)}, \r\n                        User: {...this.copyUser(uInvited.User)},\r\n                    }\r\n                })\r\n            ],\r\n            UsersWantsToParticipate: [\r\n                ...collect_source.UsersWantsToParticipate.map(uWP => {\r\n                    \r\n                    return {\r\n                        \r\n                        Id: uWP.Id,\r\n                        ToBe: {...this.copyAmplua(uWP.ToBe)}, \r\n                        User: {...this.copyUser(uWP.User)},\r\n                    }\r\n                })\r\n            ],\r\n            Access: { ...this.copyAccess(collect_source.Access) },\r\n            Permanent: collect_source.Permanent,\r\n            OrganizatorIsMember: collect_source.OrganizatorIsMember,\r\n            AcceptedByPlaceOwner: collect_source.AcceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \r\n            Organizer: {...this.copyUser(collect_source.Organizer)}\r\n        }\r\n    }\r\n\r\n}","import {ampluaTypes, users} from './constants/commonConstants'\r\nimport { setActiveMenuItem } from \"./mainMenuReducer\";\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\nconst SYSTEM_PUSH_TO_HISTORY = \"SYSTEM_PUSH_TO_HISTORY\";\r\nconst SYSTEM_POP_FROM_HISTORY = \"SYSTEM_POP_FROM_HISTORY\";\r\nconst SYSTEM_SET_GLOBAL_POPOUT = \"SYSTEM_SET_GLOBAL_POPOUT\";\r\nconst SYSTEM_SET_ERROR_MESSAGE = \"SYSTEM_SET_ERROR_MESSAGE\";\r\nconst SYSTEM_RESET_ERROR = \"SYSTEM_RESET_ERROR\";\r\nconst SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB = \"SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB\";\r\n\r\n\r\nconst initState = {\r\n    currentMenu: {},\r\n    history: [\"hot\"],\r\n    GlobalPopout: false,\r\n    ErrorObject: {resultcode: 0, result: \"Ok\", data: null, message: \"\"},\r\n    ShowAdminTourneyTab: false,\r\n    ShowAdminTeamTab: true,\r\n\r\n     // level \r\n\r\n}\r\n\r\n\r\nexport let systemReducer = (state = initState, action) => \r\n{\r\n    \r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        case SYSTEM_PUSH_TO_HISTORY: {\r\n            return {...state,\r\n                history: [...state.history, action.item]\r\n            };\r\n        }\r\n        case SYSTEM_SET_GLOBAL_POPOUT: {\r\n            return {...state,\r\n                GlobalPopout: action.on,\r\n            };\r\n        }\r\n        case SYSTEM_SET_ERROR_MESSAGE: {\r\n            return {...state,\r\n                ErrorObject: {...action.errorObject},\r\n            };\r\n        }\r\n        case SYSTEM_RESET_ERROR: {\r\n            return {...state,\r\n                ErrorObject: {...initState.ErrorObject},\r\n            };\r\n        }\r\n        case SYSTEM_POP_FROM_HISTORY: {\r\n            \r\n            return {...state,\r\n                history: state.history.length > 1 ? [...state.history.slice(0, state.history.length-1)] : [...state.history]\r\n            };\r\n        }\r\n        case SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB: {\r\n            \r\n            return {...state,\r\n                ShowAdminTourneyTab: action.showAdminTourneyTab\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\nexport const pushToHistory = (val) => {\r\n    return {\r\n        type: SYSTEM_PUSH_TO_HISTORY,\r\n        item: val\r\n    }\r\n}\r\n\r\nexport const setShowAdminTourneyTab = (val) => {\r\n    return {\r\n        type: SYSTEM_SET_SHOW_ADMIN_TOURNEY_TAB,\r\n        showAdminTourneyTab: val\r\n    }\r\n}\r\n\r\nexport const popFromHistory = (val) => {\r\n    return {\r\n        type: SYSTEM_POP_FROM_HISTORY,\r\n        item: val\r\n    }\r\n}\r\n\r\nexport const setGlobalPopout = (on) => {\r\n    return {\r\n        type: SYSTEM_SET_GLOBAL_POPOUT,\r\n        on\r\n    }\r\n}\r\n\r\nexport const setErrorMessage = (errorObject) => {\r\n    return {\r\n        type: SYSTEM_SET_ERROR_MESSAGE,\r\n        errorObject\r\n    }\r\n}\r\n\r\nexport const resetError = () => {\r\n    return {\r\n        type: SYSTEM_RESET_ERROR\r\n    }\r\n}\r\n\r\n// export const setLastFromHistoryMenuItem = (val) => {\r\n//     return {\r\n//         type: POP_FROM_HISTORY,\r\n//         item: val\r\n//     }\r\n// }\r\n\r\nexport const goToPanel = (nextPanel, back) => {\r\n    return (dispatch, getState) => {\r\n        \r\n        if (back){\r\n            let preLast = getState().system.history.length > 1 ? getState().system.history[getState().system.history.length - 2] : (getState().system.history.length == 1 && getState().system.history[0]);\r\n            dispatch(setActiveMenuItem(preLast));\r\n            dispatch(popFromHistory(nextPanel));\r\n        }\r\n        else{\r\n            dispatch(pushToHistory(nextPanel));\r\n            dispatch(setActiveMenuItem(nextPanel));\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default systemReducer;","import Axios from 'axios'\r\n\r\n//export const backserver = \"https://oblakosporta-alexsmi.1gb.ru\";\r\n//export const backserver = \"https://testhhide.alexsmirnovpro.ru\";\r\nexport const backserver = \"https://oblakosporta.ru\";\r\n//export const backserver = \"https://localhost:44325\";\r\nexport const URL = backserver + \"/umbraco/api/\";\r\nexport const authQueryString = window.location.search;\r\n\r\n\r\nexport\tconst PostJsonInstance = Axios.create(\r\n\t\t{\r\n\t\t\tbaseURL: URL,\r\n\t\t\ttimeout: 15000,\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-Type\": \"application/json\"}\r\n\t\t}\r\n\t)","import { PostJsonInstance, authQueryString } from './server';\r\n\r\nexport let errorObj = (text) => {\r\n    return { resultcode: 1, result: \"Error\", data: null, message: text }\r\n}\r\n\r\nexport let okObj = (dat) => {\r\n    return { resultcode: 0, result: \"Ok\", data: dat, message: \"\" }\r\n}\r\n\r\n\r\n// export let ApiSendInfo =\r\n// {\r\n//     settings: {timeout: 10, }, // настройки. timeout - таймаут актуальности запроса, после истечения времени, запрос удаляется\r\n//     requests: [/* {name: \"PlaceAPIgetAll\", time: new Date()} */], \r\n//     system: {},\r\n//     addRequest: function(name){\r\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\r\n//         if (requestInQueue && requestInQueue.length > 0){\r\n//             return false;\r\n//         }\r\n//         let currentDT = new Date();\r\n//         this.requests.push({name, time: currentDT});\r\n//         return {name, time: currentDT};\r\n//     },\r\n//     checkRequest: function(name){\r\n//         let requestInQueue = this_.requests.filter(req => req.name == name);\r\n//         if (requestInQueue && requestInQueue.length > 0){\r\n//             return true;\r\n//         }\r\n//         return false;\r\n//     },\r\n//     check: function(){\r\n//         ////debugger\r\n//         this_.requests = this_.requests ? this_.requests.map(req => {\r\n//             let now = new Date();\r\n//             if ((req.time - now).getSeconds() < this_.settings.timeout){\r\n//                 return req;\r\n//             }\r\n//         }) : []\r\n//     },\r\n// }\r\n\r\n//export const ApiTimer = setInterval(ApiSendInfo.check, 1000);\r\n\r\nexport const CityAPI = {\r\n    // запрос всех мест\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"City/GetAllFromAreas\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n}\r\n\r\nexport const PlaceAPI = {\r\n\r\n    // запрос всех мест\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"Places/GetPlaces\" + authQueryString, formData).then(data => {\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    // запрос всех мест города по Id города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInCityByCityUmbracoId(cityId, startindex = 0) {\r\n        //////debugger\r\n        //if (!ApiSendInfo.checkRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\")){\r\n        //ApiSendInfo.addRequest(\"PlaceAPIgetAllInCityByCityUmbracoId\");\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityId);\r\n        return PostJsonInstance.post(\"Places/getAllInCityByCityUmbracoId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n        //}\r\n    },\r\n\r\n\r\n\r\n    // запрос места по его Id\r\n    // placeId - Id места\r\n    getById(placeId) {\r\n        let formData = new FormData();\r\n        formData.append(\"placeid\", placeId);\r\n        return PostJsonInstance.post(\"Places/GetPlaceById\" + authQueryString, formData).then(data => {\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n\r\n}\r\n\r\nexport const CollectAPI = {\r\n\r\n    getAll() {\r\n        return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // запрос всех сборов в месте по его Id\r\n    // placeId - Id места\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInPlaceByPlaceId(placeId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"placeid\", placeId);\r\n\r\n        return PostJsonInstance.post(\"Collects/GetAllInPlace\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // запрос всех сборов в городе по его Id\r\n    // cityId - Id города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAllInCityByCityId(cityId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityid\", cityId);\r\n        return PostJsonInstance.post(\"Collects/GetAllInCityByCityId\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    add(collect_source) {\r\n        ////debugger\r\n\r\n        let collect = {\r\n            'Id': collect_source.id,\r\n            'Place': collect_source.place,\r\n            'WhenDate': collect_source.date,\r\n            'Hour': collect_source.hour,\r\n            'Minute': collect_source.minute,\r\n            'DurationMinutes': collect_source.durationMinutes,\r\n            'Price': collect_source.price, // цена за весь период\r\n            'Options': [...collect_source.options],\r\n            'FixedByMemberPrice': collect_source.fixedByMemberPrice,\r\n            /*\r\n            описание доступа. выкладывается список доступных ролей на сборе. они описаны в usersGroups\r\n \r\n            */\r\n            'UsersGroups': [...collect_source.usersGroups.map(uGroup => {\r\n                return {\r\n                    'Id': uGroup.id,\r\n                    'Amplua': { ...uGroup.amplua },\r\n                    'NumberOf': uGroup.numberOf,  // количество участников \r\n                    'Access': { ...uGroup.access }, // доступ на \r\n                    'Players': [...(uGroup.players && uGroup.players.length ? uGroup.players.map(user => {\r\n                        return { 'User': { ...user.user }, payment: {} }\r\n                    }) :\r\n                        [{}])],\r\n                    'Price': uGroup.price,\r\n                    'OrganizatorIsMember': uGroup.organizatorIsMember,\r\n                }\r\n            })],\r\n            'UsersInvited': [\r\n                ...collect_source.usersInvited.map(uInvited => {\r\n\r\n                    return {\r\n                        'Id': uInvited.id,\r\n                        'ToBe': { ...uInvited.toBe },\r\n                        'User': { ...uInvited.user },\r\n                    }\r\n                })\r\n            ],\r\n            'UsersWantsToParticipate': [\r\n                ...collect_source.usersWantsToParticipate.map(uWP => {\r\n\r\n                    return {\r\n\r\n                        'Id': uWP.id,\r\n                        'ToBe': { ...uWP.toBe },\r\n                        'User': { ...uWP.user },\r\n                    }\r\n                })\r\n            ],\r\n            'Access': collect_source.access.id,\r\n            'Permanent': collect_source.permanent,\r\n            'OrganizatorIsMember': collect_source.organizatorIsMember,\r\n            // 'AcceptedByPlaceOwner': collect_source.acceptedByPlaceOwner, // сбор подтвержден арендодателем и занесен в расписание. на это время больше нельзя бронировать. \r\n            'Organizer': { ...collect_source.organizer }\r\n        }\r\n        return PostJsonInstance.post(\"Collects/Add2\" + authQueryString, JSON.stringify({ ...collect }))\r\n        //return PostJsonInstance.post(\"Collects/Add\" + authQueryString, JSON.stringify({...collect}))\r\n        //.then(x => \r\n        //     {\r\n        //     \tconsole.log(collect);\r\n        //     \tconsole.log(\"Collects/Add: \" + x);\r\n        //     }).catch(y => {\r\n        //     \tconsole.log(collect);\r\n        //     \tconsole.log(\"error Collects/Add: \" + y);\r\n        //     })\r\n    }\r\n}\r\n\r\nexport const TeamAPI = {\r\n\r\n    // getAll() {\r\n    //     return PostJsonInstance.post(\"Collects/GetAll\").then(data => {\r\n    //         return okObj(data.data);\r\n    //     })\r\n    //         .catch(error => {\r\n    //             return errorObj(error)\r\n    //         })\r\n    // },\r\n\r\n    // запрос всех сборов в месте по его Id\r\n    // placeId - Id места\r\n    // startindex - индекс, с которого начинать ответ\r\n    getTeamInfoByTeamId(teamId) {\r\n        let formData = new FormData();\r\n        formData.append(\"teamid\", teamId);\r\n\r\n        return PostJsonInstance.post(\"SimpleTeam/GetById\" + authQueryString, formData).then(data => {\r\n            //debugger\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport const ProfileAPI = {\r\n    // запрос информации о пользователе\r\n    getUserProfile(vkUserData) {\r\n\r\n        return PostJsonInstance.post(\"Account/GetUserProfile\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // авторизация пользователя (авторегистрация в случае, если такой пользователь отсутствует в базе)\r\n    getAuthInfo_old(formData) {\r\n        return PostJsonInstance.post(\"Account/Auth\" + authQueryString, formData).then(data => {\r\n            return okObj(data.data);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // регистрация/обновление даты рождения + получение данных о профиле\r\n    getAuthInfo(vkUser) {\r\n\r\n        let [day, month, year] = vkUser.bdate.split('.');\r\n        let bDate = new Date(Date.UTC(year ? +year : 1, month ? (+month - 1) : 1, day ? day : 1, 0, 0, 0));\r\n\r\n        let vkUserData = {\r\n            'bdate': bDate,\r\n            'city': { 'id': vkUser.city.id, 'title': vkUser.city.title },\r\n            'country': { 'id': vkUser.country.id, 'title': vkUser.country.title },\r\n            'first_name': vkUser.first_name,\r\n            'id': vkUser.id,\r\n            'last_name': vkUser.last_name,\r\n            'photo_100': vkUser.photo_100,\r\n            'photo_200': vkUser.photo_200,\r\n            'photo_max_orig': vkUser.photo_max_orig,\r\n            'sex': vkUser.sex,\r\n            'timezone': vkUser.timezone,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"Account/Register\" + authQueryString, JSON.stringify({ ...vkUserData })).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // изменение города привязки пользователя\r\n    setUserProfileCity(userData) {\r\n        if (userData) {\r\n            return PostJsonInstance.post(\"Account/UpdateUserProfileCity\" + authQueryString, JSON.stringify({ ...userData })).then(data => {\r\n\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else {\r\n            return errorObj(\"Внутренняя ошибка, не получены данные от провайдера в API\");\r\n        }\r\n    }\r\n}\r\n\r\nexport const CityTournamentAdminAPI = {\r\n    // запрос всех админов города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // возвращает всех админов города\r\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityUmbracoId);\r\n        return PostJsonInstance.post(\"SimpleCityTournamentAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// запрос групп турнира\r\n    getTournamentGroups(tournament, startindex) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"tournamentId\", tournament.Id);\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTournamentGroups\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    changeTeamTournamentGroup(team, newgroup, oldgroup,  userprofile){\r\n        //debugger\r\n        let teamToSend = {\r\n            Id: team.Id\r\n        }\r\n        let newgroupToSend = {\r\n            Id: newgroup.Id,\r\n            TournamentId: newgroup.TournamentId,\r\n        }\r\n        let oldgroupToSend = {\r\n            Id: oldgroup.Id,\r\n            TournamentId: oldgroup.TournamentId,\r\n        }\r\n//debugger\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/SetTeamTournamentGroup\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \r\n            newGroup: { ...newgroupToSend }, oldGroup: { ...oldgroupToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    \r\n    // возвращает заявки по турниру (для админа турнира)\r\n    getTournamentTeamsByTournament(userprofile, tournament, startindex = 0) {\r\n        ////debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpleTournament/GetTeamsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"adminprofileid\", userProfileId);\r\n        return PostJsonInstance.post(\"SimpleTournament/GetAllByAdminId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    saveTournament(tournament, userprofile) {\r\n        ////debugger\r\n        \r\n\r\n        if (tournament.Id < 0){\r\n            let tournamentToSend = {\r\n                ...tournament,\r\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n                Year: tournament.WhenEnd.year,\r\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTournament/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                ////debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    ////debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else{\r\n            let tournamentToSend = {\r\n                ...tournament,\r\n                WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n                WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n                Year: tournament.WhenEnd.year,\r\n                TournamentGroups: [...tournament.TournamentGroups.map(item => {\r\n                    return {\r\n                        Name: item.Name,\r\n                        Id: item.Id != undefined ? item.Id : -1,\r\n                    }\r\n                })],\r\n                CityId: tournament.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTournament/Update\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                ////debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    ////debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n    },\r\n\r\n    /// публикация турнира (или снятие с публикации, если publish=false)\r\n    publishTournament(tournament, userprofile, publish) {\r\n        \r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Published: publish,\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournament/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление турнира (пометка на удаление)\r\n    deleteTournament(tournament, userprofile) {\r\n        ////debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournament/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // удаление команды (отклонение заявки от команды) из турнира\r\n    deleteTeamFromTournamentByTeam(team, tg, userprofile, admintext){\r\n        //debugger\r\n        let teamToSend = {\r\n            Id: team.Id\r\n        }\r\n        let tournamentGroupToSend = {\r\n            Id: tg.Id,\r\n            TournamentId: tg.TournamentId,\r\n        }\r\n//debugger\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeleteTeamFromTournament\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, \r\n            tournamentGroup: { ...tournamentGroupToSend }, userProfile: { ...userprofile }, admintext: admintext })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление группы турнира\r\n    deleteTournamentGroup(tournament, userprofile, tournamentGroupId) {\r\n        ////debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n\r\n        let tournamentGroup = {\r\n            Id: tournamentGroupId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Delete\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n   \r\n    /// добавление группы турнира\r\n    addTournamentGroup(tournament, userprofile, tGroup) {\r\n        ////debugger\r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n\r\n        let tournamentGroup = {\r\n            Id: tGroup.Id,\r\n            Name: tGroup.Name,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTournamentGroup/Add\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile }, tournamentGroup: {...tournamentGroup} })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n\r\n    // AddContact(contact){\r\n    //     ////debugger\r\n    //     //return instace.get('/contacts/getcontacts');\r\n    //     let Contact= contact;\r\n    //     return jsonInstace.post(baseUrl + 'Contacts/New', JSON.stringify({...Contact})).then(x => {\r\n    //         ////debugger\r\n    //         return x.data;\r\n    //     }).catch(y => {\r\n    //         ////debugger\r\n    //         console.log(y)\r\n    //     });\r\n    // },\r\n}\r\n\r\nexport const TeamAdminAPI = {\r\n    // запрос всех админов города\r\n    // startindex - индекс, с которого начинать ответ\r\n    getAll(startindex = 0) {\r\n        //let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAll\" + authQueryString/*, formData*/).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllInCityByCityId(cityUmbracoId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityUmbracoId);\r\n        return PostJsonInstance.post(\"SimpleTeamAdmin/GetAllInCity\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getAllByAdminProfileId(userProfileId, startindex = 0) {\r\n        let formData = new FormData();\r\n        formData.append(\"startindex\", startindex);\r\n        formData.append(\"adminprofileid\", userProfileId);\r\n        return PostJsonInstance.post(\"SimpleTeam/GetAllByAdminId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    saveTeam(team, userprofile) {\r\n        \r\n        if (team.Id < 0){\r\n            let teamToSend = {\r\n                ...team,\r\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n                Year: team.WhenBorn.year,\r\n                CityId: userprofile.CityUmbracoId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTeam/Add\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                ////debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    ////debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n        else{\r\n            let teamToSend = {\r\n                ...team,\r\n                WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n                Year: team.WhenBorn.year,\r\n                CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n            }\r\n\r\n            return PostJsonInstance.post(\"SimpleTeam/Update\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n                ////debugger\r\n                return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n            })\r\n                .catch(error => {\r\n                    ////debugger\r\n                    return errorObj(error)\r\n                })\r\n        }\r\n    },\r\n\r\n    /// публикация турнира (или снятие с публикации, если publish=false)\r\n    publishTournament(tournament, userprofile, publish) {\r\n        \r\n        let tournamentToSend = {\r\n            ...tournament,\r\n            WhenBegin: new Date(tournament.WhenBegin.year, tournament.WhenBegin.month - 1, tournament.WhenBegin.day + 1),\r\n            WhenEnd: new Date(tournament.WhenEnd.year, tournament.WhenEnd.month - 1, tournament.WhenEnd.day + 1),\r\n            Published: publish,\r\n            Year: tournament.WhenEnd.year,\r\n            CityId: userprofile.CityUmbracoId,\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTeam/Publish\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    /// удаление турнира (пометка на удаление)\r\n    deleteTeam(team, userprofile) {\r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n            CityId: team.CityId, // важный момент. пока не загружен с сервера существующий турнир, мы не знаем к какому городу привязка. берем CityUmbracoId из профиля (на сервере в Add это обрабатывается)\r\n        }\r\n        return PostJsonInstance.post(\"SimpleTeam/Delete\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n}\r\n\r\nexport const BidTeamAPI = {\r\n    \r\n    getActualTournaments(userprofile, team, startindex = 0) {\r\n        ////debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetActualTournaments\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    getTeamBidsByTeam(userprofile, team, startindex = 0) {\r\n        ////debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTeam\" + authQueryString, JSON.stringify({ team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    // возвращает заявки по турниру (для админа турнира)\r\n    getTeamBidsByTournament(userprofile, tournament, startindex = 0) {\r\n        ////debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/GetTeamBidsByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n    // согласовывает заявку (для админа турнира)\r\n    acceptTeamToTournamentBid(bid, userprofile, tournament, admintext) {\r\n        ////debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n   //debugger     \r\n        bid.AdminTournamentComment = admintext;\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/AcceptBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    \r\n    // отклоняет заявку (для админа турнира)\r\n    declineTeamToTournamentBid(bid, userprofile, tournament, admintext) {\r\n        ////debugger \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n   //debugger     \r\n        bid.AdminTournamentComment = admintext;\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/DeclineBid\" + authQueryString, JSON.stringify({ bid: {...bid}, tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n\r\n    addBidTeamToTournament(tournamentgroup, userprofile, team, teamName, startindex = 0) {\r\n        ////debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        let bid = {\r\n                    TeamName: (teamName != \"\") ? teamName : team.Name, \r\n                    When: new Date(),\r\n                    TournamentGroupId: tournamentgroup.Id,\r\n                    UserProfileId: userprofile.UserProfileId,\r\n                    TeamId: team.Id,\r\n                    Team: null,\r\n                    Approved: false,\r\n                    UserProfile: null,\r\n                    ErrorMessage: \"\",\r\n                    AdminTournamentComment : \"\",\r\n                    TournamentGroup: null,\r\n                }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Add\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            //debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    delBidTeamToTournament(bid, userprofile, team) {\r\n        ////debugger \r\n        let teamToSend = {\r\n            ...team,\r\n            WhenBorn: new Date(team.WhenBorn.year, team.WhenBorn.month - 1, team.WhenBorn.day + 1),\r\n            Year: team.WhenBorn.year,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Delete\" + authQueryString, JSON.stringify({ bidTeamToTournament: { ...bid }, team: { ...teamToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    /// допуск комады к турниру\r\n    approveBidTeamToTournament(bid, userprofile, tournament, approve, admincomment) {\r\n        ////debugger \r\n        let bidToSend = {...bid,\r\n            AdminTournamentComment: admincomment,\r\n            Approve: approve,\r\n        }\r\n\r\n        return PostJsonInstance.post(\"SimpeBidTeamToTournament/Approve\" + authQueryString, JSON.stringify({ bid: { ...bidToSend }, tournament: { ...tournament }, userProfile: { ...userprofile } })).then(data => {\r\n            ////debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                ////debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n\r\n}\r\n\r\nexport const MatchAPI = {\r\n    addMatch(matchInfo, userprofile, hours, minutes) {\r\n        \r\n        //new Date()\r\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\r\n        return PostJsonInstance.post(\"Match/Add2\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    delMatch(matchInfo, userprofile, hours, minutes) {\r\n        \r\n        //new Date()\r\n        matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\r\n        return PostJsonInstance.post(\"Match/Del\" + authQueryString, JSON.stringify({ match: { ...matchInfo }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                //debugger\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    getAllMatchesByTournament(tournament, userprofile) {\r\n        \r\n        let tournamentToSend = {\r\n            Id: tournament.Id\r\n        }\r\n        //new Date()\r\n        //matchInfo.When = new Date(matchInfo.When.year, matchInfo.When.month - 1, matchInfo.When.day, hours, minutes );\r\n        //return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tourn }, userProfile: { ...userprofile } })).then(data => {\r\n        return PostJsonInstance.post(\"Match/GetByTournament\" + authQueryString, JSON.stringify({ tournament: { ...tournamentToSend }, userProfile: { ...userprofile } })).then(data => {\r\n            \r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    getCurrentMatchesByCity(userProfile) {\r\n        let formData = new FormData();\r\n        formData.append(\"cityumbracoid\", userProfile.CityUmbracoId);\r\n        return PostJsonInstance.post(\"Match/GetByCity\" + authQueryString, formData).then(data => {\r\n            debugger\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n                \r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n\r\n}\r\n\r\nexport const TournamentAPI = {\r\n    getAllTournamentsInCityByCityUmbracoId(cityUmbracoId) {\r\n        \r\n        let formData = new FormData();\r\n        //formData.append(\"startindex\", startindex);\r\n        formData.append(\"cityumbracoid\", cityUmbracoId);\r\n        return PostJsonInstance.post(\"SimpleTournament/GetAllCurrentInCity\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    },\r\n    \r\n    \r\n    getTournamentTablesByTournamentId(tournamentId) {\r\n        \r\n        let formData = new FormData();\r\n        formData.append(\"tournamentId\", tournamentId);\r\n        return PostJsonInstance.post(\"Tables/GetByTournamentId\" + authQueryString, formData).then(data => {\r\n\r\n            return ((data.data.ErrorMessage == \"\") || (data.data.ErrorMessage == undefined) || (data.data.ErrorMessage == null)) ? okObj(data.data) : errorObj(data.data.ErrorMessage);\r\n        })\r\n            .catch(error => {\r\n\r\n                return errorObj(error)\r\n            })\r\n    }\r\n}","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { places } from './constants/commonConstants'\r\nimport { PlaceAPI } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nconst demoPlaces = places;\r\n\r\nconst PLACES_SET_ALL_PLACES = \"PLACES_SET_ALL_PLACES\";\r\nconst PLACES_SET_PLACE_BY_UMBRACO_ID = \"PLACES_SET_PLACE_BY_UMBRACO_ID\";\r\n\r\n\r\n\r\nconst initState = {\r\n    places: [],\r\n}\r\n\r\n\r\nlet placeReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case PLACES_SET_ALL_PLACES: {\r\n            return {\r\n                ...state,\r\n                places: [...action.places],\r\n            };\r\n        }\r\n        case PLACES_SET_PLACE_BY_UMBRACO_ID: {\r\n            return {\r\n                ...state,\r\n                places: [...action.places],\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setPlaces = (places) => {\r\n    return {\r\n        type: PLACES_SET_ALL_PLACES,\r\n        places\r\n    }\r\n}\r\n\r\nexport const setPlace = (placeId, placeData) => {\r\n    return {\r\n        type: PLACES_SET_PLACE_BY_UMBRACO_ID,\r\n        placeId,\r\n        placeData\r\n    }\r\n}\r\n\r\n\r\n// все места\r\nexport const getAllPlaces = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        debugger\r\n                        dispatch(setPlaces(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        debugger\r\n                        dispatch(setPlaces(demoPlaces))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    debugger\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            debugger\r\n            dispatch(setPlaces(demoPlaces))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все места с сервера по UmbracoId города\r\nexport const getAllPlacesInCityByCityId = (cityId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getAllInCityByCityUmbracoId(cityId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        dispatch(setPlaces(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setPlaces(demoPlaces))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setPlaces(demoPlaces))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// место с сервера по Id\r\nexport const getPlaceById = (placeId) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            PlaceAPI.getById(placeId)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0)\r\n                        dispatch(setPlace(placeId, pl.data));\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setGlobalPopout(false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default placeReducer;","import {ampluaTypes, users} from './constants/commonConstants'\r\nimport { ProfileAPI, errorObj } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\r\n\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\nconst PROFILE_SET_VK_PROFILE_INFO = \"PROFILE_SET_VK_PROFILE_INFO\";\r\nconst PROFILE_SET_USER_PROFILE = \"PROFILE_SET_USER_PROFILE\";\r\nconst PROFILE_SET_TRIED_TO_GET_PROFILE = \"PROFILE_SET_TRIED_TO_GET_PROFILE\";\r\n\r\nlet demoUser = users[0];\r\n\r\nconst initState = {\r\n    myProfile: null,\r\n    vkProfile: null,\r\n    triedToGetProfile: false,\r\n\r\n     // level \r\n\r\n}\r\n\r\n\r\nexport let profileReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case PROFILE_SET_VK_PROFILE_INFO: {\r\n            return {...state,\r\n                vkProfile: {...action.user},\r\n            };\r\n        }\r\n        case PROFILE_SET_USER_PROFILE: {\r\n            return {...state,\r\n                myProfile: {...action.user},\r\n            };\r\n        }\r\n        case PROFILE_SET_TRIED_TO_GET_PROFILE: {\r\n            return {...state,\r\n                triedToGetProfile: action.tried,\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setVkProfileInfo = (user) => {\r\n    return {\r\n        type: PROFILE_SET_VK_PROFILE_INFO,\r\n        user\r\n    }\r\n}\r\n\r\nexport const setUserProfile = (user) => {\r\n    return {\r\n        type: PROFILE_SET_USER_PROFILE,\r\n        user\r\n    }\r\n}\r\n\r\nexport const setTriedToGetProfile = (tried) => {\r\n    return {\r\n        type: PROFILE_SET_TRIED_TO_GET_PROFILE,\r\n        tried\r\n    }\r\n}\r\n\r\n\r\n\r\n// получение данных профиля (без авторегистрации)\r\nexport const getUserProfile = (vkUserData) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.getUserProfile(vkUserData)\r\n                .then(pl => {\r\n                    \r\n                    if (pl && pl.data) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setTriedToGetProfile(false));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setTriedToGetProfile(true))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n            //dispatch(setUserProfile(demoUser))\r\n            //dispatch(setTriedToGetProfile(true))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// установка нового города пользователю\r\nexport const setUserProfileCity = (userProfile) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n        debugger\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.setUserProfileCity(userProfile).then()\r\n                .then(pl => {\r\n                    debugger\r\n                    if (pl && pl.data) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\r\n                        //dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// авторизация (со встроенной регистрацией)\r\nexport const getAuthInfo = (vkProfileInfo) => {\r\n    return dispatch => {\r\n        dispatch(setGlobalPopout(true))\r\n        dispatch(resetError())\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            ProfileAPI.getAuthInfo(vkProfileInfo)\r\n                .then(pl => {\r\n                    if (pl) {\r\n                        dispatch(setUserProfile(pl.data));\r\n                        dispatch(setTriedToGetProfile(false));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Ошибка при регистрации\")))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { CityTournamentAdminAPI, BidTeamAPI, TournamentAPI } from './../utils/api/api.js'\r\nimport { cityTournamentAdmins } from './constants/commonConstants'\r\nimport { EmptyTournament } from './constants/commonConstants'\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoCityTournamentAdmins = cityTournamentAdmins;\r\n\r\nconst TOURNAMENT_SET_ALL_TOURNAMENTS = \"TOURNAMENT_SET_ALL_TOURNAMENTS\";\r\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT = \"TOURNAMENT_SET_SELECTED_TOURNAMENT\";\r\nconst TOURNAMENT_SET_TOURNAMENTGROUPS = \"TOURNAMENT_SET_TOURNAMENTGROUPS\";\r\nconst TOURNAMENT_SET_TOURNAMENTTEAMS = \"TOURNAMENT_SET_TOURNAMENTTEAMS\";\r\nconst TOURNAMENT_SET_MYTOURNAMENT = \"TOURNAMENT_SET_MYTOURNAMENT\";\r\nconst TOURNAMENT_DELETE_MYTOURNAMENT = \"TOURNAMENT_DELETE_MYTOURNAMENT\";\r\nconst TOURNAMENT_SET_MODE = \"TOURNAMENT_SET_MODE\";\r\nconst TOURNAMENT_MATCH_LENGTH = \"TOURNAMENT_MATCH_LENGTH\";\r\nconst TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS = \"TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS\";\r\nconst TOURNAMENT_SET_WHEN_BEGIN = \"TOURNAMENT_SET_WHEN_BEGIN\";\r\nconst TOURNAMENT_SET_WHEN_END = \"TOURNAMENT_SET_WHEN_END\";\r\nconst TOURNAMENT_SET_NAME = \"TOURNAMENT_SET_NAME\";\r\nconst TOURNAMENT_SET_DETAILS = \"TOURNAMENT_SET_DETAILS\";\r\nconst TOURNAMENT_SET_REGLAMENT = \"TOURNAMENT_SET_REGLAMENT\";\r\nconst TOURNAMENT_DEL_GROUP_BY_KEY_ID = \"TOURNAMENT_DEL_GROUP_BY_KEY_ID\";\r\nconst TOURNAMENT_DEL_GROUP_BY_ID = \"TOURNAMENT_DEL_GROUP_BY_ID\";\r\nconst TOURNAMENT_ADD_GROUP = \"TOURNAMENT_ADD_GROUP\";\r\nconst TOURNAMENT_SET_GROUP = \"TOURNAMENT_RESET_TOURNAMENT\";\r\nconst TOURNAMENT_RESET_TOURNAMENT = \"TOURNAMENT_SET_GROUP\";\r\nconst TOURNAMENT_PUBLISH = \"TOURNAMENT_PUBLISH\";\r\nconst TOURNAMENT_UNPUBLISH = \"TOURNAMENT_UNPUBLISH\";\r\nconst TOURNAMENT_SET_MY_TOURNAMENTS = \"TOURNAMENT_SET_MY_TOURNAMENTS\";\r\nconst TOURNAMENT_SET_TOURNAMENT_BY_ID = \"TOURNAMENT_SET_TOURNAMENT_BY_ID\";\r\nconst TOURNAMENT_SET_NEW_BIDS = \"TOURNAMENT_SET_NEW_BIDS\";\r\nconst TOURNAMENT_DEL_BID = \"TOURNAMENT_DEL_BID\";\r\nconst TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES = \"TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES\";\r\n\r\nconst currentDate = new Date();\r\nconst emptyTournament = EmptyTournament\r\n\r\nconst initState = {\r\n    tournaments: [], // все турниры\r\n    bidsNew: [], // новые заявки на турниры\r\n    selectedForView: {}, // выбранный турнир для просмотра в пользовательском режиме (а надо ли?)\r\n    selected: emptyTournament, // выбранный для просмотра/создания/редактирования турнир\r\n    selectedTables: [],  // турнирные таблицы выбранного турнира для просмотра пользователями\r\n    myTournaments: [], // те, что я создал\r\n    cityTournamentAdmins: [], // админы текущего города\r\n    mode: \"view\", // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n}\r\n\r\n\r\nlet tournamentReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case TOURNAMENT_SET_ALL_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                tournaments: [...action.tournaments],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MY_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                myTournaments: [...action.myTournaments],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MODE: {\r\n            return {\r\n                ...state,\r\n                mode: action.mode,\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_MYTOURNAMENT: {\r\n            \r\n            return {\r\n                ...state,\r\n                myTournaments: [...state.myTournaments.map(tour => {\r\n                    \r\n                    if (tour.Id == action.mytournament.Id) {{\r\n                        tour = {...action.mytournament};\r\n                    }}\r\n                    return tour;\r\n                })],\r\n            };\r\n        }\r\n        case TOURNAMENT_DELETE_MYTOURNAMENT: {\r\n            \r\n            return {\r\n                ...state,\r\n                myTournaments: [...state.myTournaments.filter(tour => tour.Id != action.mytournament.Id )],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES: {\r\n            \r\n            return {\r\n                ...state,\r\n                selectedTables: [...action.tables],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_SELECTED_TOURNAMENT: {\r\n            let index = -1;\r\n            let max = -1;\r\n            \r\n            \r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined){\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n\r\n\r\n            return {\r\n                ...state,\r\n                selected: {...action.tournament,\r\n                    WhenBegin: {day: new Date(action.tournament.WhenBegin).getDate(), \r\n                        month: new Date(action.tournament.WhenBegin).getMonth()+1, \r\n                        year: new Date(action.tournament.WhenBegin).getFullYear()},\r\n                    WhenEnd: {day: new Date(action.tournament.WhenEnd).getDate(), \r\n                        month: new Date(action.tournament.WhenEnd).getMonth()+1, \r\n                        year: new Date(action.tournament.WhenEnd).getFullYear()},\r\n                    TournamentGroups: [...action.tournament.TournamentGroups.map(item => {\r\n                        return {...item, KeyId: ++max}\r\n                    })]\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_RESET_TOURNAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {...emptyTournament},\r\n            };\r\n        }\r\n        case TOURNAMENT_MATCH_LENGTH: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                MatchLength: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS: {\r\n            return {\r\n                ...state,\r\n                cityTournamentAdmins: [...action.cityTournamentAdmins],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_NEW_BIDS: {\r\n            return {\r\n                ...state,\r\n                bidsNew: [...action.bids],\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_BID: {\r\n            return {\r\n                ...state,\r\n                bidsNew: [...state.bidsNew.filter(x => x.Id != action.bid.Id)],\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_WHEN_BEGIN: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    WhenBegin: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_WHEN_END: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    WhenEnd: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_NAME: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Name: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_REGLAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Reglament: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_DETAILS: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Details: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_PUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Published: true,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_UNPUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    Published: false,\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_ADD_GROUP: {\r\n            let max = -1;\r\n            debugger\r\n            \r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined){\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n\r\n            // if (action.group.Id < 0)\r\n            //     return {\r\n            //         ...state,\r\n            //         selected: {...state.selected, \r\n            //             TournamentGroups: [...state.selected.TournamentGroups, \r\n            //                 {\r\n            //                     KeyId: max + 1,    \r\n            //                     Name: action.group.Name\r\n            //                 }],\r\n            //         },\r\n            //     };\r\n            // else\r\n                return {\r\n                    ...state,\r\n                    selected: {...state.selected, \r\n                        TournamentGroups: [...state.selected.TournamentGroups, \r\n                            {\r\n                                ...action.group,\r\n                                KeyId: max + 1,    \r\n                                Id: action.group.Id,\r\n                                Name: action.group.Name\r\n                            }],\r\n                    },\r\n                };\r\n\r\n        }\r\n        case TOURNAMENT_SET_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.map(item => {\r\n                        if (item.Id == action.groupId)\r\n                        {\r\n                            item.Id = action.groupId;\r\n                            item.KeyId = action.groupId;\r\n                            item.Name = action.groupName;\r\n                        }\r\n                        return item;\r\n                    }),\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_TOURNAMENTGROUPS: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: [...action.groups],\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_SET_TOURNAMENTTEAMS: {\r\n\r\n            let newTGroups = [];\r\n            \r\n\r\n            // clear tournament groups\r\n            state.selected.TournamentGroups.forEach(tg => {\r\n                tg.Teams = [];\r\n            })\r\n\r\n            // заполнение групп\r\n            action.bidsWithTeamsAndGroups.forEach(bid => {\r\n                \r\n                newTGroups = state.selected.TournamentGroups.map(tg => {\r\n                    \r\n                    if (tg.Id == bid.TournamentGroupId)\r\n                    {\r\n                        bid.Team.Name = bid.TeamName;\r\n                        tg.Teams = [...tg.Teams, bid.Team];\r\n                    }\r\n                    return tg;\r\n                })\r\n            });\r\n            \r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: [...newTGroups],\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_GROUP_BY_KEY_ID: {\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.KeyId != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        case TOURNAMENT_DEL_GROUP_BY_ID: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                selected: {...state.selected, \r\n                    TournamentGroups: state.selected.TournamentGroups.filter(item => item.Id != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTournaments = (tournaments) => {\r\n    return {\r\n        type: TOURNAMENT_SET_ALL_TOURNAMENTS,\r\n        tournaments\r\n    }\r\n}\r\n\r\nexport const setTournamentTables = (tables) => {\r\n    return {\r\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT_TABLES,\r\n        tables\r\n    }\r\n}\r\n\r\nexport const setMyTournament = (mytournament) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MYTOURNAMENT,\r\n        mytournament\r\n    }\r\n}\r\n\r\nexport const setSelectedTournament = (tournament) => {\r\n    return {\r\n        type: TOURNAMENT_SET_SELECTED_TOURNAMENT,\r\n        tournament\r\n    }\r\n}\r\n\r\nexport const deleteMyTournament = (mytournament) => {\r\n    return {\r\n        type: TOURNAMENT_DELETE_MYTOURNAMENT,\r\n        mytournament\r\n    }\r\n}\r\n\r\nexport const setMyTournaments = (myTournaments) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MY_TOURNAMENTS,\r\n        myTournaments\r\n    }\r\n}\r\n\r\nexport const tournamentPublish = () => {\r\n    return {\r\n        type: TOURNAMENT_PUBLISH,\r\n    }\r\n}\r\n\r\nexport const tournamentUnpublish = () => {\r\n    return {\r\n        type: TOURNAMENT_UNPUBLISH,\r\n    }\r\n}\r\n\r\nexport const resetTournament = () => {\r\n    return {\r\n        type: TOURNAMENT_RESET_TOURNAMENT\r\n    }\r\n}\r\n\r\nexport const setTournamentWhenBegin = (when) => {\r\n    return {\r\n        type: TOURNAMENT_SET_WHEN_BEGIN,\r\n        when\r\n    }\r\n}\r\n\r\nexport const setTournamentWhenEnd = (when) => {\r\n    return {\r\n        type: TOURNAMENT_SET_WHEN_END,\r\n        when\r\n    }\r\n}\r\n\r\nexport const setTournamentMode = (mode) => {\r\n    return {\r\n        type: TOURNAMENT_SET_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport const setTournamentName = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_NAME,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentMatchLength = (value) => {\r\n    return {\r\n        type: TOURNAMENT_MATCH_LENGTH,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentDetails = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_DETAILS,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentReglament = (value) => {\r\n    return {\r\n        type: TOURNAMENT_SET_REGLAMENT,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTournamentNewBids = (bids) => {\r\n    return {\r\n        type: TOURNAMENT_SET_NEW_BIDS,\r\n        bids\r\n    }\r\n}\r\n\r\nexport const setCityTournamentAdmins = (cityTournamentAdmins) => {\r\n    return {\r\n        type: TOURNAMENT_SET_ALL_CITYTOURNAMENTADMINS,\r\n        cityTournamentAdmins\r\n    }\r\n}\r\n\r\nexport const setSelectedTournamentGroups = (groups) => {\r\n    return {\r\n        type: TOURNAMENT_SET_TOURNAMENTGROUPS,\r\n        groups\r\n    }\r\n}\r\n\r\nexport const setTournamentTeams = (bidsWithTeamsAndGroups) => {\r\n    return {\r\n        type: TOURNAMENT_SET_TOURNAMENTTEAMS,\r\n        bidsWithTeamsAndGroups\r\n    }\r\n}\r\n\r\nexport const delGroupFromTournamentByKeyId = (tournamentId, groupId) => {\r\n    return {\r\n        type: TOURNAMENT_DEL_GROUP_BY_KEY_ID,\r\n        tournamentId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const delGroupFromTournamentById = (tournamentId, groupId) => {\r\n    debugger\r\n    return {\r\n        type: TOURNAMENT_DEL_GROUP_BY_ID,\r\n        tournamentId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const addGroupToTournament = (group) => {\r\n    return {\r\n        type: TOURNAMENT_ADD_GROUP,\r\n        group\r\n    }\r\n}\r\n\r\nexport const editGroupInTournament = (tournamentId, groupId, groupName) => {\r\n    return {\r\n        type: TOURNAMENT_SET_GROUP,\r\n        tournamentId,\r\n        groupId,\r\n        groupName\r\n    }\r\n}\r\n\r\nexport const deleteTournamentBid = (bid) => {\r\n    return {\r\n        type: TOURNAMENT_DEL_BID,\r\n        bid\r\n    }\r\n}\r\n\r\n// перемещение заявки от команды в другую группу по команде\r\nexport const replaceTeam = (team, tOldGoup, tNewGroup) => {\r\n    \r\n} \r\n\r\n// отмена заявки от команды (удаление из турнира) по команде\r\nexport const deleteTeam = (team, tGoup) => {\r\n\r\n}\r\n\r\n// все админы турниров города\r\nexport const getAllCityTournamentAdmins = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    \r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            \r\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все админы города с сервера по Id города\r\nexport const getAllCityTournamentAdminsByCityId = (cityTournamentId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getAllInCityByCityId(cityTournamentId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n                        \r\n                        dispatch(setCityTournamentAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// сохраняет (добавляет) в базу новый турнир\r\nexport const saveSelectedTournament = (tournament = null, userprofile = null) => {\r\n    return dispatch => {\r\n        if (tournament != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.saveTournament(tournament, userprofile)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(resetTournament());\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось сохранить турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось сохранить турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось сохранить турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// опубликовывает турнир\r\nexport const publishTournament = (tournament = null, userprofile = null, publish = false) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.publishTournament(tournament, userprofile, publish)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setMyTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет турнир\r\nexport const deleteTournament = (tournament = null, userprofile = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.deleteTournament(tournament, userprofile)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(deleteMyTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// запрашивает новые заявки в турнир\r\nexport const getTournamentNewBids = (tournament = null, userprofile = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getTeamBidsByTournament(userprofile, tournament)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setTournamentNewBids(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить заявки турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// запрашивает группы и заявленные команды турнира\r\nexport const getTournamentTeams = (tournament = null, userprofile = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.getTournamentTeamsByTournament(userprofile, tournament)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            \r\n                            dispatch(setTournamentTeams(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить группы и команды турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// изменяет группу команды в турнире\r\nexport const changeTournamentTeamBidTournamentGroup = (team = null, newgroup = null, oldgroup = null, userprofile = null) => {\r\n    debugger\r\n    return dispatch => {\r\n        if ((team != null) && (userprofile != null) && (newgroup != null) && (oldgroup != null)) {\r\n            \r\n            if (authQueryString && authQueryString.length > 0)\r\n            \r\n                CityTournamentAdminAPI.changeTeamTournamentGroup(team, newgroup, oldgroup, userprofile)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            \r\n                            dispatch(setTournamentTeams(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось сменить группу\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось сменить группу: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось сменить группу\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось сменить группу, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// запрос групп турнира\r\nexport const getTournamentGroups = (tournament = null) => {\r\n    \r\n    return dispatch => {\r\n        if (tournament != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                           // debugger\r\n                            dispatch(setSelectedTournamentGroups(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Подтверждает заявку в турнир\r\nexport const acceptTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.acceptTeamToTournamentBid(bid, userprofile, tournament, admintext)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            debugger\r\n                            dispatch(deleteTournamentBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Отклоняет заявку в турнир\r\nexport const declineTeamToTournamentBid = (bid = null, tournament = null, userprofile = null, admintext = \"\") => {\r\n    \r\n    return dispatch => {\r\n        if ((tournament != null) && (userprofile != null)  && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.declineTeamToTournamentBid(bid, userprofile, tournament, admintext)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            debugger\r\n                            dispatch(deleteTournamentBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось подтвердить заявку от команды в турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Удаляет команду из турнира\r\nexport const deleteTeamFromTournament = (team = null, tournamentGroup = null, userprofile = null, admintext = \"\") => {\r\n    \r\n    return dispatch => {\r\n        if ((tournamentGroup != null) && (userprofile != null)  && (team != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n                CityTournamentAdminAPI.deleteTeamFromTournamentByTeam(team, tournamentGroup, userprofile, admintext)\r\n                    .then(pl => {\r\n                        if (pl && pl.data) {\r\n                            // изменить полученный турнир в списке\r\n                            debugger\r\n                            dispatch(setTournamentTeams(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить команду из турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить команду из турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить команду из турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет группу турнира\r\nexport const deleteTournamentGroup = (tournament = null, userprofile = null, tournamentGroupId = -1) => {\r\n    debugger\r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0){\r\n                if (tournamentGroupId < 0)\r\n                {\r\n                    debugger\r\n                    dispatch(delGroupFromTournamentById(tournament.Id, tournamentGroupId));\r\n                    dispatch(setGlobalPopout(false))\r\n                }\r\n                else\r\n                {\r\n                    CityTournamentAdminAPI.deleteTournamentGroup(tournament, userprofile, tournamentGroupId)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            debugger\r\n                            dispatch(delGroupFromTournamentById(tournament.Id, pl.data.Id))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// добавляет группу турнира\r\nexport const addTournamentGroup = (tournament = null, userprofile = null, tournamentGroup = null) => {\r\n    debugger\r\n    return dispatch => {\r\n        if ((tournament != null) || (userprofile == null)){\r\n            if (authQueryString && authQueryString.length > 0){\r\n                if (tournament.Id < 0)\r\n                {\r\n                    debugger\r\n                    dispatch(addGroupToTournament(tournamentGroup));\r\n                    dispatch(setGlobalPopout(false))\r\n                }\r\n                else\r\n                {\r\n                    CityTournamentAdminAPI.addTournamentGroup(tournament, userprofile, tournamentGroup)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            debugger\r\n                            dispatch(addGroupToTournament(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить группу турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить группу турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить группу турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// возвращает с сервера все турниры для админа по его UserProfileId\r\nexport const getMyTournaments = (userProfileId = -1) => {\r\n    return dispatch => {\r\n        if (userProfileId != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            \r\n                \r\n                CityTournamentAdminAPI.getAllByAdminProfileId(userProfileId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(setMyTournaments(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            \r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// возвращает с сервера все турниры города для пользователя\r\nexport const getTournamentsByCityId = (cityUmbId = -1) => {\r\n    return dispatch => {\r\n        if (cityUmbId != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            \r\n                \r\n            TournamentAPI.getAllTournamentsInCityByCityUmbracoId(cityUmbId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(setTournaments(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить турниры: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            \r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить турниры\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить турниры, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// возвращает с сервера турнирные таблицы групп/лиг выбранного турнира\r\nexport const getTournamentTablesByTournamentId = (tournamentId = -1) => {\r\n    return dispatch => {\r\n        if (tournamentId != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            \r\n                \r\n            TournamentAPI.getTournamentTablesByTournamentId(tournamentId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n                            \r\n                            dispatch(setTournamentTables(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            \r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить турнирные таблицы, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default tournamentReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { CityTournamentAdminAPI, MatchAPI } from './../utils/api/api.js'\r\nimport { Match } from './constants/commonConstants'\r\nimport { EmptyTournament } from './constants/commonConstants'\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoMatch = Match;\r\n\r\nconst MATCH_SET_ALL_MATCHES = \"MATCH_SET_ALL_MATCHES\";\r\nconst MATCH_SET_HOT_MATCHES = \"MATCH_SET_HOT_MATCHES\";\r\nconst MATCH_SET_ACCESS = \"MATCH_SET_ACCESS\";\r\nconst MATCH_SET_MODE = \"MATCH_SET_MODE\";\r\nconst MATCH_SET_PLAYED = \"MATCH_SET_PLAYED\";\r\nconst MATCH_SET_HOT_PANEL = \"MATCH_SET_HOT_PANEL\";\r\n\r\nDate.prototype.addDays = function(days) {\r\n    var date = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n}\r\n\r\nconst currentDate = new Date();\r\nconst emptyTournament = EmptyTournament\r\n\r\nconst initState = {\r\n    matches: [],\r\n    hot: {\r\n        yesterday: [],\r\n        today: [],\r\n        tomorrow: [],\r\n    },\r\n    hotPanel: \"today\", // \"yesterday\", \"tomorrow\"\r\n    selected: {},\r\n    access: \"user\",\r\n    mode: \"list\", // режим отображения турнира (\"list\" - список, \"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n}\r\n\r\n\r\nlet matchReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case MATCH_SET_ALL_MATCHES: {\r\n            return {\r\n                ...state,\r\n                matches: [...action.matches],\r\n            };\r\n        }\r\n        case MATCH_SET_HOT_MATCHES: {\r\n            \r\n            let date = new Date();\r\n            let today = date.addDays(1).addDays(-1);\r\n            let yesterday = date.addDays(-1);\r\n            let tomorrow_begin = date.addDays(1);\r\n            let tomorrow_end = date.addDays(2);\r\n\r\n            return {\r\n                ...state,\r\n                hot: {\r\n                    yesterday: [...action.matches.filter(match => ((new Date(match.When) >= yesterday) && (new Date(match.When) < today)))],\r\n                    today: [...action.matches.filter(match => ((new Date(match.When) >= today) && (new Date(match.When) < tomorrow_begin)))],\r\n                    tomorrow: [...action.matches.filter(match => ((new Date(match.When) >= tomorrow_begin) && (new Date(match.When) < tomorrow_end)))],\r\n                },\r\n            };\r\n        }\r\n        case MATCH_SET_ACCESS: {\r\n            return {\r\n                ...state,\r\n                access: action.access,\r\n            };\r\n        }\r\n        case MATCH_SET_PLAYED: {\r\n            return {\r\n                ...state,\r\n                access: action.played,\r\n            };\r\n        }\r\n        case MATCH_SET_MODE: {\r\n            return {\r\n                ...state,\r\n                mode: action.mode,\r\n            };\r\n        }\r\n        case MATCH_SET_HOT_PANEL: {\r\n            return {\r\n                ...state,\r\n                hotPanel: action.panelName,\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setAllMatches = (matches) => {\r\n    return {\r\n        type: MATCH_SET_ALL_MATCHES,\r\n        matches\r\n    }\r\n}\r\n\r\nexport const setHotMatches = (matches) => {\r\n    return {\r\n        type: MATCH_SET_HOT_MATCHES,\r\n        matches\r\n    }\r\n}\r\n\r\nexport const setAccess = (access) => {\r\n    return {\r\n        type: MATCH_SET_ACCESS,\r\n        access\r\n    }\r\n}\r\n\r\nexport const setPlayed = (played) => {\r\n    return {\r\n        type: MATCH_SET_PLAYED,\r\n        played\r\n    }\r\n}\r\n\r\nexport const setMode = (mode) => {\r\n    return {\r\n        type: MATCH_SET_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport const setHotPanel = (panelName) => {\r\n    return {\r\n        type: MATCH_SET_HOT_PANEL,\r\n        panelName\r\n    }\r\n}\r\n\r\n\r\n\r\n// все матчи турнира\r\nexport const getAllMatchesByTournament = (tournament = null, userProfile = null, startindex = 0) => {\r\n    return dispatch => {\r\n        if ((tournament != null) && (userProfile != null)) \r\n            {\r\n                if (authQueryString && authQueryString.length > 0)\r\n                MatchAPI.getAllMatchesByTournament(tournament, userProfile)\r\n                        .then(pl => {\r\n                            \r\n                            if (pl && pl.data && pl.data.length > 0) {\r\n                                \r\n                                dispatch(setAllMatches(pl.data));\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n\r\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n\r\n                            dispatch(setErrorMessage(error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                else {\r\n\r\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                }\r\n            }\r\n        \r\n    }\r\n}\r\n\r\n// добавить матч в турнир\r\nexport const addMatchToShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\r\n    return dispatch => {\r\n        if ((match != null) && (userProfile != null)) \r\n            {\r\n                if (authQueryString && authQueryString.length > 0){\r\n                \r\n                    MatchAPI.addMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(setAllMatches(pl.data));\r\n                                dispatch((pl.data));\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n\r\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n\r\n                            dispatch(setErrorMessage(error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                    }\r\n                else {\r\n\r\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                }\r\n            }\r\n        \r\n    }\r\n}\r\n\r\n\r\n// удалить матч из турнира\r\nexport const delMatchFromShedule = (match = null, userProfile = null, hours = 0, minutes = 0) => {\r\n    return dispatch => {\r\n        if ((match != null) && (userProfile != null)) \r\n            {\r\n                if (authQueryString && authQueryString.length > 0){\r\n                \r\n                    MatchAPI.delMatch(match, userProfile, Number(hours) > 21 ? 24-Number(hours) : Number(hours)+3 , minutes)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(setAllMatches(pl.data));\r\n                                dispatch((pl.data));\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n\r\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n\r\n                            dispatch(setErrorMessage(error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                    }\r\n                else {\r\n\r\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                }\r\n            }\r\n        \r\n    }\r\n}\r\n\r\n// возвращает актуальные матчи города\r\nexport const getMatchesInCurrentCity = (userProfile = null) => {\r\n    return dispatch => {\r\n        if (userProfile != null) \r\n            {\r\n                if (authQueryString && authQueryString.length > 0){\r\n                \r\n                    MatchAPI.getCurrentMatchesByCity(userProfile)\r\n                        .then(pl => {\r\n                            debugger\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(setHotMatches(pl.data));\r\n                                dispatch((pl.data));\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n\r\n                                dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n\r\n                            dispatch(setErrorMessage(error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                    }\r\n                else {\r\n\r\n                    dispatch(setCityTournamentAdmins(demoCityTournamentAdmins))\r\n                    dispatch(setGlobalPopout(false))\r\n\r\n                }\r\n            }\r\n        \r\n    }\r\n}\r\n\r\n\r\n\r\n    export default matchReducer;","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { BidTeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\r\nimport { BidTeam } from './constants/commonConstants'\r\nimport { EmptyTournament } from './constants/commonConstants'\r\n\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoBidTeam = BidTeam;\r\n\r\nconst BID_TEAM_SET_TOURNAMENTS = \"BID_TEAM_SET_TOURNAMENTS\";\r\nconst BID_TEAM_SET_MY_BIDS = \"BID_TEAM_SET_MY_BIDS\";\r\nconst BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS = \"BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS\";\r\nconst BID_TEAM_SET_SELECTED_MODE = \"BID_TEAM_SET_SELECTED_MODE\";\r\nconst BID_TEAM_ADD_MY_BID = \"BID_TEAM_ADD_MY_BID\";\r\nconst BID_TEAM_DEL_MY_BID = \"BID_TEAM_DEL_MY_BID\";\r\nconst BID_TEAM_APPROVE_BID = \"BID_TEAM_APPROVE_BID\";\r\n\r\n\r\nconst currentDate = new Date();\r\n\r\nconst emptyBidTeam = BidTeam\r\n\r\nexport const BID_TEAM_SELECT_MODE_TOURNAMENTS = \"tournaments\"\r\nexport const BID_TEAM_SELECT_MODE_GROUPS = \"groups\"\r\nexport const BID_TEAM_MODE_VIEW = \"view\"\r\n\r\nconst initState = {\r\n    tournaments: [], // все турниры\r\n    selected: {...emptyBidTeam}, // выбранная для просмотра/создания/редактирования заявка\r\n    selectedTournament: {...EmptyTournament},\r\n    myBids: [], // те, что я создал\r\n    mode: BID_TEAM_MODE_VIEW, // режим отображения турнира (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n    selectMode: BID_TEAM_SELECT_MODE_TOURNAMENTS // второй вариант - BID_TEAM_SELECT_MODE_GROUPS\r\n}\r\n\r\n\r\nlet bidBidTeamReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case BID_TEAM_SET_TOURNAMENTS: {\r\n            return {\r\n                ...state,\r\n                tournaments: [...action.tournaments],\r\n            };\r\n        }\r\n        case BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS: {\r\n            return {\r\n                ...state,\r\n                selectedTournament: {...state.selectedTournament, \r\n                    TournamentGroups: [...action.groups],\r\n                },\r\n            };\r\n        }\r\n        case BID_TEAM_SET_SELECTED_MODE: {\r\n            return {\r\n                ...state,\r\n                selectMode: action.mode,\r\n            };\r\n        }\r\n        case BID_TEAM_SET_MY_BIDS: {\r\n            return {\r\n                ...state,\r\n                myBids: [...action.bids],\r\n            };\r\n        }\r\n        case BID_TEAM_ADD_MY_BID: {\r\n            //debugger\r\n            return {\r\n                ...state,\r\n                myBids: [...state.myBids, action.bid],\r\n            };\r\n        }\r\n        case BID_TEAM_DEL_MY_BID: {\r\n            //debugger\r\n            return {\r\n                ...state,\r\n                myBids: [...state.myBids.filter(x => x.Id != action.bid.Id)],\r\n            };\r\n        }\r\n        case BID_TEAM_APPROVE_BID: {\r\n            debugger\r\n            return {\r\n                ...state,\r\n                \r\n            };\r\n        }\r\n        \r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTournaments = (tournaments) => {\r\n    return {\r\n        type: BID_TEAM_SET_TOURNAMENTS,\r\n        tournaments\r\n    }\r\n}\r\n\r\nexport const setMyBids = (bids) => {\r\n    return {\r\n        type: BID_TEAM_SET_MY_BIDS,\r\n        bids\r\n    }\r\n}\r\n\r\nexport const approveBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_APPROVE_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const addMyBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_ADD_MY_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const delMyBid = (bid) => {\r\n    return {\r\n        type: BID_TEAM_DEL_MY_BID,\r\n        bid\r\n    }\r\n}\r\n\r\nexport const setBidTeamSelectedTournamentGroups = (groups) => {\r\n    return {\r\n        type: BID_TEAM_SET_SELECTED_TOURNAMENT_GROUPS,\r\n        groups\r\n    }\r\n}\r\n\r\nexport const setBidTeamSelectedMode = (mode) => {\r\n    return {\r\n        type: BID_TEAM_SET_SELECTED_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\n// все админы турниров города\r\nexport const getActualTournamentsInCity = (userprofile = null, team = null) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getActualTournaments(userprofile, team)\r\n                .then(pl => {\r\n                    //debugger\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setTournaments(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n\r\n                        dispatch(setCityBidTeamAdmins(demoBidTeam))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n\r\n            dispatch(setCityBidTeamAdmins(demoBidTeam))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n// запрос групп турнира\r\nexport const getTournamentGroups = (tournament = null) => {\r\n    \r\n    return dispatch => {\r\n        if (tournament != null){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            CityTournamentAdminAPI.getTournamentGroups(tournament)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                           // debugger\r\n                            dispatch(setBidTeamSelectedTournamentGroups(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось получить список групп турнира: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось получить список групп турнира\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось получить список групп турнира, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// запрос заявок команды\r\nexport const getTeamBidsByTeam = (userprofile = null, team = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((team != null) && (userprofile != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.getTeamBidsByTeam(userprofile, team)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(setMyBids(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось получить список заявок команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось получить список заявок команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось получить список заявок команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// добавление заявки от команды\r\nexport const addBidTeamToTournamentGroup = (tournamentgroup = null, userprofile = null, team = null , teamName = \"\",) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.addBidTeamToTournament(tournamentgroup, userprofile, team, teamName)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(addMyBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось добавить заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось добавить заявку команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось добавить заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаление заявки от команды\r\nexport const cancelBidTeamToTournamentGroup = (bid = null, userprofile = null, team = null) => {\r\n    \r\n    return dispatch => {\r\n        if ((team != null) && (userprofile != null) && (bid != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.delBidTeamToTournament(bid, userprofile, team)\r\n            .then(pl => {\r\n                        \r\n                if ((pl) && (pl.data) && (pl.data.Deleted)) {\r\n                            dispatch(delMyBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n                    else {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить заявку команды\"))\r\n                        dispatch(setGlobalPopout(false))\r\n                        \r\n                    }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n\r\n// согласование/отмена заявки от команды\r\nexport const approveBidTeamToTournament = (bid = null, userprofile = null, tournament = null, approve = false , comment = \"\",) => {\r\n    \r\n    return dispatch => {\r\n        if ((tournamentgroup != null) && (userprofile != null) && (team != null)){\r\n            if (authQueryString && authQueryString.length > 0)\r\n            BidTeamAPI.approveBidTeamToTournament(bid, userprofile, tournament, approve, comment)\r\n                    .then(pl => {\r\n                        \r\n                        if (pl) {\r\n                            dispatch(approveBid(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось согласовать заявку команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось согласовать заявку команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось согласовать заявку команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default bidBidTeamReducer;","import { ProfileAPI, CityAPI, errorObj } from './../utils/api/api.js'\r\nimport { authQueryString } from './../utils/api/server';\r\nimport { setGlobalPopout, setErrorMessage, resetError } from \"./systemReducer\";\r\nimport { setUserProfile } from \"./profileReducer\";\r\n\r\nconst CITY_GET_ALL_FROM_SERVER = \"CITY_GET_ALL_FROM_SERVER\";\r\n\r\n\r\nconst initState = {\r\n    cities: [],\r\n}\r\n\r\n\r\nlet cityReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case CITY_GET_ALL_FROM_SERVER: {\r\n            return {...state,\r\n                cities: [...action.cities],\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const setCities = (cities) => {\r\n    return {\r\n        type: CITY_GET_ALL_FROM_SERVER,\r\n        cities\r\n    }\r\n}\r\n\r\nexport const getAllCitiesFromServer = () => {\r\n    return dispatch => {\r\n        if (authQueryString && authQueryString.length > 0)\r\n            CityAPI.getAll().then()\r\n                .then(pl => {\r\n                    \r\n                    if (pl && pl.data) {\r\n                        dispatch(setCities(pl.data));\r\n                    }\r\n                    else {\r\n                        dispatch(setErrorMessage(errorObj(\"Не получен ответ от сервера\")))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    \r\n                    dispatch(setErrorMessage(error))\r\n                })\r\n        else {\r\n            \r\n            dispatch(setErrorMessage(errorObj(\"Вы не авторизованы\")))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default cityReducer;","import React from 'react'\r\n\r\nconst ProfilePanel = (props) => {\r\n    return (\r\n        <div>\r\n            Панель Мой Профиль\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfilePanel","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport {pushToHistory, popFromHistory, goToPanel} from '../../../../store/systemReducer'\r\n\r\n\r\n/*\r\nisBack={false} - флаг возврата на предыдущую панель\r\ntoMenuName=\"viewcollect\"  - куда переход (имя из id в View на главной странице в Epic на главной странице (также должно быть в mainMenuReducer в списке менюшек))\r\nitem = {itm} - объект, передаваемый в параметр handleClick\r\nhandleClick = {selectCollect} - функция, выполняемая по клику\r\n*/\r\n\r\n\r\nexport const withHistorySave = (WrappedComponent) => {\r\n    \r\n    const mapStateToProps = state => ({\r\n        history: state.system.history,\r\n    })\r\n    \r\n    const mapDispatchToProps = {\r\n        goToPanel\r\n    }\r\n\r\n    class hocComponent extends React.Component{\r\n        constructor(props){\r\n            super(props);\r\n            this.clickEvent = this.clickEvent.bind(this);\r\n\r\n        }\r\n\r\n        clickEvent(evt){\r\n            \r\n            if (this.props.handleClick != undefined && this.props.item != undefined)\r\n                this.props.handleClick(this.props.item);\r\n            else if (this.props.handleClick != undefined && this.props.item == undefined)\r\n                this.props.handleClick();\r\n            this.props.goToPanel(this.props.toMenuName, this.props.isBack);\r\n        }\r\n\r\n        componentDidUpdate(prevProps, prevState){\r\n            \r\n        }\r\n\r\n\r\n        render(){\r\n            \r\n            return <WrappedComponent onClick={this.clickEvent} {...this.props}></WrappedComponent>\r\n            \r\n        }\r\n    }\r\n\r\n    return connect(mapStateToProps, mapDispatchToProps)(hocComponent)\r\n}\r\n","import React, { Component } from 'react'\r\nimport {PanelHeaderBack } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst BackButton = (props) => {\r\n  \r\n \r\n    return (\r\n        <PanelHeaderBack isBack={true} {...props}></PanelHeaderBack>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(BackButton)","import React, { Component } from 'react'\r\nimport {TabbarItem } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst TabbarItemWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <TabbarItem isBack={false} {...props}></TabbarItem>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(TabbarItemWithHistory)","import React, { useState, useEffect } from 'react';\r\nimport { Group, Header, InfoRow, ModalCard, ModalPage, ModalPageHeader, ModalRoot, SelectMimicry, Textarea, Button, FormLayout, Select, CustomSelectOption, FormItem, FormLayoutGroup, Input } from '@vkontakte/vkui'\r\n\r\n\r\n\r\nlet ModalCommon = (props) => {\r\n    // при первом запуске подгрузить города\r\n    let [selectedYear, setSelectedYear] = useState(\"Не выбран\")\r\n    let [selectedCity, setSelectedCity] = useState(\"Не выбран\")\r\n    let [bidCity, setBidCity] = useState(\"\")\r\n\r\n\tuseEffect(() => {\r\n\t\t// загрузка городов здесь\r\n\t\t\r\n    }, [])\r\n    \r\n\r\n    return (\r\n        <ModalRoot activeModal={props.modalName}>\r\n            <ModalPage id=\"CitySelect\"\r\n                header={\r\n                <ModalPageHeader>\r\n                \r\n              </ModalPageHeader>\r\n            }\r\n          >\r\n                <Group>\r\n                    <InfoRow>\r\n                        Ваш город определен как: {props.data.title}\r\n                    </InfoRow>\r\n                    <Header mode=\"secondary\">Выбрать другой город?</Header>\r\n                    <InfoRow top=\"Город\">            \r\n                        <SelectMimicry placeholder=\"Выбрать город\" />\r\n                    </InfoRow>\r\n                </Group>    \r\n            </ModalPage>\r\n\r\n            <ModalCard\r\n                id=\"Error\"\r\n                onClose={props.Close}\r\n                header={props.data.message ? props.data.message : \"Произошла неизвестная ошибка\"}\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\r\n                    {/* <Textarea defaultValue=\"\" /> */}\r\n            </ModalCard>\r\n\r\n            <ModalCard\r\n                id=\"MyProfile\"\r\n                onClose={props.Close}\r\n                header={props.data.Name ? props.data.Name : \"Имя не прогрузилось\"}\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={props.Close}>Закрыть</Button>}>\r\n                    {/* <Textarea defaultValue=\"\" /> */}\r\n                    {\r\n                        (props.data.Name) ?\r\n                        `Имя: ${props.data.Name} \\r\\n\r\n                        Фамилия: ${props.data.Surname} \\r\\n\r\n                        Дата рождения: ${props.data.Birth} \\r\\n\r\n                        Зарегистрирован: ${props.data.Register} \\r\\n\r\n                        Город: ${props.data.City.Name}\r\n                        ` : \"\"\r\n                    }\r\n            </ModalCard>\r\n            <ModalCard\r\n                id=\"SelectBirth\"\r\n                // onClose={props.Close}\r\n                header=\"Укажите Ваш год рождения\"\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => props.action({...props.data, bdate: props.data.bdate + ((!isNaN(selectedYear)) && (selectedYear > 0) && \".\" + selectedYear)})}>Закрыть</Button>}>\r\n                    <FormLayout>\r\n                        <FormLayoutGroup>\r\n                        <InfoRow header=\"Год рождения не определен\">\r\n                            Год рождения не получилось загрузить из вашего профиля Вконтакте. Укажите реальный год вашего рождения.\r\n                        </InfoRow>\r\n                            <FormItem top=\"Год рождения\">            \r\n                            <Select\r\n                                placeholder=\"Не выбран\" \r\n                                onChange={(e) => {\r\n                                    setSelectedYear(+e.currentTarget.value)\r\n                                    }}\r\n                                options={[...((start, count) => {\r\n                                    \r\n                                        let current = start;\r\n                                        let result = [];\r\n                                        while (current < start + count){\r\n                                            result.push(current);\r\n                                            current += 1;\r\n                                        }\r\n                                        \r\n                                        return result\r\n                                    })(new Date().getFullYear() - 100, 90)\r\n                                ].map(year => ({ label: year, value: year }))}\r\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\r\n                                />\r\n                            </FormItem>\r\n                        </FormLayoutGroup>\r\n                    </FormLayout>\r\n            </ModalCard>\r\n            <ModalCard\r\n                id=\"SelectCity\"\r\n                // onClose={props.Close}\r\n                header=\"Выберите город\"\r\n                actions={<Button size=\"l\" mode=\"primary\" onClick={() => {\r\n                        debugger\r\n                        props.action({...props.data.profile, CityUmbracoId: selectedCity})\r\n                        }\r\n                    }>Закрыть</Button>}>\r\n                    <FormLayout>\r\n                        <FormLayoutGroup>\r\n                            <InfoRow header=\"Город не найден\">\r\n                                Город, указанный в вашем профиле Вконтакте <b style={{color: 'red'}}>{props.data.profile ? props.data.profile.CityName : \"\"}</b> не найден в списке доступных для работы площадки. \r\n                                Выберите из списка ближайший к вам город, в котором вы готовы участвовать в сборах.\r\n                            </InfoRow>\r\n                            <FormItem top=\"Город\">            \r\n                            <Select\r\n                                placeholder=\"Не выбран\" \r\n                                onChange={(e) => {\r\n                                    debugger\r\n                                    setSelectedCity(+e.currentTarget.value)\r\n                                    }}\r\n                                options={props.data.cities && props.data.cities.map(city => {\r\n                                    return { label: city.CityUmbracoName ?? city.CityUmbracoId, value: city.CityUmbracoId }\r\n                                }\r\n                                )}\r\n                                renderOption={({ option, ...restProps }) => <CustomSelectOption {...restProps} />}\r\n                                />\r\n                            </FormItem>\r\n                        </FormLayoutGroup>\r\n                        <InfoRow>или</InfoRow>\r\n                        <FormLayoutGroup>\r\n                            <InfoRow header=\"Укажите название вашего города\">\r\n                                Оставьте заявку администратору на добавление Вашего города в систему\r\n                                (После отправки сказать спасибо и перевести профиль в режим просмотра... Не нужно предлагать другой город, пожалуй)\r\n                            </InfoRow>\r\n                            <Input value={bidCity} onChange={(e) => setBidCity(e.currentTarget.value)} type=\"text\"></Input>\r\n                        </FormLayoutGroup>\r\n                    </FormLayout>\r\n            </ModalCard>\r\n      </ModalRoot>\r\n    )\r\n}\r\n\r\n\r\nexport default ModalCommon","export default __webpack_public_path__ + \"static/media/defaultPlace.563ac777.jpg\";","import React, { Component } from 'react'\r\nimport { RichCell } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst RichCellWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <RichCell isBack={false} {...props}></RichCell>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(RichCellWithHistory)","import React, { Component } from 'react'\r\nimport {TabbarItem } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\nimport { Icon24ChevronRight } from '@vkontakte/icons';\r\n\r\nconst Icon24ChevronRightWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <Icon24ChevronRight isBack={false} {...props}></Icon24ChevronRight>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(Icon24ChevronRightWithHistory)","import {timeSlotsInOneHour} from '../../store/constants/commonConstants'\r\n\r\nexport function isDate(str) {\r\n    return (Object.prototype.toString.call(new Date(str)) === \"[object Date]\");\r\n  }\r\n\r\nexport const getAge = (date) => {\r\n    if (date != undefined) \r\n        return Math.trunc((Date.now() - date.getTime()) / 31536000000);\r\n    else\r\n        return 0;\r\n    \r\n}\r\n\r\nexport const timeToString = (hours, minutes, seconds) => {\r\n    \r\n    let h = ((hours != undefined) ? (hours < 10? \"0\" + hours.toString(): hours.toString()) : \"\");\r\n    let m = ((minutes != undefined) ? (minutes < 10? \"0\" + minutes.toString(): minutes.toString()) : \"\");\r\n    let s = ((seconds != undefined) ? (seconds < 10 ? \"0\" + seconds.toString(): seconds.toString()) : \"\");\r\n    let res = \"\";\r\n\r\n    if (h.length > 0 && m.length > 0 && s.length > 0)\r\n        res = h + \":\" + m + \":\" + s;\r\n    else if (h.length > 0 && m.length > 0 && s.length == 0)\r\n        res = h + \":\" + m;\r\n    else if (h.length > 0 && m.length == 0 && s.length == 0)\r\n        res = h;\r\n    else if (h.length == 0 && m.length > 0 && s.length > 0)\r\n        res = m + \":\" + s;\r\n    else if (h.length == 0 && m.length == 0 && s.length > 0)\r\n        res = s;\r\n    else if (h.length == 0 && m.length > 0 && s.length == 0)\r\n        res = m;\r\n    else if (h.length > 0 && m.length == 0 && s.length > 0)\r\n        res = h + \":\" + s;\r\n    else\r\n        res = \"\";\r\n    return res;\r\n}\r\n\r\nexport const dateToString = (date, ...args) => {\r\n    if (typeof date == \"string\")\r\n        date = new Date(date);\r\n\r\n    let newDate = date;\r\n    let dateOptions = {\r\n        // era: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        weekday: 'long',\r\n        // timezone: 'UTC',\r\n        // hour: 'numeric',\r\n        // minute: 'numeric',\r\n        // second: 'numeric'\r\n    };\r\n\r\n    if (args[0])\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\r\n\r\n    if (args[1])\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\r\n\r\n    if (args[2])\r\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\r\n\r\n    return newDate.toLocaleString(\"ru\", dateOptions)\r\n}\r\n\r\n// прибавляет к дате переданное в параметрах количество дней, месяцев, лет. первый параметр -дни, второй- месяцы и т.д.\r\nexport const addToDate = (date, ...args) => {\r\n        \r\n    if (typeof date == \"string\")\r\n        date = new Date(date);\r\n    \r\n    let newDate = date;\r\n    \r\n    if (args[0]) // добавить дни\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth(), newDate.getDate() + args[0])\r\n\r\n    if (args[1]) // добавить месяцы\r\n        newDate = new Date(newDate.getFullYear(), newDate.getMonth() + args[1], newDate.getDate())\r\n\r\n    if (args[2]) // добавить годы\r\n        newDate = new Date(newDate.getFullYear() + args[2], newDate.getMonth(), newDate.getDate())\r\n\r\n    return newDate;\r\n}\r\n\r\n// сравнение двух дат только по дате без времени. true - равны, false- не равны\r\nexport const datesWithoutTimeIsSame = (date1, date2) => {\r\n    return (date1.getFullYear() == date2.getFullYear() && date1.getMonth() == date2.getMonth() && date1.getDate() == date2.getDate())\r\n}\r\n\r\n// hours - количество часов в дне (по умолчанию 24 часа в сутках), slotsInHours - количество слотов под сбор в часу. по умолчанию 2 (каждые 30 минут)\r\nexport const timeSlotsForCollects = (hours=24, slotsInHour=timeSlotsInOneHour()) => {\r\n    let slotsNumber = hours * slotsInHour;  // сколько слотов в дне\r\n    let oneSlotMinutes = 60 / slotsInHour;  // сколько минут один слот\r\n    let slots = [] // слоты\r\n    \r\n    for (let i = 0; i < slotsNumber; i++){\r\n        slots.push({Hours: Math.trunc(i / slotsInHour), Minutes: Math.round((i / slotsInHour - Math.trunc(i / slotsInHour)) * 60), SlotMinutes: oneSlotMinutes})\r\n    }\r\n    \r\n    return slots\r\n}","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport TournamentListItem from './TournamentListItem'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\r\n\r\n\r\n\r\n\r\nconst TournamentAdminList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n        \r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        let date = new Date(item.WhenBegin);\r\n                        return (\r\n                            <RichCell\r\n                                multiline\r\n                                actions={\r\n                                    <>\r\n                                    {!item.Published ? \r\n                                    <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\r\n                                    : \r\n                                    <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>}\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</Button>\r\n                                    </>\r\n                                    }\r\n                                caption={date && `Начало: ${dateToString(date)}`}\r\n                                after={<Icon24ChevronRightWithHistory\r\n                                handleClick={() => props.CellClick(item)} \r\n                                    toMenuName=\"tournamentitem\" \r\n                                    data-story=\"tournamentitem\"></Icon24ChevronRightWithHistory>\r\n                                }\r\n                                text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\r\n                            >\r\n                                {item.Name}\r\n                            </RichCell>\r\n                        )\r\n                    })\r\n                    : <InfoRow>Нет турниров</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default TournamentAdminList","import React, { Component } from 'react'\r\nimport {Button, PanelHeaderBack } from '@vkontakte/vkui'\r\nimport { withHistorySave } from '../HOCs/withHistorySave'\r\n\r\nconst ButtonWithHistory = (props) => {\r\n  \r\n \r\n    return (\r\n        <Button isBack={false} {...props}></Button>\r\n        \r\n    )\r\n}\r\n\r\nexport default withHistorySave(ButtonWithHistory)","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TournamentAdminList from './TournamentAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\n\r\n\r\nconst TournamentAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTournament = (tour, publish) => {\r\n        \r\n        props.publishTournament(tour, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTournament = (tour) => {\r\n        props.deleteTournament(tour, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        props.setSelectedTournament(item);\r\n        props.setTournamentMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        props.resetTournament();\r\n        props.setTournamentMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTournaments(props.myProfile.UserProfileId);\r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <Header>Мои турниры</Header>\r\n                <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"tournamentitem\" data-story=\"tournamentitem\">Создать турнир</ButtonWithHistory>\r\n                <TournamentAdminList \r\n                    CellClick={CellClick}\r\n                    Button1Handle = {PublishTournament}\r\n                    Button2Handle = {DeleteTournament}\r\n                    List={props.tournament.myTournaments}\r\n                >\r\n                    \r\n                </TournamentAdminList>\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(TournamentAdminPanel);","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\n\r\n\r\n\r\nconst TeamAdminList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n        \r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        let date = new Date(item.WhenBorn);\r\n                        return (\r\n                            <RichCell\r\n                                multiline\r\n                                actions={\r\n                                    <>\r\n                                    {/* {!item.Published ? \r\n                                    <Button onClick={() => props.Button1Handle(item, true)}>Опубликовать</Button>\r\n                                    : \r\n                                    <Button onClick={() => props.Button1Handle(item, false)} mode=\"secondary\">Снять с публикации</Button>} */}\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\">Удалить</Button>\r\n                                    </>\r\n                                    }\r\n                                // caption={date && `Основана: ${dateToString(date)}`}\r\n                                after={\r\n                                    <Icon24ChevronRightWithHistory\r\n                                        handleClick={() => props.CellClick(item)} \r\n                                        toMenuName=\"teamitem\" \r\n                                        data-story=\"teamitem\"\r\n                                    >\r\n\r\n                                    </Icon24ChevronRightWithHistory>\r\n                                }\r\n                                // text={item.Published ? \"Опубликован\" : \"Не опубликован\"}\r\n                            >\r\n                                {item.Name}\r\n                            </RichCell>\r\n                        )\r\n                    })\r\n                    : <InfoRow>Нет команд</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default TeamAdminList","import { setGlobalPopout, setErrorMessage } from \"./systemReducer\";\r\nimport { TeamAdminAPI, TeamAPI, CityTournamentAdminAPI } from './../utils/api/api.js'\r\nimport { TeamAdmins } from './constants/commonConstants'\r\n\r\nimport { authQueryString } from './../utils/api/server';\r\n\r\nlet demoCityTeamAdmins = TeamAdmins;\r\n\r\nconst TEAM_SET_ALL_TEAMS = \"TEAM_SET_ALL_TEAMS\";\r\nconst TEAM_SET_SELECTED_TEAM = \"TEAM_SET_SELECTED_TEAM\";\r\nconst TEAM_SET_MYTEAM = \"TEAM_SET_MYTEAM\";\r\nconst TEAM_ADD_MYTEAM = \"TEAM_ADD_MYTEAM\";\r\nconst TEAM_DELETE_MYTEAM = \"TEAM_DELETE_MYTEAM\";\r\nconst TEAM_SET_MODE = \"TEAM_SET_MODE\";\r\nconst TEAM_SET_ALL_CITYTEAMADMINS = \"TEAM_SET_ALL_CITYTEAMADMINS\";\r\nconst TEAM_SET_WHEN_BORN = \"TEAM_SET_WHEN_BORN\";\r\nconst TEAM_SET_NAME = \"TEAM_SET_NAME\";\r\nconst TEAM_SET_DETAILS = \"TEAM_SET_DETAILS\";\r\nconst TEAM_SET_REGLAMENT = \"TEAM_SET_REGLAMENT\";\r\nconst TEAM_DEL_GROUP = \"TEAM_DEL_GROUP\";\r\nconst TEAM_ADD_GROUP = \"TEAM_ADD_GROUP\";\r\nconst TEAM_SET_GROUP = \"TEAM_RESET_TEAM\";\r\nconst TEAM_RESET_TEAM = \"TEAM_SET_GROUP\";\r\nconst TEAM_PUBLISH = \"TEAM_PUBLISH\";\r\nconst TEAM_UNPUBLISH = \"TEAM_UNPUBLISH\";\r\nconst TEAM_SET_MY_TEAMS = \"TEAM_SET_MY_TEAMS\";\r\nconst TEAM_SET_TEAM_BY_ID = \"TEAM_SET_TEAM_BY_ID\";\r\n\r\nconst currentDate = new Date();\r\n\r\nconst emptyTeam = {\r\n    Id: -1,\r\n    Name: \"\",\r\n    Year: 0,\r\n    WhenBorn: { day: currentDate.getDay(), month: currentDate.getMonth() + 1, year: currentDate.getFullYear() },\r\n    Details: \"\",\r\n    Logo: \"\",\r\n    CityId: -1,\r\n    TournamentGroups: [],\r\n    Admins: [],\r\n    Matches: [],\r\n    Players: [],\r\n    Published: false,\r\n    Deleted: false,\r\n}\r\n\r\nconst initState = {\r\n    teams: [], // все турниры\r\n    selected: emptyTeam, // выбранный для просмотра/создания/редактирования турнир\r\n    myTeams: [], // те, что я создал\r\n    cityTeamAdmins: [], // админы текущего города\r\n    mode: \"view\", // режим отображения команды (\"view\" - просмотр, \"add\" - добавление, \"edit\" - редактирование)\r\n}\r\n\r\n\r\nlet teamReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case TEAM_SET_ALL_TEAMS: {\r\n            return {\r\n                ...state,\r\n                teams: [...action.teams],\r\n            };\r\n        }\r\n        case TEAM_SET_MY_TEAMS: {\r\n           // debugger\r\n            return {\r\n                ...state,\r\n                myTeams: [...action.myTeams],\r\n            };\r\n        }\r\n        case TEAM_SET_MODE: {\r\n            return {\r\n                ...state,\r\n                mode: action.mode,\r\n            };\r\n        }\r\n        case TEAM_ADD_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams, { ...action.myteam }]\r\n            };\r\n        }\r\n        case TEAM_SET_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams.map(tour => {\r\n\r\n                    if (tour.Id == action.myteam.Id) {\r\n                        {\r\n                            tour = { ...action.myteam, };\r\n                        }\r\n                    }\r\n                    return tour;\r\n                })],\r\n            };\r\n        }\r\n        case TEAM_DELETE_MYTEAM: {\r\n\r\n            return {\r\n                ...state,\r\n                myTeams: [...state.myTeams.filter(tour => tour.Id != action.myteam.Id)],\r\n            };\r\n        }\r\n        case TEAM_SET_SELECTED_TEAM: {\r\n            let maxT = -1, maxA = -1, maxM = -1, maxP = -1;\r\n            debugger\r\n\r\n\r\n            state.selected.TournamentGroups.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxT)\r\n                        maxT = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Admins.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxA)\r\n                        maxA = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Matches.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxM)\r\n                        maxM = item.KeyId;\r\n                }\r\n            });\r\n            state.selected.Players.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > maxP)\r\n                        maxP = item.KeyId;\r\n                }\r\n            });\r\n\r\n\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...action.team,\r\n                    WhenBorn: {\r\n                        day: new Date(action.team.WhenBorn).getDate(),\r\n                        month: new Date(action.team.WhenBorn).getMonth() + 1,\r\n                        year: new Date(action.team.WhenBorn).getFullYear()\r\n                    },\r\n                    TournamentGroups: [...action.team.TournamentGroups.map(item => {\r\n                        return { ...item, KeyId: ++maxT }\r\n                    })],\r\n                    Admins: [...action.team.Admins.map(item => {\r\n                        return { ...item, KeyId: ++maxA }\r\n                    })],\r\n                    Matches: [...action.team.Matches.map(item => {\r\n                        return { ...item, KeyId: ++maxM }\r\n                    })],\r\n                    Players: [...action.team.Players.map(item => {\r\n                        return { ...item, KeyId: ++maxP }\r\n                    })],\r\n                },\r\n            };\r\n        }\r\n        case TEAM_RESET_TEAM: {\r\n            return {\r\n                ...state,\r\n                selected: { ...emptyTeam },\r\n            };\r\n        }\r\n        case TEAM_SET_ALL_CITYTEAMADMINS: {\r\n            return {\r\n                ...state,\r\n                cityTeamAdmins: [...action.cityTeamAdmins],\r\n            };\r\n        }\r\n        case TEAM_SET_WHEN_BORN: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    WhenBorn: action.when,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_NAME: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Name: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_REGLAMENT: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Reglament: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_DETAILS: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Details: action.value,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_PUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Published: true,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_UNPUBLISH: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    Published: false,\r\n                },\r\n            };\r\n        }\r\n        case TEAM_ADD_GROUP: {\r\n            let max = -1;\r\n            state.selected.TeamGroups.forEach(item => {\r\n                if (item.KeyId != undefined) {\r\n                    if (item.KeyId > max)\r\n                        max = item.KeyId;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: [...state.selected.TeamGroups,\r\n                    {\r\n                        KeyId: max + 1,\r\n                        Name: action.groupName\r\n                    }],\r\n                },\r\n            };\r\n        }\r\n        case TEAM_SET_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: state.selected.TeamGroups.map(item => {\r\n                        if (item.Id == action.groupId) {\r\n                            item.Id = action.groupId;\r\n                            item.KeyId = action.groupId;\r\n                            item.Name = action.groupName;\r\n                        }\r\n                        return item;\r\n                    }),\r\n                },\r\n            };\r\n        }\r\n        case TEAM_DEL_GROUP: {\r\n            return {\r\n                ...state,\r\n                selected: {\r\n                    ...state.selected,\r\n                    TeamGroups: state.selected.TeamGroups.filter(item => item.KeyId != action.groupId),\r\n                },\r\n            };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const setTeams = (teams) => {\r\n    return {\r\n        type: TEAM_SET_ALL_TEAMS,\r\n        teams\r\n    }\r\n}\r\n\r\nexport const setMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_SET_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const addMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_ADD_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const setSelectedTeam = (team) => {\r\n    debugger\r\n    return {\r\n        type: TEAM_SET_SELECTED_TEAM,\r\n        team\r\n    }\r\n}\r\n\r\nexport const deleteMyTeam = (myteam) => {\r\n    return {\r\n        type: TEAM_DELETE_MYTEAM,\r\n        myteam\r\n    }\r\n}\r\n\r\nexport const setMyTeams = (myTeams) => {\r\n    return {\r\n        type: TEAM_SET_MY_TEAMS,\r\n        myTeams\r\n    }\r\n}\r\n\r\nexport const teamPublish = () => {\r\n    return {\r\n        type: TEAM_PUBLISH,\r\n    }\r\n}\r\n\r\nexport const teamUnpublish = () => {\r\n    return {\r\n        type: TEAM_UNPUBLISH,\r\n    }\r\n}\r\n\r\nexport const resetTeam = () => {\r\n    return {\r\n        type: TEAM_RESET_TEAM\r\n    }\r\n}\r\n\r\nexport const setTeamWhenBorn = (when) => {\r\n    return {\r\n        type: TEAM_SET_WHEN_BORN,\r\n        when\r\n    }\r\n}\r\n\r\n\r\nexport const setTeamMode = (mode) => {\r\n    return {\r\n        type: TEAM_SET_MODE,\r\n        mode\r\n    }\r\n}\r\n\r\nexport const setTeamName = (value) => {\r\n    return {\r\n        type: TEAM_SET_NAME,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTeamDetails = (value) => {\r\n    return {\r\n        type: TEAM_SET_DETAILS,\r\n        value\r\n    }\r\n}\r\n\r\nexport const setTeamReglament = (value) => {\r\n    return {\r\n        type: TEAM_SET_REGLAMENT,\r\n        value\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setCityTeamAdmins = (cityTeamAdmins) => {\r\n    return {\r\n        type: TEAM_SET_ALL_CITYTEAMADMINS,\r\n        cityTeamAdmins\r\n    }\r\n}\r\n\r\nexport const delGroupFromTeam = (teamId, groupId) => {\r\n    return {\r\n        type: TEAM_DEL_GROUP,\r\n        teamId,\r\n        groupId\r\n    }\r\n}\r\n\r\nexport const addGroupToTeam = (teamId, groupName) => {\r\n    return {\r\n        type: TEAM_ADD_GROUP,\r\n        teamId,\r\n        groupName\r\n    }\r\n}\r\n\r\nexport const editGroupInTeam = (teamId, groupId, groupName) => {\r\n    return {\r\n        type: TEAM_SET_GROUP,\r\n        teamId,\r\n        groupId,\r\n        groupName\r\n    }\r\n}\r\n\r\n\r\n// все админы турниров города\r\nexport const getAllCityTeamAdmins = (startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        dispatch(setGlobalPopout(true))\r\n        if (authQueryString && authQueryString.length > 0)\r\n            TeamAdminAPI.getAll(startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setCityTeamAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n\r\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n\r\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// все админы города с сервера по Id города\r\nexport const getAllCityTeamAdminsByCityId = (cityTeamId, startindex = 0) => {\r\n    return dispatch => {\r\n\r\n        if (authQueryString && authQueryString.length > 0)\r\n            TeamAdminAPI.getAllInCityByCityId(cityTeamId, startindex)\r\n                .then(pl => {\r\n                    if (pl && pl.data.length > 0) {\r\n\r\n                        dispatch(setCityTeamAdmins(pl.data));\r\n                        dispatch(setGlobalPopout(false))\r\n                    }\r\n                    else {\r\n                        dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n                        dispatch(setGlobalPopout(false))\r\n\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch(setErrorMessage(error))\r\n                    dispatch(setGlobalPopout(false))\r\n                })\r\n        else {\r\n            dispatch(setCityTeamAdmins(demoCityTeamAdmins))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// сохраняет (добавляет) в базу новую команду\r\nexport const saveSelectedTeam = (team = null, userprofile = null) => {\r\n    return dispatch => {\r\n        if (team != null) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n            {\r\n                if (team.Id < 0) // добавление\r\n                {\r\n                    TeamAdminAPI.saveTeam(team, userprofile)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(addMyTeam(pl.data));\r\n                                dispatch(resetTeam());\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                }\r\n                else{ // изменение\r\n                    TeamAdminAPI.saveTeam(team, userprofile)\r\n                        .then(pl => {\r\n                            if (pl && pl.data.length > 0) {\r\n                                dispatch(setMyTeam(pl.data));\r\n                                dispatch(resetTeam());\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                            else {\r\n                                dispatch(setErrorMessage(\"Не удалось сохранить команду\"))\r\n                                dispatch(setGlobalPopout(false))\r\n                            }\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch(setErrorMessage(\"Не удалось сохранить команду: \" + error))\r\n                            dispatch(setGlobalPopout(false))\r\n                        })\r\n                }\r\n            }\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось сохранить команду: не удалось авторизоваться\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось сохранить команду, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// опубликовывает турнир\r\nexport const publishTeam = (team = null, userprofile = null, publish = false) => {\r\n\r\n    return dispatch => {\r\n        if ((team != null) || (userprofile == null)) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n                TeamAdminAPI.publishTeam(team, userprofile, publish)\r\n                    .then(pl => {\r\n\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(setMyTeam(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось опубликовать турнир: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось опубликовать турнир\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось опубликовать турнир, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// удаляет команду\r\nexport const deleteTeam = (team = null, userprofile = null) => {\r\n\r\n    return dispatch => {\r\n        if ((team != null) || (userprofile == null)) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n                TeamAdminAPI.deleteTeam(team, userprofile)\r\n                    .then(pl => {\r\n                        if (pl) {\r\n                            // изменить полученный турнир в списке\r\n                            dispatch(deleteMyTeam(pl.data))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось удалить команду\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось удалить команду: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось удалить команду\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось удалить команду, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// возвращает с сервера все турниры для админа по его UserProfileId\r\nexport const getMyTeams = (userProfileId = -1) => {\r\n    return dispatch => {\r\n        if (userProfileId != null) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n\r\n\r\n                TeamAdminAPI.getAllByAdminProfileId(userProfileId)\r\n                    .then(pl => {\r\n                        if (pl && pl.data.length > 0) {\r\n\r\n                            dispatch(setMyTeams(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить команды: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить команды\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить команды, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// возвращает с сервера все турниры для админа по его UserProfileId\r\nexport const getTeamInfo = (team = null) => {\r\n    return dispatch => {\r\n        if (team != null) {\r\n            if (authQueryString && authQueryString.length > 0)\r\n\r\n\r\n            TeamAPI.getTeamInfoByTeamId(team.Id)\r\n                    .then(pl => {\r\n                        debugger\r\n                        if (pl && pl.data) {\r\n                            debugger\r\n                            dispatch(setSelectedTeam(pl.data));\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                        else {\r\n                            dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\r\n                            dispatch(setGlobalPopout(false))\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(setErrorMessage(\"Не удалось загрузить команду: \" + error))\r\n                        dispatch(setGlobalPopout(false))\r\n                    })\r\n\r\n            else {\r\n                dispatch(setErrorMessage(\"Не удалось загрузить команду\"))\r\n                dispatch(setGlobalPopout(false))\r\n\r\n            }\r\n        }\r\n        else {\r\n            dispatch(setErrorMessage(\"Не удалось загрузить команду, в функцию передан null\"))\r\n            dispatch(setGlobalPopout(false))\r\n\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default teamReducer;","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TeamAdminList from './TeamAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\n\r\n\r\nconst TeamAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTeam = (team, publish) => {\r\n        \r\n        props.publishTeam(team, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTeam = (team) => {\r\n        props.deleteTeam(team, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        props.setSelectedTeam(item);\r\n        props.setTeamMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        props.resetTeam();\r\n        props.setTeamMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTeams(props.myProfile.UserProfileId);\r\n        \r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <Header>Мои команды</Header>\r\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\r\n                <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать команду</ButtonWithHistory>\r\n                <TeamAdminList \r\n                    CellClick={CellClick}\r\n                    Button1Handle = {PublishTeam}\r\n                    Button2Handle = {DeleteTeam}\r\n                    List={props.team.myTeams}\r\n                >\r\n                    \r\n                </TeamAdminList>\r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n        team: state.teamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(TeamAdminPanel);","import React from 'react'\r\nimport { Cell } from '@vkontakte/vkui'\r\n\r\n\r\n\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n            <Cell key={props.KeyId != -1 ? props.KeyId : null} \r\n            removable \r\n            onRemove={() => props.Delete(props.KeyId)}\r\n            >\r\n                {props.Name}\r\n            </Cell>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ListItem","import React, {useState} from 'react'\r\nimport { Button, CellButton, Input, RichCell } from '@vkontakte/vkui'\r\n\r\n\r\n\r\n\r\nconst BidListItem = (props) => {\r\n\r\n    let [adminText, setAdminText] = useState(\"\");\r\n\r\n\r\n    return (\r\n            <RichCell key={props.KeyId != -1 ? props.KeyId : null} \r\n            actions={\r\n                <>\r\n                    <Button mode=\"primary\" onClick={() => props.Accept(props.Item)}>Принять</Button>\r\n                    <Input value={adminText} onChange={(e) => setAdminText(e.currentTarget.value)} placeholder=\"Причина отклонения заявки\"></Input>\r\n                    <Button mode=\"destructive\" onClick={() => props.Decline(props.Item, adminText)}>Отклонить</Button>\r\n                </>\r\n            }\r\n            text={`Хотят выступать под именем ${props.Item.TeamName} в ${props.Item.TournamentGroup.Name} группе/лиге`}\r\n            caption={`Заявку отправил ${props.Item.UserProfile.Surname} ${props.Item.UserProfile.Name}`}\r\n            >\r\n                Команда {props.Item.Team.Name}\r\n            </RichCell>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default BidListItem","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div } from '@vkontakte/vkui'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getTournamentTeams,\r\n} from '../../../../store/tournamentsReducer'\r\nimport {\r\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\r\n} from '../../../../store/matchReducer'\r\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\r\n\r\n\r\n// const SheduleContainer = (props) => {\r\n\r\n\r\n\r\n//     return <Shedule props={...props}></Shedule>\r\n// }\r\n\r\n\r\nconst Shedule = (props) => {\r\n\r\n    useEffect(() => {\r\n\r\n        props.getAllMatchesByTournament(props.tournaments.selected, props.myProfile)\r\n    }, props.tournaments.selected)\r\n\r\n    let isAdminMode = props.mode == \"admin\" ? true : false;\r\n    let tournament = props.tournament;\r\n    let today = props.todayIs;\r\n\r\n    // создание объектов для заполнения выпадающих списков (count - сколько элементов, makeZeroBefore - дописывать ли нули впереди к цифрам от 0 до 9)\r\n    let optMaker = (count, makeZeroBefore = true) => {\r\n        let m = [];\r\n        for (let i = 0; i < count; i++)\r\n            m = [...m, { value: i, label: ((i <= 9) && (makeZeroBefore)) ? \"0\" + i : i }]\r\n        return m\r\n    }\r\n\r\n    let groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\r\n    //debugger\r\n    let places = props.places\r\n        .map(p => p.Name.length ? p : null)\r\n        .filter(p => p)\r\n        .map(p => { return { value: p.PlaceId, label: p.Name, title: p.Name } });\r\n    let teams = [{ value: 0, label: \"Не выбрано\" }]\r\n    let hours = [...optMaker(24)];\r\n    let minutes = [...optMaker(60)];\r\n    let teamGoals = [...optMaker(99, false)];\r\n\r\n    const [selectedTournamentGroup, setSelectedTournamentGroup] = React.useState((groups && Array.isArray(groups) && groups.length > 0) ? groups[0] : null);\r\n\r\n    const [selectedTournamentGroupTeamList, setSelectedTournamentGroupTeamList] = React.useState(teams);\r\n\r\n    const [selectedTeam1, setSelectedTeam1] = React.useState(0);\r\n    const [selectedTeam2, setSelectedTeam2] = React.useState(0);\r\n    const [selectedTeam1Goals, setTeam1Goals] = React.useState(0);\r\n    const [selectedTeam2Goals, setTeam2Goals] = React.useState(0);\r\n    const [selectedPlace, setSelectedPlace] = React.useState(0);\r\n    const [selectedId, setSelectedId] = React.useState(0);\r\n    const [selectedPlayed, setSelectedPlayed] = React.useState(false);\r\n    const [selectedDate, setSelectedDate] = React.useState({ day: new Date().getDate(), month: new Date().getMonth() + 1, year: new Date().getFullYear() });\r\n    const [selectedHour, setSelectedHour] = React.useState([hours[0].value]);\r\n    const [selectedMinute, setSelectedMinute] = React.useState(minutes[0].value);\r\n\r\n    let getGroup = (groupId) => {\r\n        return tournament.TournamentGroups.find(x => x.Id == groupId);\r\n    }\r\n\r\n    let changeGroup = (league_id) => {\r\n        setSelectedTournamentGroup(league_id);\r\n        setSelectedTournamentGroupTeamList(getGroup(league_id).Teams.map(team => { return { value: team.Id, label: team.Name } }));\r\n    }\r\n\r\n    let allMatchesInAllGroups = []\r\n    props.tournaments.selected.TournamentGroups.forEach(tg => {\r\n\r\n        allMatchesInAllGroups.push({\r\n            TournamentGroup: { ...tg },\r\n            Matches: [...props.matches.filter(m => m.TournamentGroup.Id == tg.Id)]\r\n        })\r\n    })\r\n\r\n    let addMatch = (editId) => {\r\n\r\n        let match = (editId >= 0) ?\r\n            {\r\n                Id: editId,\r\n                When: selectedDate,\r\n                TournamentGroupId: selectedTournamentGroup,\r\n                PlaceId: selectedPlace,\r\n                Team1Id: selectedTeam1,\r\n                Team2Id: selectedTeam2,\r\n                BidTeamToTournamentId1: -1,\r\n                BidTeamToTournamentId2: -1,\r\n                Team1Goals: selectedTeam1Goals,\r\n                Team2Goals: selectedTeam2Goals,\r\n                Played: selectedPlayed,\r\n            } :\r\n            {\r\n                When: selectedDate,\r\n                TournamentGroupId: selectedTournamentGroup,\r\n                PlaceId: selectedPlace,\r\n                Team1Id: selectedTeam1,\r\n                Team2Id: selectedTeam2,\r\n                BidTeamToTournamentId1: -1,\r\n                BidTeamToTournamentId2: -1,\r\n                Team1Goals: selectedTeam1Goals,\r\n                Team2Goals: selectedTeam2Goals,\r\n                Played: selectedPlayed,\r\n            };\r\n\r\n        props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\r\n    }\r\n\r\n\r\n    let delCurrentMatch = () => {\r\n\r\n        let match = {\r\n            When: selectedDate,\r\n            Id: selectedId,\r\n            TournamentGroupId: selectedTournamentGroup,\r\n            // TournamentGroup: {\r\n            //     Id: selectedTournamentGroup,\r\n            //     Tournament: {...props.tournaments.selected}\r\n            // },\r\n            PlaceId: selectedPlace,\r\n            Team1Id: selectedTeam1,\r\n            Team2Id: selectedTeam2,\r\n            Played: selectedPlayed,\r\n        }\r\n\r\n        props.delMatchFromShedule(match, props.myProfile, selectedHour, selectedMinute)\r\n        //props.addMatchToShedule(match, props.myProfile, selectedHour, selectedMinute);\r\n    }\r\n\r\n    let goToEditMatch = (match) => {\r\n        debugger\r\n\r\n        groups = tournament.TournamentGroups.map(g => { return { value: g.Id, label: g.Name } })\r\n        //debugger\r\n        places = props.places\r\n            .map(p => p.Name.length ? p : null)\r\n            .filter(p => p)\r\n            .map(p => { return { value: p.PlaceId, label: p.Name, title: p.Name } });\r\n        teams = [{ value: 0, label: \"Не выбрано\" }]\r\n        hours = [...optMaker(24)];\r\n        minutes = [...optMaker(60)];\r\n        teamGoals = [...optMaker(99, false)];\r\n\r\n        let date = new Date(match.When);\r\n\r\n\r\n        setSelectedTournamentGroupTeamList(getGroup(match.TournamentGroupId).Teams.map(team => { return { value: team.Id, label: team.Name } }));\r\n        setSelectedTournamentGroup(match.TournamentGroupId);\r\n        setSelectedId(match.Id);\r\n        setTeam1Goals(match.Team1Goals);\r\n        setTeam2Goals(match.Team2Goals);\r\n        setSelectedTeam1(match.Team1.Id)\r\n        setSelectedTeam2(match.Team2.Id)\r\n        setSelectedPlace(match.PlaceId)\r\n        setSelectedPlayed(match.Played)\r\n        setSelectedDate({ day: date.getDate(), month: date.getMonth() + 1, year: date.getFullYear() })\r\n        setSelectedHour(date.getHours())\r\n        setSelectedMinute(date.getMinutes())\r\n\r\n        props.setMode(\"edit\")\r\n    }\r\n\r\n\r\n    // выводим список существующего расписания с кнопками редактирования, удаления, переноса\r\n    // группируем список по датам, сортируем от последних к первым (последние выше)\r\n    // сделать кнопку сортировки\\\r\n\r\n    switch (props.access) {\r\n        case \"admin\": {\r\n            switch (props.mode) {\r\n                case \"list\": {\r\n                    return (\r\n                        <Group>\r\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\r\n                            <List>\r\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\r\n\r\n                                    return <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\r\n                                        {groupAndMatchesItem.Matches.length > 0 ?\r\n                                            <List>\r\n                                                {groupAndMatchesItem.Matches.map(match => {\r\n                                                    let place = props.places.find(p => p.PlaceId == match.PlaceId)\r\n                                                    let date = new Date(match.When);\r\n                                                    return <RichCell\r\n                                                        caption={place.Name}\r\n                                                        text={\r\n                                                            match.Played ?\r\n                                                                <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\r\n                                                                <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\r\n                                                        }\r\n                                                        onClick={() => goToEditMatch(match)}\r\n                                                    >\r\n                                                        {match.Played ?\r\n                                                            `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\r\n                                                            `${match.Team1.Name} - ${match.Team2.Name}`\r\n                                                        }\r\n                                                    </RichCell>\r\n                                                })}\r\n                                            </List>\r\n                                            :\r\n                                            <SimpleCell>Нет расписания в группе</SimpleCell>\r\n                                        }\r\n                                    </Group>\r\n                                }\r\n                                )}\r\n                            </List>\r\n                            <CellButton onClick={() => props.setMode(\"add\")}>Добавить</CellButton>\r\n                        </Group>\r\n                    )\r\n                }; break;\r\n                case \"view\": {\r\n                    return (\r\n                        <Group>\r\n                            <Button>Назад</Button>\r\n                        </Group>\r\n                    )\r\n                }; break;\r\n                case \"add\": {\r\n                    return (\r\n                        <Group>\r\n                            <FormItem top=\"Группа/лига\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={groups}\r\n                                    value={selectedTournamentGroup}\r\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Команда 1\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={selectedTournamentGroupTeamList}\r\n                                    value={selectedTeam1}\r\n                                    onChange={(option) => {\r\n                                        setSelectedTeam1(option.currentTarget.value)\r\n                                    }}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Команда 2\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={selectedTournamentGroupTeamList}\r\n                                    value={selectedTeam2}\r\n                                    onChange={(option) => {\r\n                                        setSelectedTeam2(option.currentTarget.value)\r\n                                    }}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Дата\">\r\n                                <DatePicker\r\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\r\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\r\n                                    defaultValue={selectedDate}\r\n                                    onDateChange={(value) => setSelectedDate(value)}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Время\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n\r\n                                    options={hours}\r\n                                    value={selectedHour}\r\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n\r\n                                    options={minutes}\r\n                                    value={selectedMinute}\r\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Счёт\">\r\n                                <Div>Команда 1</Div>\r\n                                <CustomSelect\r\n                                    placeholder=\"0\"\r\n                                    title=\"Команда 1\"\r\n                                    options={teamGoals}\r\n                                    value={selectedTeam1Goals}\r\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <Div>Команда 2</Div>\r\n                                <CustomSelect\r\n                                    placeholder=\"0\"\r\n                                    title=\"Команда 2\"\r\n                                    options={teamGoals}\r\n                                    value={selectedTeam2Goals}\r\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Место\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={places}\r\n                                    value={selectedPlace}\r\n                                    onChange={(option) =>\r\n                                        //changePlace(option.currentTarget.value)\r\n                                        setSelectedPlace(option.currentTarget.value)\r\n                                    }\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Матч сыгран\">\r\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\r\n                            </FormItem>\r\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\r\n                            <Button onClick={() => addMatch(-1)}>Добавить</Button>\r\n                        </Group>\r\n                    )\r\n                }; break;\r\n                case \"edit\": {\r\n                    return (\r\n                        <Group>\r\n                            <FormItem top=\"Группа/лига\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={groups}\r\n                                    value={selectedTournamentGroup}\r\n                                    onChange={(option) => changeGroup(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Команда 1\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={selectedTournamentGroupTeamList}\r\n                                    value={selectedTeam1}\r\n                                    onChange={(option) => {\r\n                                        setSelectedTeam1(option.currentTarget.value)\r\n                                    }}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Команда 2\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={selectedTournamentGroupTeamList}\r\n                                    value={selectedTeam2}\r\n                                    onChange={(option) => {\r\n                                        setSelectedTeam2(option.currentTarget.value)\r\n                                    }}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Дата\">\r\n                                <DatePicker\r\n                                    min={{ day: 1, month: 1, year: new Date().getFullYear() - 1 }}\r\n                                    max={{ day: 1, month: 1, year: new Date().getFullYear() + 1 }}\r\n                                    defaultValue={selectedDate}\r\n                                    onDateChange={(value) => setSelectedDate(value)}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Время\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n\r\n                                    options={hours}\r\n                                    value={selectedHour}\r\n                                    onChange={(option) => setSelectedHour(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n\r\n                                    options={minutes}\r\n                                    value={selectedMinute}\r\n                                    onChange={(option) => setSelectedMinute(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Счёт\">\r\n                                <Div>Команда 1</Div>\r\n                                <CustomSelect\r\n                                    placeholder=\"0\"\r\n                                    title=\"Команда 1\"\r\n                                    options={teamGoals}\r\n                                    value={selectedTeam1Goals}\r\n                                    onChange={(option) => setTeam1Goals(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                                <Div>Команда 2</Div>\r\n                                <CustomSelect\r\n                                    placeholder=\"0\"\r\n                                    title=\"Команда 2\"\r\n                                    options={teamGoals}\r\n                                    value={selectedTeam2Goals}\r\n                                    onChange={(option) => setTeam2Goals(option.currentTarget.value)}\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n\r\n                            <FormItem top=\"Место\">\r\n                                <CustomSelect\r\n                                    placeholder=\"Не выбрано\"\r\n                                    options={places}\r\n                                    value={selectedPlace}\r\n                                    onChange={(option) =>\r\n                                        //changePlace(option.currentTarget.value)\r\n                                        setSelectedPlace(option.currentTarget.value)\r\n                                    }\r\n                                    renderOption={({ ...otherProps }) => {\r\n                                        return (\r\n                                            <CustomSelectOption\r\n                                                {...otherProps}\r\n                                            />\r\n                                        );\r\n                                    }}\r\n                                />\r\n                            </FormItem>\r\n                            <FormItem top=\"Матч сыгран\">\r\n                                <Checkbox checked={selectedPlayed} onChange={() => setSelectedPlayed(!selectedPlayed)}>Сыгран</Checkbox>\r\n                            </FormItem>\r\n                            <Button onClick={() => props.setMode(\"list\")}>Отмена</Button>\r\n                            <Button onClick={() => addMatch(selectedId)}>Сохранить</Button>\r\n                            <Button onClick={() => delCurrentMatch()} align=\"right\" mode=\"destructive\">Удалить</Button>\r\n                        </Group>\r\n                    )\r\n                }; break;\r\n            }\r\n        }; break;\r\n        case \"user\": {\r\n            switch (props.mode) {\r\n                case \"list\": {\r\n                    return (\r\n                        <Group>\r\n                            <List>\r\n                                {allMatchesInAllGroups.map(groupAndMatchesItem => {\r\n\r\n                                    return (\r\n                                        <Group header={<Header mode=\"secondary\">{groupAndMatchesItem.TournamentGroup.Name}</Header>}>\r\n                                            {\r\n                                                groupAndMatchesItem.Matches.length > 0\r\n                                                    ?\r\n                                                    <List>\r\n                                                        {groupAndMatchesItem.Matches.map(match => {\r\n                                                            let place = props.places.find(p => p.PlaceId == match.PlaceId)\r\n                                                            let date = new Date(match.When);\r\n                                                            return <RichCell\r\n                                                                caption={place.Name}\r\n                                                                text={\r\n                                                                    match.Played ?\r\n                                                                        <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\r\n                                                                        <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\r\n                                                                }\r\n                                                            >\r\n                                                                {match.Played ?\r\n                                                                    `${match.Team1.Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2.Name}` :\r\n                                                                    `${match.Team1.Name} - ${match.Team2.Name}`\r\n                                                                }\r\n                                                            </RichCell>\r\n                                                        })}\r\n                                                    </List>\r\n                                                    :\r\n                                                    <SimpleCell>Нет расписания в группе</SimpleCell>\r\n                                            }\r\n                                        </Group>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </List>\r\n                        </Group>\r\n                    )\r\n                }; break;\r\n                case \"view\": { }; break;\r\n                case \"add\": { }; break;\r\n                case \"edit\": { }; break;\r\n            }\r\n        }; break;\r\n\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        mode: state.matches.mode,\r\n        matches: state.matches.matches,\r\n        places: state.placeEntity.places,\r\n        myProfile: state.profileEntity.myProfile,\r\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\r\n        //access: state.matches.access,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\r\n})(Shedule)","import React, { useEffect, useState } from 'react'\r\nimport {\r\n    RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker,\r\n    Textarea, File, CellButton, Button, Header, List, Cell, TabsItem, Tabs, View, Panel,\r\n    ActionSheet, ActionSheetItem, Gallery\r\n} from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport {\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId, deleteTournamentGroup,\r\n    editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, acceptTeamToTournamentBid, declineTeamToTournamentBid,\r\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength, getTournamentTablesByTournamentId,\r\n} from '../../../../store/tournamentsReducer'\r\nimport {\r\n    getTeamInfo, setTeamMode,\r\n} from '../../../../store/teamsReducer'\r\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\r\nimport { connect } from 'react-redux';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport BidListItem from '../ListItem/BidListItem';\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory';\r\nimport Shedule from '../../Common/Shedule/Shedule';\r\n\r\n\r\n\r\n\r\nconst TournamentItem = (props) => {\r\n    let currentDate = new Date();\r\n    let [tempGroupName, setTempGroupName] = useState(\"\");\r\n    let [currentTab, setCurrentTab] = useState(props.Tab ? props.Tab : \"info\");\r\n    let [activePopout, setActivePopout] = useState(null);\r\n    // let [slideIndex, setSlideIndex] = useState(0);\r\n    // let [isDraggable, setIsDraggable] = useState(true);\r\n    // let [showArrows, setShowArrows] = useState(true);\r\n\r\n    // это надо потом удалить. я вручную задал отображение вкладки расписания при открытии в режиме просмотра (для пользователей)\r\n\r\n    useEffect(() => {\r\n        props.getTournamentNewBids(props.tournaments.selected, props.myProfile)\r\n        props.getTournamentGroups(props.tournaments.selected)\r\n        props.getTournamentTablesByTournamentId(props.tournaments.selected.Id)\r\n\r\n    }, props.tournaments.selected)\r\n\r\n    useEffect(() => {\r\n        props.mode == \"view\" ? setCurrentTab(\"shedule\") : setCurrentTab(\"info\")\r\n    }, props.mode)\r\n\r\n    useEffect(() => {\r\n        props.getTournamentTeams(props.tournaments.selected, props.myProfile)\r\n    }, props.tournaments.selected.TournamentGroups)\r\n\r\n\r\n    const addToTournament = () => {\r\n\r\n        if (tempGroupName.trim() != \"\") {\r\n            //addGroupToTournament\r\n            props.addTournamentGroup(props.tournaments.selected, props.myProfile, { Id: -1, Name: tempGroupName });\r\n            setTempGroupName(\"\");\r\n        }\r\n    }\r\n\r\n    const DelGroupFromTournament = (keyId, groupId) => {\r\n        //props.tournaments.selected.Id, item.KeyId, item.Id\r\n\r\n        if (groupId < 0)\r\n            props.delGroupFromTournamentByKeyId(props.tournaments.selected.Id, keyId); // (эту можно удалить пока локально без сервера)\r\n        else\r\n            props.deleteTournamentGroup(props.tournaments.selected, props.myProfile, groupId); // это летит на сервер, т.к. оно уже записано в БД (существующий турнир)\r\n    }\r\n\r\n    const AcceptBid = (item) => {\r\n        props.acceptTeamToTournamentBid(item, props.tournaments.selected, props.myProfile)\r\n\r\n    }\r\n\r\n    const DeclineBid = (item, text) => {\r\n        props.declineTeamToTournamentBid(item, props.tournaments.selected, props.myProfile, text);\r\n\r\n    }\r\n\r\n    const CellClick = (item) => {\r\n\r\n        props.getTeamInfo(item);\r\n        props.setTeamMode(\"view\");\r\n    }\r\n\r\n    // удаление команды из турнира\r\n    const DeleteTeam = (team, tg) => {\r\n\r\n        props.deleteTeamFromTournament(team, tg, props.myProfile, \"Ваша команда удалена из турнира\")\r\n    }\r\n\r\n    const SelectTournamentGroup = (newGroup, oldGroup, team) => {\r\n        props.changeTournamentTeamBidTournamentGroup(team, newGroup, oldGroup, props.myProfile)\r\n    }\r\n\r\n\r\n    const SetPopup = (team, oldTg) => {\r\n\r\n        setActivePopout(\r\n            <ActionSheet\r\n                onClose={() => setActivePopout(null)}\r\n                iosCloseItem={<ActionSheetItem autoclose mode=\"cancel\">Отменить</ActionSheetItem>}\r\n            //toggleRef={this.baseTargetRef.current}\r\n            >\r\n                {\r\n                    props.tournaments.selected.TournamentGroups.map(newTg => {\r\n                        return (\r\n                            <ActionSheetItem\r\n                                onClick={() => {\r\n\r\n                                    SelectTournamentGroup(newTg, oldTg, team)\r\n                                }}\r\n                                autoclose\r\n                            >\r\n                                {newTg.Name}\r\n                            </ActionSheetItem>\r\n                        )\r\n                    })\r\n                }\r\n                <ActionSheetItem autoclose>Отмена</ActionSheetItem>\r\n            </ActionSheet>)\r\n\r\n    }\r\n\r\n\r\n    switch (props.mode) {\r\n        case \"view\": {\r\n\r\n            return (\r\n                <View popout={activePopout} activePanel={currentTab}>\r\n                    <Panel id=\"shedule\">\r\n                        <Tabs mode=\"buttons\">\r\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\r\n                        </Tabs>\r\n                        <FormLayout>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n                                <Shedule access=\"user\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\r\n                            </Group>\r\n                        </FormLayout>\r\n                    </Panel>\r\n                    <Panel id=\"info\">\r\n                        <Group>\r\n                            <Tabs mode=\"buttons\">\r\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\r\n                            </Tabs>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <FormItem top=\"Название турнира\" bottom=\"Имя турнира должно быть уникальным\">\r\n                                <InfoRow>{props.tournaments.selected.Name}</InfoRow>\r\n                            </FormItem>\r\n                            <FormItem top=\"Дата начала\">\r\n                                <InfoRow>{new Date(\r\n                                    props.tournaments.selected.WhenBegin.year,\r\n                                    props.tournaments.selected.WhenBegin.month - 1,\r\n                                    props.tournaments.selected.WhenBegin.day).toLocaleDateString()}</InfoRow>\r\n                            </FormItem>\r\n                            <FormItem top=\"Дата окончания\">\r\n                                <InfoRow>{new Date(\r\n                                    props.tournaments.selected.WhenEnd.year,\r\n                                    props.tournaments.selected.WhenEnd.month - 1,\r\n                                    props.tournaments.selected.WhenEnd.day).toLocaleDateString()}</InfoRow>\r\n                            </FormItem>\r\n                            <FormItem top=\"Описание турнира\">\r\n                                <InfoRow>{props.tournaments.selected.Details}</InfoRow>\r\n                            </FormItem>\r\n                            <FormItem top=\"Регламент турнира\">\r\n                                <InfoRow>{props.tournaments.selected.Reglament}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                    <List>\r\n                                        {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\r\n                                    </List>\r\n                                    :\r\n                                    <FormItem>\r\n                                        <InfoRow>Нет групп</InfoRow>\r\n                                    </FormItem>\r\n                                }\r\n                            </Group>\r\n                        </Group>\r\n                    </Panel>\r\n                    <Panel id=\"tables\">\r\n                        <Group>\r\n                            <Tabs mode=\"buttons\">\r\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Матчи</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"tables\")}>Таблицы</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>О турнире</TabsItem>\r\n                            </Tabs>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                                {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                    <List>\r\n                                        {props.tournaments.selected.TournamentGroups.map((item) => {\r\n                                            if (item.Name != \"\") {\r\n                                                let table = props.tournaments.selectedTables.filter(tT => tT.TournamentGroupId == item.Id);\r\n                                                table.sort((firstItem, secondItem) => firstItem.Place - secondItem.Place);\r\n\r\n                                                return (\r\n                                                    <>\r\n                                                        <InfoRow>Группа/лига: {item.Name}</InfoRow>\r\n                                                        <table>\r\n                                                            <tr>\r\n                                                                <th>М</th>\r\n                                                                <th>Команда</th>\r\n                                                                <th>И</th>\r\n                                                                <th>В</th>\r\n                                                                <th>П</th>\r\n                                                                <th>Н</th>\r\n                                                                <th>МЗ</th>\r\n                                                                <th>МП</th>\r\n                                                                <th>МР</th>\r\n                                                                <th>О</th>\r\n                                                            </tr>\r\n                                                            {\r\n                                                                table.map((row) => {\r\n                                                                    return (\r\n                                                                        <tr>\r\n                                                                            <td>{row.Place}</td>\r\n                                                                            <td>{row.TeamName}</td>\r\n                                                                            <td>{row.Games}</td>\r\n                                                                            <td>{row.Wins}</td>\r\n                                                                            <td>{row.Loses}</td>\r\n                                                                            <td>{row.Draws}</td>\r\n                                                                            <td>{row.GoalsScored}</td>\r\n                                                                            <td>{row.GoalsMissed}</td>\r\n                                                                            <td>{row.GoalsDifference}</td>\r\n                                                                            <td>{row.Points}</td>\r\n                                                                        </tr>\r\n                                                                    )\r\n\r\n                                                                }\r\n\r\n                                                                )}\r\n                                                        </table>\r\n                                                    </>\r\n\r\n                                                )\r\n                                            }\r\n                                            else\r\n                                                return null;\r\n                                        })\r\n                                        }\r\n                                    </List>\r\n                                    :\r\n                                    <FormItem>\r\n                                        <InfoRow>Нет групп</InfoRow>\r\n                                    </FormItem>\r\n                                }\r\n                            </Group>\r\n                        </Group>\r\n                    </Panel>\r\n\r\n                </View>\r\n            )\r\n        }; break;\r\n        case \"add\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Новый турнир</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название турнира\">\r\n                            <Input type=\"text\" defaultValue={props.tournaments.selected.Name} value={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата начала\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                defaultValue={props.tournaments.selected.WhenBegin}\r\n                                value={props.tournaments.selected.WhenBegin}\r\n                                onDateChange={value => props.setTournamentWhenBegin(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата окончания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                defaultValue={props.tournaments.selected.WhenEnd}\r\n                                value={props.tournaments.selected.WhenEnd}\r\n                                onDateChange={value => props.setTournamentWhenEnd(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание турнира\">\r\n                            <Textarea defaultValue={props.tournaments.selected.Details} value={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Регламент турнира\">\r\n                            <Textarea defaultValue={props.tournaments.selected.Reglament} value={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\r\n                        </FormItem>\r\n                        <FormItem top=\"Длительность матча, минут\">\r\n                            <Input type=\"Number\"\r\n                                defaultValue={props.tournaments.selected.MatchLength}\r\n                                value={props.tournaments.selected.MatchLength}\r\n                                placeholder=\"60\"\r\n                                onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\r\n                            ></Input>\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group>\r\n                        <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem> */}\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Сохранить</Button>\r\n                            <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        }; break;\r\n        case \"edit\": {\r\n            return (\r\n                <View popout={activePopout} activePanel={currentTab}>\r\n                    <Panel id=\"info\">\r\n                        <Group>\r\n                            <Header>Управление турниром</Header>\r\n                            <Tabs mode=\"buttons\">\r\n                                <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\r\n                                <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\r\n                            </Tabs>\r\n                            <FormLayout>\r\n                                <FormItem top=\"Ваш город\">\r\n                                    <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                                </FormItem>\r\n                                <FormItem top=\"Название турнира\">\r\n                                    <Input type=\"text\" defaultValue={props.tournaments.selected.Name} onChange={e => props.setTournamentName(e.currentTarget.value)} placeholder=\"Например, II чемпионат города Истра 2023 года на призы...\" />\r\n                                </FormItem>\r\n                                <FormItem top=\"Дата начала\">\r\n                                    <DatePicker\r\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                        defaultValue={props.tournaments.selected.WhenBegin}\r\n                                        value={props.tournaments.selected.WhenBegin}\r\n                                        onDateChange={value => props.setTournamentWhenBegin(value)}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top=\"Дата окончания\">\r\n                                    <DatePicker\r\n                                        min={{ day: 1, month: 1, year: currentDate.getFullYear() - 1 }}\r\n                                        max={{ day: 1, month: 1, year: currentDate.getFullYear() + 1 }}\r\n                                        defaultValue={props.tournaments.selected.WhenEnd}\r\n                                        value={props.tournaments.selected.WhenBegin}\r\n                                        onDateChange={value => props.setTournamentWhenEnd(value)}\r\n                                    />\r\n                                </FormItem>\r\n                                <FormItem top=\"Описание турнира\">\r\n                                    <Textarea defaultValue={props.tournaments.selected.Details} onChange={e => props.setTournamentDetails(e.currentTarget.value)} placeholder=\"Описание турнира\" />\r\n                                </FormItem>\r\n                                <FormItem top=\"Регламент турнира\">\r\n                                    <Textarea defaultValue={props.tournaments.selected.Reglament} placeholder=\"Регламент турнира\" onChange={e => props.setTournamentReglament(e.currentTarget.value)} />\r\n                                </FormItem>\r\n                                <FormItem top=\"Длительность матча, минут\">\r\n                                    <Input type=\"Number\"\r\n                                        defaultValue={props.tournaments.selected.MatchLength}\r\n                                        value={props.tournaments.selected.MatchLength}\r\n                                        placeholder=\"60\"\r\n                                        onChange={e => props.setTournamentMatchLength(e.currentTarget.value)}\r\n                                    ></Input>\r\n                                </FormItem>\r\n                                {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                                <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                                    {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                        <List>\r\n                                            {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={item.KeyId} Delete={() => DelGroupFromTournament(item.KeyId, item.Id)} Name={item.Name}></ListItem>)}\r\n                                        </List>\r\n                                        :\r\n                                        <FormItem>\r\n                                            <InfoRow>Нет групп</InfoRow>\r\n                                        </FormItem>\r\n                                    }\r\n                                </Group>\r\n                                <FormItem top=\"Новая группа/лига\">\r\n                                    <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Например, Лига 1\" />\r\n                                    <CellButton onClick={addToTournament} before={<Icon28AddOutline />}>Добавить группу</CellButton>\r\n                                </FormItem>\r\n                                <FormItem top=\"Подверждение\">\r\n                                    <Button onClick={() => props.saveSelectedTournament(props.tournaments.selected, props.myProfile)}>Внести изменения</Button>\r\n                                    {/* <Button onClick={props.resetTournament} mode=\"secondary\">Отмена</Button> */}\r\n                                </FormItem>\r\n                            </FormLayout>\r\n                        </Group>\r\n                    </Panel>\r\n                    <Panel id=\"bids\">\r\n                        <Header>Заявки от команд</Header>\r\n                        <Tabs mode=\"buttons\">\r\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\r\n                        </Tabs>\r\n                        <FormLayout>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Заявки</Header>}>\r\n                                {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\r\n                                    <List>\r\n                                        {props.tournaments.bidsNew.map((item) =>\r\n                                            <BidListItem\r\n                                                KeyId={item.KeyId}\r\n                                                Accept={AcceptBid}\r\n                                                Decline={DeclineBid}\r\n                                                Item={item}\r\n                                            >\r\n\r\n                                            </BidListItem>)}\r\n                                    </List>\r\n                                    :\r\n                                    <FormItem>\r\n                                        <InfoRow>Нет новых заявок</InfoRow>\r\n                                    </FormItem>\r\n                                }\r\n                            </Group>\r\n                        </FormLayout>\r\n                    </Panel>\r\n                    <Panel id=\"teams\">\r\n                        <Header>Команды по группам</Header>\r\n                        <Tabs mode=\"buttons\">\r\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\r\n                        </Tabs>\r\n                        <FormLayout>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                                {props.tournaments.selected.TournamentGroups.map(tg => {\r\n\r\n                                    return (\r\n                                        <Group header={<Header>{tg.Name}</Header>}>\r\n                                            <List>\r\n                                                {\r\n                                                    tg.Teams.map(team => {\r\n\r\n                                                        return (\r\n                                                            <RichCell\r\n                                                                caption={team.Details}\r\n                                                                after={<Icon24ChevronRightWithHistory\r\n                                                                    handleClick={() => CellClick(team)}\r\n                                                                    toMenuName=\"teamitem\"\r\n                                                                    data-story=\"teamitem\"\r\n                                                                ></Icon24ChevronRightWithHistory>\r\n                                                                }\r\n                                                                actions={\r\n                                                                    <>\r\n                                                                        <Button onClick={() => SetPopup(team, tg)} mode=\"primary\">Переместить</Button>\r\n                                                                        <Button onClick={() => DeleteTeam(team, tg)} mode=\"destructive\">Удалить</Button>\r\n                                                                    </>\r\n                                                                }\r\n                                                            >{team.Name}</RichCell>\r\n                                                        )\r\n                                                    })\r\n                                                }\r\n                                            </List>\r\n                                        </Group>)\r\n\r\n                                })}\r\n\r\n                                {/* {(props.tournaments.bidsNew && props.tournaments.bidsNew.length > 0) ?\r\n                                    <List>\r\n                                        {props.tournaments.bidsNew.map((item) => \r\n                                        <BidListItem\r\n                                            KeyId={item.KeyId} \r\n                                            Accept={AcceptBid}\r\n                                            Decline={DeclineBid}\r\n                                            Item={item}\r\n                                            >\r\n\r\n                                        </BidListItem>)}\r\n                                    </List>\r\n                                    :\r\n                                    <FormItem>\r\n                                        <InfoRow>Нет новых заявок</InfoRow>\r\n                                    </FormItem>\r\n                                } */}\r\n                            </Group>\r\n                        </FormLayout>\r\n                    </Panel>\r\n                    <Panel id=\"shedule\">\r\n                        <Header>Расписание</Header>\r\n                        <Tabs mode=\"buttons\">\r\n                            <TabsItem onClick={() => setCurrentTab(\"info\")}>Основное</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"bids\")}>Заявки</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"teams\")}>Команды</TabsItem>\r\n                            <TabsItem onClick={() => setCurrentTab(\"shedule\")}>Расписание</TabsItem>\r\n                        </Tabs>\r\n                        <FormLayout>\r\n                            <FormItem top=\"Ваш город\">\r\n                                <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                            </FormItem>\r\n                            <Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n                                <Shedule access=\"admin\" tournament={props.tournaments.selected} todayIs={new Date()}></Shedule>\r\n                            </Group>\r\n                        </FormLayout>\r\n                    </Panel>\r\n\r\n                </View>\r\n                // <Tabs>\r\n                //     <TabsItem>\r\n\r\n                //     </TabsItem>\r\n                // </Tabs>\r\n\r\n            )\r\n        }; break;\r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        SelectedName: state.tournamentsEntity.selected.Name,\r\n        TournamentTables: state.tournamentsEntity.selectedTables,\r\n        cities: state.cityEntity.cities,\r\n        myProfile: state.profileEntity.myProfile,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getTournamentTeams, getTournamentGroups, replaceTeam, deleteTeam, getTeamInfo, setTeamMode, changeTournamentTeamBidTournamentGroup, deleteTeamFromTournament, setTournamentMatchLength,\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, acceptTeamToTournamentBid, declineTeamToTournamentBid,\r\n    delGroupFromTournamentByKeyId, deleteTournamentGroup, editGroupInTournament, addTournamentGroup, resetTournament, saveSelectedTournament, getTournamentNewBids, getTournamentTablesByTournamentId,\r\n})(TournamentItem)","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\n\r\n\r\nconst BidList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        debugger\r\n                        if (item.Approved && !item.Published)\r\n                            return (\r\n                                <RichCell\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    text={<b style={{\"color\": \"green\"}}>Заявка на турнир одобрена</b>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                        else if (!item.Approved && !item.Published)\r\n                            return (\r\n                                <RichCell\r\n                                    //onClick={() => props.CellClick(item)}\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    text={<b style={{\"color\": \"red\"}}>Заявка на турнир отклонена</b>}\r\n                                    //actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                        else\r\n                            return (\r\n                                <RichCell\r\n                                    onClick={() => props.CellClick(item)}\r\n                                    caption={item.AdminTournamentComment.trim() && `Комментарий организатора: ${item.AdminTournamentComment.trim()}`}\r\n                                    actions={<Button mode=\"destructive\" onClick={() => props.Button1Handle(item)}>Отменить заявку</Button>}\r\n                                >\r\n                                    { `${item.TeamName} - ${item.TournamentGroup.Name} - ${item.TournamentGroup.Tournament.Name} (${item.TournamentGroup.Tournament.Founder.Surname} ${item.TournamentGroup.Tournament.Founder.Name[0]}.)`}\r\n                                    \r\n                                </RichCell>\r\n                            )\r\n                    })\r\n                    : <InfoRow>У вас нет активных заявок</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button } from '@vkontakte/vkui'\r\nimport RichCellWithHistory from '../../Common/WithHistory/RichCellWithHistory'\r\n\r\n\r\nconst BidTeamTournamentList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        \r\n                        if (props.Bids && props.Bids.length > 0 && props.Bids.filter(x => x.TournamentGroup.TournamentId == item.Id).length > 0){\r\n                            //debugger\r\n                            return <>{props.Bids.map(bid => {\r\n                                debugger\r\n                                // просмотреть и вывести заявки\r\n                                if (!bid.Approved && !bid.Published && bid.TournamentGroup.TournamentId == item.Id){\r\n                                    debugger\r\n                                    return (\r\n                                        <RichCell\r\n                                            text=\"Предыдущая заявка была отклонена, можно повторить\"\r\n                                            caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\r\n                                            onClick={() => props.CellClick(item)}\r\n                                            \r\n                                        >\r\n                                            {item.Name}\r\n                                        </RichCell>\r\n                                    )}\r\n                                }\r\n                            )}</>\r\n                            \r\n\r\n\r\n                        }\r\n                        else{\r\n                            return (\r\n                                <RichCell\r\n                                    caption={`Организатор: ${item.Founder.Surname} ${item.Founder.Name[0]}.`}\r\n                                    onClick={() => props.CellClick(item)}\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                    })\r\n                    : <InfoRow>Нет активных к набору турниров</InfoRow>\r\n                }\r\n\r\n            </List>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidTeamTournamentList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, Cell, Button, FormItem, Input } from '@vkontakte/vkui'\r\n\r\n\r\nconst BidTeamTournamentGroupsList = (props) => {\r\n\r\n    //const [tournamentList, setTournamentList] = useState(props.tournaments)\r\n    // const list = props.tournaments.map(x => {\r\n    //     return <TournamentListItem>{x.Name}</TournamentListItem>\r\n    // })\r\n    //debugger\r\n\r\n    return (\r\n        <Group header=\"Выберите группу/лигу\">\r\n            <Group mode=\"plain\">\r\n                <FormItem>\r\n                    <Button onClick={props.CellClick}>Назад к выбору турнира</Button>\r\n                </FormItem>\r\n                <FormItem top=\"Название команды на этот турнир\">\r\n                    <Input type=\"text\" defaultValue={props.TeamName} value={props.TeamName} onChange={e => props.SetTeamName(e.currentTarget.value)} placeholder={`Например, ${props.TeamName}`} />\r\n                </FormItem>\r\n                <List>\r\n                {(props.List && props.List.length > 0) ?\r\n                    props.List.map(item => {\r\n                        //debugger\r\n                        if (props.Bids && props.Bids.filter(x => (x.TournamentGroupId == item.Id && (!item.Approved && item.Published)) ).length > 0)\r\n                        {\r\n                            // // предположим существует несколкьо заявок на 1 группу, тогда нужно найти отклоненные и их не предлагать\r\n                            // props.Bids.map\r\n\r\n                            return (\r\n                                <RichCell\r\n                                after={\r\n                                    <Button onClick={() => props.Button2Handle(item)} mode=\"destructive\" >Отменить заявку</Button>\r\n                                }\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                        else{\r\n                            return (\r\n                                <RichCell\r\n                                after={\r\n                                    <Button onClick={() => props.Button1Handle(item)}>Заявиться сюда</Button>\r\n                                }\r\n                                >\r\n                                    {item.Name}\r\n                                </RichCell>\r\n                            )\r\n                        }\r\n                        \r\n                    })\r\n                    : <InfoRow>Нет групп в турнире</InfoRow>\r\n                }\r\n\r\n            </List>\r\n            </Group>\r\n        </Group>\r\n    )\r\n}\r\n\r\nexport default BidTeamTournamentGroupsList","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, Button, InfoRow, Header } from '@vkontakte/vkui'\r\nimport {defaultPhotoPath} from '../../../../store/dataTypes/common'\r\nimport TeamAdminList from '../Team/TeamAdminList'\r\nimport { setActiveMenuItem } from './../../../../store/mainMenuReducer';\r\nimport { cancelBidTeamToTournamentGroup,  } from './../../../../store/bidTeamsReducer'\r\nimport {setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,} from './../../../../store/tournamentsReducer'\r\nimport {resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam} from './../../../../store/teamsReducer'\r\n\r\nimport { connect } from 'react-redux';\r\nimport ButtonWithHistory from '../../Common/WithHistory/ButtonWithHistory'\r\nimport BidList from './BidList';\r\n\r\n\r\n\r\nconst BidTeamAdminPanel = (props) => {\r\n\r\n\t// let [myTournaments, setMyTournaments] = useState([]);\r\n    const PublishTeam = (team, publish) => {\r\n        \r\n        // props.publishTeam(team, props.myProfile, publish);\r\n    }\r\n   \r\n    const DeleteTeam = (team) => {\r\n        // props.deleteTeam(team, props.myProfile);\r\n    }\r\n    \r\n    const CellClick = (item) => {\r\n        \r\n        // props.setSelectedTeam(item);\r\n        // props.setTeamMode(\"edit\");\r\n    }\r\n\r\n    const CancelBid = (item) => {\r\n        \r\n        props.cancelBidTeamToTournamentGroup(item, props.myProfile, props.team.selected);\r\n        // props.setTeamMode(\"edit\");\r\n    }\r\n    \r\n    \r\n    const ButtonNewClick = () => {\r\n        // props.resetTeam();\r\n        // props.setTeamMode(\"add\");\r\n    }\r\n\r\n    useEffect(() =>{\r\n        \r\n        props.getMyTeams(props.myProfile.UserProfileId);\r\n    }, props.myProfile)\r\n\r\n        return (\r\n            <>\r\n                <InfoRow>При заявке указывается желаемая группа. Организатор в праве взять в другую группу</InfoRow>\r\n                {/* <ButtonWithHistory handleClick={ButtonNewClick} toMenuName=\"teamitem\" data-story=\"teamitem\">Создать заявку</ButtonWithHistory> */}\r\n                <BidList\r\n                    CellClick={CellClick}\r\n                    Button1Handle = {CancelBid}\r\n                    //Button2Handle = {DeleteTeam}\r\n                    List={props.tournamentsForBids.myBids}\r\n                >\r\n                    \r\n                </BidList>\r\n                \r\n            </>\r\n        )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n        tournament: state.tournamentsEntity,\r\n        team: state.teamsEntity,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    cancelBidTeamToTournamentGroup, \r\n    resetTeam, getMyTeams, setTeamMode, setSelectedTeam, deleteTeam,\r\n\tsetActiveMenuItem, setTournamentMode, getMyTournaments, publishTournament, deleteTournament, setSelectedTournament, resetTournament,\r\n})(BidTeamAdminPanel);","import React, { useState , useEffect } from 'react'\r\nimport { RichCell, Avatar, FormLayout, FormItem, Input, InfoRow, Group, DatePicker, Textarea, File, CellButton, Button, Header, List, Cell } from '@vkontakte/vkui'\r\nimport { defaultPhotoPath } from '../../../../store/dataTypes/common'\r\nimport {\r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails, delGroupFromTournamentByKeyId,\r\n    editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament\r\n} from '../../../../store/tournamentsReducer'\r\nimport {getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, \r\n    addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,  } from '../../../../store/bidTeamsReducer'\r\nimport {\r\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \r\n} from '../../../../store/teamsReducer'\r\nimport { Icon24Camera, Icon28AddOutline } from '@vkontakte/icons';\r\nimport { connect } from 'react-redux';\r\nimport ListItem from '../ListItem/ListItem';\r\nimport BidTeamList from '../BidTeam/BidList';\r\nimport { dateToString } from '../../../../utils/convertors/dateUtils';\r\nimport BidTeamTournamentList from '../BidTeam/BidTeamTournamentList';\r\nimport BidTeamTournamentGroupsList from '../BidTeam/BidTeamTournamentGroupsList';\r\nimport BidTeamAdminPanel from '../BidTeam/BidTeamAdminPanel'\r\n\r\n\r\n\r\n\r\n\r\nconst TeamItem = (props) => {\r\n    let currentDate = new Date();\r\n    let [teamNameOnTournament, SetTeamNameOnTournament] = useState(props.teams.selected.Name);\r\n\r\n    const teamDate = new Date(\r\n        props.teams.selected.WhenBorn.year,\r\n        props.teams.selected.WhenBorn.month-1,\r\n        props.teams.selected.WhenBorn.day\r\n        );\r\n\r\n        useEffect(() =>{\r\n            if (props.teams.selected != null){\r\n                props.getActualTournamentsInCity(props.myProfile, props.teams.selected);\r\n                props.getTeamBidsByTeam(props.myProfile, props.teams.selected);\r\n            }\r\n        }, props.teams.selected)\r\n        \r\n    \r\n    const MakeBid = (tournamentgroup) => {\r\n        props.addBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected, teamNameOnTournament);\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n        //setTempGroupName(\"\");\r\n    }\r\n\r\n    const CancelBid = (tournamentgroup) => {\r\n        props.cancelBidTeamToTournamentGroup(tournamentgroup, props.myProfile, props.teams.selected)\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n        //setTempGroupName(\"\");\r\n    }\r\n    \r\n    const SelectTournament = (tournament) => {\r\n        props.getTournamentGroups(tournament)\r\n        props.getTeamBidsByTeam(props.myProfile, props.teams.selected)\r\n        props.setBidTeamSelectedMode(\"groups\")\r\n    }\r\n    \r\n    const BackToTournaments = () => {\r\n        props.setBidTeamSelectedMode(\"tournaments\")\r\n    }\r\n\r\n    switch (props.mode) {\r\n        case \"view\": {\r\n            return (\r\n                <>\r\n                    <FormItem top=\"Ваш город\">\r\n                        <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Название команды\">\r\n                        <InfoRow>{props.teams.selected.Name}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Дата основания\">\r\n                        <InfoRow>{dateToString(teamDate)}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Описание команды\">\r\n                        <InfoRow>{props.teams.selected.Details}</InfoRow>\r\n                    </FormItem>\r\n                    <FormItem top=\"Логотип\">\r\n                        <InfoRow>{props.teams.selected.Logo}</InfoRow>\r\n                    </FormItem>\r\n                    {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                        {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                            <List>\r\n                                {props.tournaments.selected.TournamentGroups.map((item) => <InfoRow>{item.Name}</InfoRow>)}\r\n                            </List>\r\n                            :\r\n                            <FormItem>\r\n                                <InfoRow>Нет групп</InfoRow>\r\n                            </FormItem>\r\n                        }\r\n                    </Group> */}\r\n                </>\r\n            )\r\n        }; break;\r\n        case \"add\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Новая команда</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название команды\">\r\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата основания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\r\n                                defaultValue={props.teams.selected.WhenBorn}\r\n                                value={props.teams.selected.WhenBorn}\r\n                                onDateChange={value => props.setTeamWhenBorn(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание команды\">\r\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group> */}\r\n                        {/* <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem> */}\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTeam(props.teams.selected, props.myProfile)}>Создать</Button>\r\n                            <Button onClick={props.resetTeam} mode=\"secondary\">Отмена</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        }; break;\r\n        case \"edit\": {\r\n            return (\r\n                <Group>\r\n                    <Header>Управление командой</Header>\r\n                    <FormLayout>\r\n                        <FormItem top=\"Ваш город\">\r\n                            <InfoRow>{props.myProfile.CityUmbracoName}</InfoRow>\r\n                        </FormItem>\r\n                        <FormItem top=\"Название команды\">\r\n                            <Input type=\"text\" defaultValue={props.teams.selected.Name} value={props.teams.selected.Name} onChange={e => props.setTeamName(e.currentTarget.value)} placeholder=\"Например, Ривер Плейт\" />\r\n                        </FormItem>\r\n                        <FormItem top=\"Дата основания\">\r\n                            <DatePicker\r\n                                min={{ day: 1, month: 1, year: currentDate.getFullYear() - 50 }}\r\n                                max={{ day: 1, month: 1, year: currentDate.getFullYear() }}\r\n                                defaultValue={props.teams.selected.WhenBorn}\r\n                                value={props.teams.selected.WhenBorn}\r\n                                onDateChange={value => props.setTeamWhenBorn(value)}\r\n                            />\r\n                        </FormItem>\r\n                        <FormItem top=\"Описание команды\">\r\n                            <Textarea defaultValue={props.teams.selected.Details} value={props.teams.selected.Details} onChange={e => props.setTeamDetails(e.currentTarget.value)} placeholder=\"Описание команды\" />\r\n                        </FormItem>\r\n                        {/* <FormItem top=\"Загрузите ваше фото\">\r\n                            <File before={<Icon24Camera />} controlSize=\"m\">\r\n                                Выбрать фото\r\n                            </File>\r\n                        </FormItem> */}\r\n                        {/* <Group header={<Header mode=\"secondary\">Группы</Header>}>\r\n                            {(props.tournaments.selected.TournamentGroups && props.tournaments.selected.TournamentGroups.length > 0) ?\r\n                                <List>\r\n                                    {props.tournaments.selected.TournamentGroups.map((item) => <ListItem KeyId={-1} Delete={() => props.delGroupFromTournament(props.tournaments.selected.Id, item.KeyId)} Name={item.Name}></ListItem>)}\r\n                                </List>\r\n                                :\r\n                                <FormItem>\r\n                                    <InfoRow>Нет групп</InfoRow>\r\n                                </FormItem>\r\n                            }\r\n                        </Group> */}\r\n                        {/* <FormItem top=\"Новая группа/лига\">\r\n                            <Input type=\"text\" defaultValue={tempGroupName} value={tempGroupName} onChange={e => setTempGroupName(e.currentTarget.value)} placeholder=\"Название, например, Лига 1\" />\r\n                            <CellButton onClick={() => addToTournament(props.tournaments.selected.Id, tempGroupName)} before={<Icon28AddOutline />}>Добавить группу/лигу</CellButton>\r\n                        </FormItem> */}\r\n                        <FormItem top=\"Заявки на турнир\">\r\n                            <BidTeamAdminPanel></BidTeamAdminPanel>\r\n                        </FormItem>\r\n                        <FormItem top=\"Куда можно заявиться\">\r\n                            {props.tournamentsForBids.selectMode == \"tournaments\" ?\r\n                                <BidTeamTournamentList\r\n                                    CellClick={SelectTournament}\r\n                                    // Button1Handle = {MakeBid}\r\n                                    // Button2Handle = {CancelBid}\r\n                                    Bids = {props.tournamentsForBids.myBids}\r\n                                    List={props.tournamentsForBids.tournaments}\r\n                                ></BidTeamTournamentList>\r\n                        :\r\n                                <BidTeamTournamentGroupsList\r\n                                    CellClick={BackToTournaments}\r\n                                    Button1Handle = {MakeBid}\r\n                                    Button2Handle = {CancelBid}\r\n                                    List={props.tournamentsForBids.selectedTournament.TournamentGroups}\r\n                                    Bids = {props.tournamentsForBids.myBids}\r\n                                    TeamName={teamNameOnTournament}\r\n                                    SetTeamName={SetTeamNameOnTournament}\r\n                                ></BidTeamTournamentGroupsList>\r\n                        }\r\n                        </FormItem>\r\n                        <FormItem top=\"Подверждение\">\r\n                            <Button onClick={() => props.saveSelectedTeam(props.teams.selected, props.myProfile)}>Внести изменения</Button>\r\n                        </FormItem>\r\n                    </FormLayout>\r\n                </Group>\r\n            )\r\n        };break;\r\n        default:{\r\n            <Group>\r\n                Не выбран режим отображения компонента (view, add, edit)\r\n            </Group>\r\n        };break;\r\n        \r\n    }\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        teams: state.teamsEntity,\r\n        bidTeams: state.bidTeamsEntity,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n        SelectedName: state.teamsEntity.selected.Name,\r\n        bidSelectMode: state.bidTeamsEntity.selectMode, \r\n        cities: state.cityEntity.cities,\r\n        myProfile: state.profileEntity.myProfile,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getActualTournamentsInCity, getTournamentGroups, setBidTeamSelectedMode, getTeamBidsByTeam, addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup,\r\n    setTeamWhenBorn, setTeamDetails, setTeamName, saveSelectedTeam, \r\n    setTournamentWhenBegin, setTournamentWhenEnd, setTournamentName, setTournamentReglament, setTournamentDetails,\r\n    delGroupFromTournamentByKeyId, editGroupInTournament, addGroupToTournament, resetTournament, saveSelectedTournament, \r\n})(TeamItem)","import React, { useEffect } from 'react'\r\nimport { RichCell, Avatar, InfoRow, Group, List, CellButton, Button, FormItem, CustomSelect, DatePicker, CustomSelectOption, Header, SimpleCell, Div } from '@vkontakte/vkui'\r\nimport Icon24ChevronRightWithHistory from '../../Common/WithHistory/Icon24ChevronRightWithHistory'\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getTournamentTeams,\r\n} from '../../../../store/tournamentsReducer'\r\nimport {\r\n    setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\r\n} from '../../../../store/matchReducer'\r\nimport { Checkbox } from '@vkontakte/vkui/dist/components/Checkbox/Checkbox';\r\n\r\n\r\n// const SheduleContainer = (props) => {\r\n\r\n\r\n\r\n//     return <Shedule props={...props}></Shedule>\r\n// }\r\n\r\n\r\nconst Hot = (props) => {\r\n    debugger\r\n    return (\r\n        <Group>\r\n            <List>\r\n                {props.Matches && props.Matches.map(match => {\r\n                    let date = new Date(match.When);\r\n                    return (\r\n                            <RichCell\r\n                                text={\r\n                                    match.Played ?\r\n                                        <span style={{ \"color\": \"green\" }}>Сыгран {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span> :\r\n                                        <span style={{ \"color\": \"blue\" }}>Состоится {`${date.toLocaleDateString()} в ${date.toLocaleTimeString()}`}</span>\r\n                                }\r\n                            >\r\n                                {match.Played ?\r\n                                    `${match.Team1Name} ${match.Team1Goals} - ${match.Team2Goals} ${match.Team2Name}` :\r\n                                    `${match.Team1Name} - ${match.Team2Name}`\r\n                                }\r\n                            </RichCell>\r\n                    )\r\n                }\r\n                )}\r\n            </List>\r\n        </Group>\r\n    )\r\n                \r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        tournaments: state.tournamentsEntity,\r\n        mode: state.matches.mode,\r\n        matches: state.matches.matches,\r\n        places: state.placeEntity.places,\r\n        myProfile: state.profileEntity.myProfile,\r\n        // пожалуй, нужно места загрузить сразу при запуске приложения и использовать их без изменения из хранилища, а не запрашивать каждый раз с сревера. они редко меняются.\r\n        //access: state.matches.access,\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getTournamentTeams, setMode, setAccess, addMatchToShedule, getAllMatchesByTournament, delMatchFromShedule,\r\n})(Hot)","import React, { useState, useEffect } from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport { View, ScreenSpinner, AdaptivityProvider, AppRoot, ConfigProvider, Badge, Header, List, RichCell } from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css';\r\n\r\nimport { setActiveMenuItem } from './store/mainMenuReducer';\r\nimport { getAllPlaces, getAllPlacesInCityByCityId } from './store/placeReducer';\r\nimport { setVkProfileInfo, getUserProfile, getAuthInfo, setTriedToGetProfile, setUserProfileCity } from './store/profileReducer';\r\nimport { setGlobalPopout } from './store/systemReducer';\r\nimport { getAllCityTournamentAdminsByCityId, getTournamentsByCityId, setSelectedTournament, setTournamentMode } from './store/tournamentsReducer';\r\nimport { getMatchesInCurrentCity, setHotPanel } from './store/matchReducer';\r\nimport { addBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity  } from './store/bidTeamsReducer';\r\nimport { getAllCitiesFromServer } from './store/cityReducer';\r\nimport { setShowAdminTourneyTab } from './store/systemReducer';\r\n\r\n\r\nimport { Epic, Tabbar, TabbarItem, Panel, PanelHeader, PanelHeaderButton, PanelHeaderBack, Tabs, TabsItem, Div, Avatar, Group, SimpleCell, InfoRow } from '@vkontakte/vkui';\r\nimport { connect } from 'react-redux';\r\nimport ProfilePanel from './components/Panels/ProfilePanel/ProfilePanel';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport BackButton from './components/Panels/Common/BackButton/BackButton';\r\nimport TabbarItemWithHistory from './components/Panels/Common/WithHistory/TabbarItemWithHistory';\r\nimport { memberingCollectTypes } from './store/constants/commonConstants'\r\nimport ModalCommon from './components/Modals/ModalCommon/ModalCommon';\r\nimport TournamentAdminPanel from './components/Panels/AdminPanel/Tournament/TournamentAdminPanel';\r\nimport TeamAdminPanel from './components/Panels/AdminPanel/Team/TeamAdminPanel';\r\nimport TournamentItem from './components/Panels/AdminPanel/Tournament/TournamentItem';\r\nimport TeamItem from './components/Panels/AdminPanel/Team/TeamItem';\r\nimport BidTeamTournamentGroupsList from './components/Panels/AdminPanel/BidTeam/BidTeamTournamentGroupsList';\r\nimport Hot from './components/Panels/Common/Hot/Hot';\r\n\r\n\r\nconst App = (props) => {\r\n\tconst [fetchedUser, setUser] = useState(null);\r\n\tconst [popout, setPopout] = useState(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\tconst [modalWindow, setModalWindow] = useState(null);\r\n\tconst [viewCollectTab, setCollectViewTab] = useState(\"main\");\r\n\r\n\t\r\n\t// это системное, загрузка приложения вк\r\n\tuseEffect(() => {\r\n\t\tbridge.subscribe(({ detail: { type, data } }) => {\r\n\t\t\tif (type === 'VKWebAppUpdateConfig') {\r\n\t\t\t\t\r\n\t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\r\n\t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\r\n\t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tasync function fetchData() {\r\n\t\t\t\r\n\t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\r\n\r\n\r\n\t\t\tsetUser(user);\r\n\t\t\tprops.setVkProfileInfo(user);\r\n\t\t\tprops.getAllCitiesFromServer();\r\n\r\n\r\n\t\t\t//Build an object which matches the structure of our view model class\r\n\t\t\t//setPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\t\t}\r\n\r\n\t\tasync function getDataFromServer() {\r\n\r\n\t\t\t// грузим профиль. \r\n\t\t\t//props.getUserProfile();\r\n\t\t\t//props.getAllPlaces();\r\n\r\n\r\n\t\t\t// если не загрузился, значит регистрируем пользователя.\r\n\t\t\t// в хранилище у нас уже лежит инфа о пользователе (может кроме друзей и года рождения)\r\n\t\t\t// запросить у пользователя реальную дату рождения [и список друзей]\r\n\t\t\t// отправить запрос на регстрицию профиля (Имя, фамилия, дата рождения, город, профиль ВК, [друзья])\r\n\t\t\t// загрузить с сервера профиль пользователя\r\n\t\t\t// если город пользователя найден среди городов работы приложения, тогда\r\n\t\t\t// загружаем все сборы по этому городу\r\n\t\t\t// если не найден, тогда говорим, что его город не найден и предлагаем выбрать город из списка\r\n\r\n\t\t\t// после выбора города из списка, сохраняем его в профиль пользователю, загружаем снова профиль и \r\n\t\t\t// грузим сборы по этому городу\r\n\r\n\t\t\t// у организатора должен быть указан телефон и ссылка на профиль ВК, куда можно написать вопрос.\r\n\t\t\t// роль организатора - нужен доступ к телефону\r\n\r\n\r\n\t\t\t// загрузка сборов (по городу)\r\n\t\t\t// загрузка мест (надо по городу)\r\n\t\t\t//props.getAllPlaces();\r\n\r\n\t\t\t// получение всех городов\r\n\t\t}\r\n\r\n\r\n\t\t//getDataFromServer();\r\n\t\tfetchData();\r\n\r\n\t\t// загружаем сборы (в полях должны быть айдишники и текстовое описание. чтобы далее подробности подгружались при переходе к подробностям)\r\n\t\t//props.getHotCollects();\r\n\r\n\r\n\t\t// загружаем пользователей \r\n\r\n\r\n\t}, []);\r\n\r\n\r\n\t// загрузка мест, админов города, текущих турниров\r\n\tuseEffect(() => {\r\n\r\n\t\t// а это уже когда прогрузился и выбран город профиля\r\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\r\n\t\t\tprops.myProfile.CityUmbracoId != -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920 && props.places.length == 0) {\r\n\t\t\t// загружаем места этого города\r\n\r\n\t\t\t// получаем список мест по umbId города\r\n\t\t\tprops.getAllPlacesInCityByCityId(props.myProfile.CityUmbracoId);\r\n\r\n\t\t\t// получаем список админов турниров города по umbId города\r\n\t\t\tprops.getAllCityTournamentAdminsByCityId(props.myProfile.CityUmbracoId);\r\n\r\n\t\t\t// получаем список активных турниров города по umbId города и текущей дате\r\n\t\t\tprops.getTournamentsByCityId(props.myProfile.CityUmbracoId);\r\n\t\t}\r\n\r\n\t\t// это пока не прогрузился город профиля (не выбран)\r\n\t\tif (props.cities && props.cities.length > 0 && props.myProfile && props.myProfile.CityUmbracoId != null &&\r\n\t\t\tprops.myProfile.CityUmbracoId == -1 && new Date(props.myProfile.Birth).getFullYear() >= 1920) // важно, чтобы все это прогрузилось уже\r\n\t\t{\r\n\r\n\t\t\t// предлагаем выбрать город\r\n\t\t\tsetPopout(null);\r\n\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t}\r\n\r\n\r\n\t}, [props.myProfile, props.vkProfile, props.cities])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (props.places && props.places.length > 0) {\r\n\t\t\t\r\n\t\t\tprops.getMatchesInCurrentCity(props.myProfile);\r\n\t\t}\r\n\t}, [props.places])\r\n\r\n\t// при смене глобального Popout и возникновении ошибки\r\n\tuseEffect(() => {\r\n\t\tif (props.errorObject && props.errorObject.resultcode != 0)\r\n\t\t\tsetModalWindow(<ModalCommon modalName=\"Error\" data={props.errorObject} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\telse {\r\n\t\t\tsetPopout(props.globalPopout ? <ScreenSpinner size='large' /> : null);\r\n\t\t}\r\n\t}, [props.globalPopout, props.errorObject])\r\n\r\n\r\n\t// при загрузке профиля (по факту приложения)\r\n\tuseEffect(() => {\r\n\t\t// нужно узнать город, далее если этого города нет в списке поддерживаемых, предлжить выбрать другой город и отправить заявку на добавление города. Всё это в модалке\r\n\t\t// другой вопрос. если кто-то создает фейковый сбор, как гарантировать другим, что это не фейк?\r\n\t\t// ввести в рейтинг поле \"гарант сбора. если поступает жалоба на сбор (не было сбора), модератор засчитывает штрафной балл организатору\"\r\n\t\t// у людей, которые первый раз собирают, писать город из профиля, количество друзей и то, что человек еще не собирал ни разу, а значит может быть фейком\r\n\t\t// еще нужно запрашивать права на доступ к инфе: город, дата рождения, друзья, \r\n\t\t// а еще в бэке надо сделать так, чтобы записи в Leg и City не плодились, а искали соответствующие из умбрако и ставили их Id\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\r\n\t\t\tprops.getUserProfile(props.vkProfile);\r\n\t\t}\r\n\r\n\t}, [props.vkProfile])\r\n\r\n\r\n\t// регистрация пользователя\r\n\tuseEffect(() => {\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\t\t\tif ((!props.myProfile) & (props.triedToGetProfile)) { // не зарегистрирован\r\n\t\t\t\tprops.getAuthInfo(props.vkProfile); // регаем\r\n\t\t\t}\r\n\t\t}\r\n\t}, [props.triedToGetProfile])\r\n\r\n\r\n\t// загрузка профиля\r\n\tuseEffect(() => {\r\n\r\n\t\tif (props.vkProfile && props.vkProfile.city) {\r\n\t\t\tif (props.myProfile) // зарегистрирован и получил данные\r\n\t\t\t{\r\n\t\t\t\t// если не год рождения скрыт настройками приватности и из-за этого при регистрации на бэкэнде дата рождения не определилась, \r\n\t\t\t\t// выводим окно выбора года рождения и после выбора правим его в профиле ВК\r\n\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() < 1920)) {\r\n\t\t\t\t\tsetPopout(null);\r\n\t\t\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectBirth\" data={props.vkProfile} action={props.setVkProfileInfo} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t\t// после регистрации, загрузки новых данных с сервера и указания года рождения необходимо обновить данные на сервере\r\n\t\t\t\t\tif (new Date(props.myProfile.Birth).getFullYear() < 1920) {\r\n\t\t\t\t\t\tprops.getAuthInfo(props.vkProfile);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { // если данные обновлены и все в порядке с профилями\r\n\t\t\t\t\t\tsetModalWindow(null);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// поправка даты в vk профиле (правится, когда профиль грузится с бэкэнда без регистрации)\r\n\t\t\t\t\tif ((props.vkProfile.bdate.split('.').length == 2) && (new Date(props.myProfile.Birth).getFullYear() >= 1920)) {\r\n\t\t\t\t\t\tprops.setVkProfileInfo({ ...props.vkProfile, bdate: props.vkProfile.bdate + \".\" + new Date(props.myProfile.Birth).getFullYear().toString() })\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (props.myProfile.CityUmbracoId != null && props.myProfile.CityUmbracoId == -1) {\r\n\t\t\t\t\t\tdebugger\r\n\t\t\t\t\t\t// предлагаем выбрать город\r\n\t\t\t\t\t\tsetPopout(null);\r\n\t\t\t\t\t\tsetModalWindow(<ModalCommon modalName=\"SelectCity\" data={{ profile: props.myProfile, cities: props.cities }} action={props.setUserProfileCity} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t\t// if (props.myProfile.Name)\r\n\t\t// {\r\n\t\t// \tsetModalWindow(<ModalCommon modalName=\"MyProfile\" data={props.myProfile} Close={() => setModalWindow(null)}></ModalCommon>)\r\n\t\t// }\r\n\t}, [props.myProfile])\r\n\r\n\t\r\n\t// отобразить панель админа турниров\r\n\tuseEffect(() => {\r\n\t\t// если загрузились админы города\r\n\t\tif ((props.tournamentAdmins != undefined) && (props.tournamentAdmins.length > 0)) {\r\n\t\t\t// отображаем пункт меню администрирование турниров\r\n\t\t\tif (props.tournamentAdmins.find(x => x.UserProfileId == props.myProfile.UserProfileId) != undefined) {\r\n\t\t\t\tprops.setShowAdminTourneyTab(true)\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tprops.setShowAdminTourneyTab(false)\r\n\t\t\t}\r\n\t\t}\r\n\t}, [props.tournamentAdmins])\r\n\r\n\r\n\tconst CellClick = (item) => {\r\n        \r\n        props.setSelectedTournament(item);\r\n        props.setTournamentMode(\"view\");\r\n\t\t// надо заполнять TournamentGroups!\r\n\t\tprops.setActiveMenuItem(\"tournamentitem\");\r\n\t\t//toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\"\r\n    }\r\n\r\n\t// useEffect(() =>{\r\n\t// \tdebugger\r\n\t// \tif (props.vkProfile && props.vkProfile.city) {\r\n\t// \t\tif (props.myProfile) // зарегистрирован и получил данные\r\n\t// \t\t{\r\n\t// \t\t\tif (props.team.selected != null){\r\n\t// \t\t\t\tprops.getActualTournamentsInCity(props.myProfile, props.team.selected);\r\n\t// \t\t\t}\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }, [props.team.selected])\r\n\r\n\t// const changeView = (e) => {\r\n\t// \tprops.setActiveMenuItem(e.currentTarget.dataset.story)\r\n\t// }\r\n\r\n\tlet menuTabBarItems = props.mainMenu.menuItems.map(menuItem => {\r\n\t\tif (menuItem.enabled && menuItem.show)\r\n\t\t\treturn <TabbarItemWithHistory toMenuName={menuItem.name} selected={menuItem.name === props.mainMenu.activeItem.name} data-story={menuItem.name} text={menuItem.title}></TabbarItemWithHistory>\r\n\t\telse\r\n\t\t\treturn null\r\n\t}\r\n\t).filter(i => i);\r\n\r\n\tif ((Array.isArray(props.tournamentsForBids.selectedTournament)) && (props.tournamentsForBids.selectedTournament.length > 0))\r\n\t\tdebugger\r\n\r\n\t\t\r\n\treturn (\r\n\t\t<ConfigProvider>\r\n\t\t\t<AdaptivityProvider>\r\n\t\t\t\t<AppRoot>\r\n\t\t\t\t\t<Epic\r\n\t\t\t\t\t\tactiveStory={props.mainMenu.activeItem.name}\r\n\t\t\t\t\t\ttabbar={\r\n\t\t\t\t\t\t\t<Tabbar>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"hot\" selected={\"hot\" === props.mainMenu.activeItem.name} data-story=\"hot\" text=\"Горячее\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"allTournaments\" selected={\"allTournaments\" === props.mainMenu.activeItem.name} data-story=\"allTournaments\" text=\"Турниры\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t<TabbarItemWithHistory toMenuName=\"profile\" selected={\"profile\" === props.mainMenu.activeItem.name} data-story=\"profile\" text=\"Профиль\"></TabbarItemWithHistory>\r\n\t\t\t\t\t\t\t\t{props.ShowAdminTourneyTab && <TabbarItemWithHistory toMenuName=\"tournamentadmin\" selected={\"tournamentadmin\" === props.mainMenu.activeItem.name} data-story=\"tournamentadmin\" text=\"Управление турнирами\"></TabbarItemWithHistory>}\r\n\t\t\t\t\t\t\t\t{props.ShowAdminTeamTab && <TabbarItemWithHistory toMenuName=\"teamadmin\" selected={\"teamadmin\" === props.mainMenu.activeItem.name} data-story=\"teamadmin\" text=\"Мои команды\"></TabbarItemWithHistory>}\r\n\t\t\t\t\t\t\t</Tabbar>}>\r\n\r\n\t\t\t\t\t\t<View id=\"hot\" activePanel={props.matches.hotPanel} modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"yesterday\">\r\n\t\t\t\t\t\t\t\t<PanelHeader left={<BackButton isBack={true} />}>Вчера</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Информация\">\r\n\t\t\t\t\t\t\t\t\t\tТурниры любительской лиги твоего города\r\n\t\t\t\t\t\t\t\t\t</InfoRow>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n\t\t\t\t\t\t\t\t\t<Tabs>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"yesterday\")}>Вчера</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"today\")}>Сегодня</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"tomorrow\")}>Завтра</TabsItem>\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t\t<Hot Matches={props.matches.hot.yesterday}></Hot>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t<Panel id=\"today\">\r\n\t\t\t\t\t\t\t\t<PanelHeader left={<BackButton isBack={true} />}>Сегодня</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Информация\">\r\n\t\t\t\t\t\t\t\t\t\tТурниры любительской лиги твоего города\r\n\t\t\t\t\t\t\t\t\t</InfoRow>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n\t\t\t\t\t\t\t\t\t<Tabs>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"yesterday\")}>Вчера</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"today\")}>Сегодня</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"tomorrow\")}>Завтра</TabsItem>\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t\t<Hot Matches={props.matches.hot.today}></Hot>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t\t<Panel id=\"tomorrow\">\r\n\t\t\t\t\t\t\t<PanelHeader left={<BackButton isBack={true} />}>Завтра</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Информация\">\r\n\t\t\t\t\t\t\t\t\t\tТурниры любительской лиги твоего города\r\n\t\t\t\t\t\t\t\t\t</InfoRow>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<Group header={<Header mode=\"secondary\">Матчи</Header>}>\r\n\t\t\t\t\t\t\t\t\t<Tabs>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"yesterday\")}>Вчера</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"today\")}>Сегодня</TabsItem>\r\n\t\t\t\t\t\t\t\t\t\t<TabsItem after={<Badge mode=\"prominent\" />} onClick={() => props.setHotPanel(\"tomorrow\")}>Завтра</TabsItem>\r\n\t\t\t\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t\t\t\t\t<Hot Matches={props.matches.hot.tomorrow}></Hot>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"allTournaments\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tВсе турниры\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group header={<Header>Текущие турниры города</Header>}>\r\n\t\t\t\t\t\t\t\t\t<List>\r\n\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tprops.tournament.tournaments.map(t => {\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\treturn <RichCell\r\n\t\t\t\t\t\t\t\t\t\t\t\tcaption={`Организатор: ${t.Founder.Name} ${t.Founder.Surname}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttext={(new Date(t.WhenBegin) > new Date()) ? \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t`Стартует \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t${new Date(t.WhenBegin).getDate() <= 9 ? \"0\" + (new Date(t.WhenBegin).getDate()) : (new Date(t.WhenBegin).getDate())}.${new Date(t.WhenBegin).getMonth()+1 <= 9 ? \"0\" + (new Date(t.WhenBegin).getMonth()+1) : (new Date(t.WhenBegin).getMonth()+1)}.${new Date(t.WhenBegin).getFullYear()}`\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"В процессе\"}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => CellClick(t)} \r\n\t\t\t\t\t\t\t\t\t\t\t>{t.Name}</RichCell>\r\n\t\t\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t\t\t</List>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<Group hidden header={<Header>Архивные турниры города</Header>}>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"profile\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tПрофиль\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>{props.myProfile && props.myProfile.Name && <>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Имя\">{props.myProfile && props.myProfile.Name}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Фамилия\">{props.myProfile && props.myProfile.Surname}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Город\">{props.myProfile && props.myProfile.CityName}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Год рождения\">{props.myProfile && new Date(props.myProfile.Birth).getFullYear()}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Id города привязки\">{props.myProfile && props.myProfile.CityUmbracoId}</InfoRow>\r\n\t\t\t\t\t\t\t\t\t<InfoRow header=\"Город привязки\">{props.myProfile && props.myProfile.CityUmbracoName}</InfoRow>\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t\t<ProfilePanel></ProfilePanel>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"tournamentadmin\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tУправление турнирами\r\n\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TournamentAdminPanel></TournamentAdminPanel>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"teamadmin\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tМои команды\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TeamAdminPanel></TeamAdminPanel>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"tournamentitem\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tТурнир\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TournamentItem \r\n\t\t\t\t\t\t\t\t\tmode={props.tournament.mode}\r\n\t\t\t\t\t\t\t\t\t//Tab=\"shedule\"\r\n\t\t\t\t\t\t\t\t\t//mode=\"view\"\r\n\t\t\t\t\t\t\t\t\t></TournamentItem>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"teamitem\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tКоманда\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t<TeamItem mode={props.team.mode}></TeamItem>\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"bidlist\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tДоступно для заявки\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\t\t<Group>\r\n\t\t\t\t\t\t\t\t\t{/* <BidTeamTournamentGroupsList\r\n\t\t\t\t\t\t\t\t\t\tButton1Handle = {MakeBid}\r\n\t\t\t\t\t\t\t\t\t\tButton2Handle = {CancelBid}\r\n\t\t\t\t\t\t\t\t\t\tList={(props.tournamentsForBids.selectedTournament  \r\n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.selectedTournament) \r\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.selectedTournament.TournamentGroups.length > 0) \r\n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.selectedTournament.TournamentGroups\r\n\t\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tBids={(props.tournamentsForBids.myBids \r\n\t\t\t\t\t\t\t\t\t\t\t&& Array.isArray(props.tournamentsForBids.myBids)\r\n\t\t\t\t\t\t\t\t\t\t\t&& props.tournamentsForBids.myBids.length > 0) \r\n\t\t\t\t\t\t\t\t\t\t\t? props.tournamentsForBids.myBids\r\n\t\t\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t></BidTeamTournamentGroupsList> */}\r\n\t\t\t\t\t\t\t\t</Group>\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t<View id=\"viewuser\" activePanel=\"main\" modal={modalWindow} popout={popout}>\r\n\t\t\t\t\t\t\t<Panel id=\"main\">\r\n\t\t\t\t\t\t\t\t<PanelHeader\r\n\t\t\t\t\t\t\t\t\tleft={<BackButton isBack={true} />}\r\n\t\t\t\t\t\t\t\t//right={<AddCollectButton isBack={false} toMenuName=\"addcollect\"></AddCollectButton>}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tИгрок\r\n\t\t\t\t\t\t\t\t</PanelHeader>\r\n\t\t\t\t\t\t\tИгрок\r\n\t\t\t\t\t\t\t</Panel>\r\n\t\t\t\t\t\t</View>\r\n\t\t\t\t\t\t\r\n\r\n\t\t\t\t\t</Epic>\r\n\t\t\t\t</AppRoot>\r\n\t\t\t</AdaptivityProvider>\r\n\t\t</ConfigProvider>\r\n\t);\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tmainMenu: state.mainMenu,\r\n\t\tShowAdminTourneyTab: state.system.ShowAdminTourneyTab,\r\n\t\tShowAdminTeamTab: state.system.ShowAdminTeamTab,\r\n\t\tcities: state.cityEntity.cities,\r\n\t\tplaces: state.placeEntity.places,\r\n\t\tglobalPopout: state.system.GlobalPopout,\r\n\t\tvkProfile: state.profileEntity.vkProfile,\r\n\t\tmyProfile: state.profileEntity.myProfile,\r\n\t\terrorObject: state.system.ErrorObject,\r\n\t\ttriedToGetProfile: state.profileEntity.triedToGetProfile,\r\n\t\ttournamentAdmins: state.tournamentsEntity.cityTournamentAdmins,\r\n\t\ttournament: state.tournamentsEntity,\r\n\t\tteam: state.teamsEntity,\r\n\t\tbidTeams: state.bidTeamsEntity,\r\n\t\tmatches: state.matches,\r\n        tournamentsForBids: state.bidTeamsEntity,\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n\taddBidTeamToTournamentGroup, cancelBidTeamToTournamentGroup, getActualTournamentsInCity, getTournamentsByCityId, setSelectedTournament, setTournamentMode,\r\n\tsetActiveMenuItem, getAllPlaces, setVkProfileInfo, setGlobalPopout, getUserProfile, getAuthInfo, setTriedToGetProfile, setHotPanel,\r\n\tgetAllCitiesFromServer, setUserProfileCity, getAllPlacesInCityByCityId, getAllCityTournamentAdminsByCityId, setShowAdminTourneyTab, getMatchesInCurrentCity,\r\n})(App);\r\n","import { users } from \"./constants/commonConstants\";\r\n\r\nconst ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\n\r\n\r\nconst initState = {\r\n    users: [\r\n        users[0],\r\n        users[1],\r\n    ]\r\n}\r\n\r\n\r\nlet userReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\n\r\nexport default userReducer;","const ANY_ACTION_TYPE = \"ANY_ACTION_TYPE\";\r\n\r\nexport const ampluaCathegoryTypes = [\r\n    {id: 0, name: \"Вратарь\"},\r\n    {id: 1, name: \"Защитник\"},\r\n    {id: 2, name: \"Полузащитник\"},\r\n    {id: 3, name: \"Нападающий\"},\r\n    {id: 4, name: \"Тренер\"},\r\n    {id: 5, name: \"Административный персонал\"},\r\n]\r\n\r\nexport const ampluaTypes = [\r\n    {id: 0, name: \"Вратарь\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 1, name: \"Правый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 2, name: \"Левый защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 3, name: \"Центральный защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 4, name: \"Передний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 5, name: \"Последний защитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 6, name: \"Правый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 7, name: \"Левый полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 8, name: \"Центральный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 9, name: \"Атакующий полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 10, name: \"Опорный полузащитник\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 11, name: \"Левый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 12, name: \"Правый вингер\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 13, name: \"Левый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 14, name: \"Правый нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 15, name: \"Центральный нападающий\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 16, name: \"Игрок под нападающими\", isPlayer: true, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 17, name: \"Тренер\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 18, name: \"Помощник тренера\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 19, name: \"Администратор команды\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 20, name: \"Организатор сбора\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 21, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n    {id: 22, name: \"\", isPlayer: false, ampluaCathegory: ampluaCathegoryTypes[0]},\r\n]\r\n\r\nconst initState = {\r\n\r\n}\r\n\r\n\r\nlet ampluaReducer = (state = initState, action) => \r\n{\r\n    switch (action.type){\r\n        case ANY_ACTION_TYPE: {\r\n            return state;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const anyActionCreator = (val) => {\r\n    return {\r\n        type: ANY_ACTION_TYPE,\r\n        anyVal: val\r\n    }\r\n}\r\n\r\n\r\nexport default ampluaReducer;","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\r\nimport profileReducer from './profileReducer.js'\r\nimport collectReducer from './collectReducer.js'\r\nimport userReducer from './userReducer.js'\r\nimport hot from './hotReducer.js'\r\nimport tournaments from './tournamentsReducer.js'\r\nimport teams from './teamsReducer.js'\r\nimport bidTeams from './bidTeamsReducer.js'\r\nimport ampluaReducer from './ampluaReducer.js'\r\nimport placeReducer from './placeReducer.js'\r\nimport paymentReducer from './paymentReducer.js'\r\nimport mainMenuReducer from './mainMenuReducer.js'\r\nimport systemReducer from './systemReducer.js'\r\nimport cityReducer from './cityReducer.js'\r\nimport matchReducer from './matchReducer.js'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV !== 'production' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      name: 'MyApp', actionsBlacklist: ['REDUX_STORAGE_SAVE']\r\n    }) : compose;\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profileEntity: profileReducer,\r\n    collectEntity: collectReducer,\r\n    hotEntity: hot,\r\n    tournamentsEntity: tournaments,\r\n    teamsEntity: teams,\r\n    teamsEntity: teams,\r\n    bidTeamsEntity: bidTeams,\r\n    matches: matchReducer,\r\n    userEntity: userReducer,\r\n    cityEntity: cityReducer,\r\n    ampluaEntity: ampluaReducer,\r\n    placeEntity: placeReducer,\r\n    paymentEntity: paymentReducer,\r\n    mainMenu: mainMenuReducer,\r\n    system: systemReducer,\r\n})\r\n\r\n// const middlewareEnhancer = applyMiddleware(thunkMiddleware)\r\n// const composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer)\r\n// composeEnhancers(\r\n//     applyMiddleware(thunk))\r\n\r\n//let store = createStore(reducers, composeWithDevTools(applyMiddleware(thunkMiddleware)));\r\nlet store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nwindow.store = store;\r\n\r\nexport default store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport bridge from \"@vkontakte/vk-bridge\";\r\nimport App from \"./App\";\r\nimport store from './store/store'\r\nimport { Provider } from \"react-redux\";\r\n\r\n// Init VK  Mini App\r\nbridge.send(\"VKWebAppInit\");\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n  <App />\r\n  </Provider>, document.getElementById(\"root\"));\r\nif (process.env.NODE_ENV === \"development\") {\r\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\r\n}\r\n"],"sourceRoot":""}